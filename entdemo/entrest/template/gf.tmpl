{{ with $.Header }}{{ . }}{{ else }}// Code generated by entc, DO NOT EDIT.{{ end }}

package entrest

{{ $camelName := camel $.Name }}

import (
    "entdemo/entrest"
    "{{ $.Config.Package }}"
    "{{ $.Config.Package }}/{{ $.Package }}"
    "{{ $.Config.Package }}/predicate"

    "github.com/gogf/gf/frame/g"
    "github.com/gogf/gf/net/ghttp"
    "github.com/gogf/gf/text/gstr"

    {{- $apiAnnotation := $.Annotations.EntRESTAPI }}
    {{- range $m := $apiAnnotation.Middlewares }}
        "{{ $m.PkgPath }}"
    {{- end }}
)

// {{ $.Name }} .
type {{ $.Name }} struct {
    ID {{ $.ID.Type }} {{ with $.Annotations.Fields.StructTag.id }}`{{ . }}`{{ else }}`{{ $.ID.StructTag }}`{{ end }}
    {{- range $f := $.Fields }}
        {{- $tag := $f.StructTag }}{{ with $tags := $.Annotations.Fields.StructTag }}{{ with index $tags $f.Name }}{{ $tag = . }}{{ end }}{{ end }}
        {{ $f.StructField }} {{ if $f.NillableValue }}*{{ end }}{{ $f.Type }} {{ if not $f.Sensitive }}`{{ $tag }}`{{ else }}`json:"-"`{{ end }}
    {{- end }}
    {{- range $e := $.Edges }}
        {{ pascal $e.Name }}{{ if not $e.Unique}} []{{ end }}*ent.{{ $e.Type.Name }} `{{ printf `json:"%s,omitempty"` $e.Name }}`
    {{- end }}
}

// List{{ $.Name }}Request .
type List{{ $.Name }}Request struct {
	PageSize  int    `json:"pageSize,omitempty"`
	PageToken int    `json:"pageToken,omitempty"`
	Sort      string `json:"sort,omitempty"`
    {{- range $f := $.Fields }}
        {{- $tag := $f.StructTag }}{{ with $tags := $.Annotations.Fields.StructTag }}{{ with index $tags $f.Name }}{{ $tag = . }}{{ end }}{{ end }}
        {{- if not $f.Sensitive }}
            {{- $annotation := $f.Annotations.EntRESTField }}
            {{- if or (isNil $annotation) $annotation.Queryable}}
                {{ $f.StructField }} *{{ $f.Type }} `{{ $tag }}`
            {{- end }}
        {{- end }}
    {{- end }}
}

// Get{{ $.Name }}Request .
type Get{{ $.Name }}Request struct {
    ID {{ $.ID.Type }} {{ with $.Annotations.Fields.StructTag.id }}`{{ . }} v:"required"`{{ else }}`{{ $.ID.StructTag }} v:"required"`{{ end }}
}

// Create{{ $.Name }}Request .
type Create{{ $.Name }}Request struct {
    {{- range $f := $.Fields }}
        {{- $tag := $f.StructTag }}{{ with $tags := $.Annotations.Fields.StructTag }}{{ with index $tags $f.Name }}{{ $tag = . }}{{ end }}{{ end }}
        {{- if $annotation := $f.Annotations.EntRESTField }}
            {{- if $annotation.Creatable }}
                {{- if $annotation.Validate }}
                    {{- $tag = printf `%s v:"%s"` $tag $annotation.Validate }}
                {{- end }}
                {{ $f.StructField }} {{ if $f.NillableValue }}*{{ end }}{{ $f.Type }} {{ if not $f.Sensitive }}`{{ $tag }}`{{ else }}`json:"-"`{{ end }}
            {{- end }}
        {{- else }}
            {{ $f.StructField }} {{ if $f.NillableValue }}*{{ end }}{{ $f.Type }} {{ if not $f.Sensitive }}`{{ $tag }}`{{ else }}`json:"-"`{{ end }}
        {{- end }}
    {{- end }}
    {{- range $e := $.Edges }}
        {{- $annotation := $e.Annotations.EntRESTEdge }}
        {{- if or (isNil $annotation) $annotation.GetWith }}
            {{- $tag := printf `json:"%s,omitempty"` $e.Name }}
            {{- if $annotation.Validate }}
                {{- $tag = printf `%s v:"%s"` $tag $annotation.Validate }}
            {{- end }}
            {{ pascal $e.Name }}{{ if not $e.Unique}} []{{ end }}*{{ $e.Type.Name }} `{{ $tag }}`
        {{- end }}
    {{- end }}
}

// Update{{ $.Name }}Request .
type Update{{ $.Name }}Request struct {
    ID {{ $.ID.Type }} {{ with $.Annotations.Fields.StructTag.id }}`{{ . }} v:"required"`{{ else }}`{{ $.ID.StructTag }} v:"required"`{{ end }}
    {{- range $f := $.Fields }}
        {{- $tag := $f.StructTag }}{{ with $tags := $.Annotations.Fields.StructTag }}{{ with index $tags $f.Name }}{{ $tag = . }}{{ end }}{{ end }}
        {{- if $annotation := $f.Annotations.EntRESTField }}
            {{- if $annotation.Updatable }}
                {{- if $annotation.Validate }}
                    {{- $tag = printf `%s v:"%s"` $tag $annotation.Validate }}
                {{- end }}
                {{ $f.StructField }} {{ if $f.NillableValue }}*{{ end }}{{ $f.Type }} {{ if not $f.Sensitive }}`{{ $tag }}`{{ else }}`json:"-"`{{ end }}
            {{- end }}
        {{- else if not $f.Immutable }}
            {{ $f.StructField }} {{ if $f.NillableValue }}*{{ end }}{{ $f.Type }} {{ if not $f.Sensitive }}`{{ $tag }}`{{ else }}`json:"-"`{{ end }}
        {{- end }}
    {{- end }}
    {{- range $e := $.Edges }}
        {{- $annotation := $e.Annotations.EntRESTEdge }}
        {{- if or (isNil $annotation) $annotation.GetWith }}
            {{- $tag := printf `json:"%s,omitempty"` $e.Name }}
            {{- if $annotation.Validate }}
                {{- $tag = printf `%s v:"%s"` $tag $annotation.Validate }}
            {{- end }}
            {{ pascal $e.Name }}{{ if not $e.Unique}} []{{ end }}*{{ $e.Type.Name }} `{{ $tag }}`
        {{- end }}
    {{- end }}
}

// Delete{{ $.Name }}Request .
type Delete{{ $.Name }}Request struct {
    ID {{ $.ID.Type }} {{ with $.Annotations.Fields.StructTag.id }}`{{ . }} v:"required"`{{ else }}`{{ $.ID.StructTag }} v:"required"`{{ end }}
}

func ent{{ $.Name }}2rest{{ $.Name }}({{ $camelName }} *ent.{{ $.Name }}) *{{ $.Name }} {
	return &{{ $.Name }}{
        ID: {{ $camelName }}.ID,
		{{- range $f := $.Fields }}
            {{ $f.StructField }}: {{ $camelName }}.{{ $f.StructField }},
        {{- end }}
        {{- range $e := $.Edges }}
            {{- $annotation := $e.Annotations.EntRESTEdge }}
            {{- if or (isNil $annotation) $annotation.GetWith }}
                {{- $pascalEName := pascal $e.Name }}
                {{ $pascalEName }}: {{ $camelName }}.Edges.{{ $pascalEName }},
            {{- end }}
        {{- end }}
	}
}

func ent{{ $.Name }}s2rest{{ $.Name }}s({{ $camelName }}s []*ent.{{ $.Name }}) []*{{ $.Name }} {
	rest{{ $.Name }}s := make([]*{{ $.Name }}, len({{ $camelName }}s))
	for _, {{ $camelName }} := range {{ $camelName }}s {
		rest{{ $.Name }}s = append(rest{{ $.Name }}s, ent{{ $.Name }}2rest{{ $.Name }}({{ $camelName }}))
	}
	return rest{{ $.Name }}s
}

func rest{{ $.Name }}IDs(items []*{{ $.Name }}) []string {
	ids := make([]string, len(items))
	for _, item := range items {
		ids = append(ids, item.ID)
	}
	return ids
}

func get{{ $.Name }}ColumnForListRequest(field string) string {
	switch field {
    {{- range $f := $.Fields }}
        {{- if not $f.Sensitive }}
            {{- $annotation := $f.Annotations.EntRESTField }}
            {{- if or (isNil $annotation) $annotation.Queryable}}
                case "{{ $f.Name }}":
                    return {{ $.Package }}.Field{{ $f.StructField }}
            {{- end }}
        {{- end }}
    {{- end }}
	default:
		return ""
	}
}

func New{{ $.Name }}ServiceHandler(client *ent.Client, respHandler func(r *ghttp.Request, result *entrest.Result)) {
	s := g.Server()

    {{- $apiPrefix := "/api" }}
    {{- if $apiAnnotation.Prefix }}
        {{- $apiPrefix = $apiAnnotation.Prefix }}
    {{- end }}

    s.BindMiddleware(
        "GET:{{ $apiPrefix }}/{{ $.Package }}",
        {{- range $m := $apiAnnotation.Middlewares }}
            {{- if and (or (eq $m.ReqType "") (eq $m.ReqType "list")) (ne $m.Code "") }}
                {{ $m.Code }},
            {{- end }}
        {{- end }}
        func(r *ghttp.Request) {
            var req List{{ $.Name }}Request
            if err := r.Parse(&req); err != nil {
                respHandler(r, &entrest.Result{
                    ErrorType: entrest.ErrorParameterBind,
                    Error:     err,
                })
            }

            {{ $camelName }}Query := client.{{ $.Name }}.Query()

            if req.Sort != "" {
                sortName, sortOp := entrest.GetSortArg(req.Sort)
                if fieldName := get{{ $.Name }}ColumnForListRequest(sortName); fieldName != "" {
                    if sortOp == entrest.ASC {
                        {{ $camelName }}Query.Order(
                            ent.Asc(fieldName),
                        )
                    } else if sortOp == entrest.DESC {
                        {{ $camelName }}Query.Order(
                            ent.Desc(fieldName),
                        )
                    }
                }
            }

            wherePlaceholder := make([]predicate.{{ $.Name }}, 0)
            {{- range $f := $.Fields }}
                {{- if not $f.Sensitive }}
                    {{- $annotation := $f.Annotations.EntRESTField }}
                    {{- if or (isNil $annotation) $annotation.Queryable}}
                        if req.{{ $f.StructField }} != nil {
                            {{- if $annotation.QueryOp }}
                                wherePlaceholder = append(wherePlaceholder, {{ $.Package }}.{{ $f.StructField }}{{ $annotation.QueryOp }}(*req.{{ $f.StructField }}))
                            {{- else }}
                                {{- $ops := ops $f }}
                                {{- $defaultOp := index $ops 0 }}
                                wherePlaceholder = append(wherePlaceholder, {{ $.Package }}.{{ $f.StructField }}{{ $defaultOp.Name }}(*req.{{ $f.StructField }}))
                            {{- end }}
                        }
                    {{- end }}
                {{- end }}
            {{- end }}
            if len(wherePlaceholder) > 0 {
                {{ $camelName }}Query.Where(wherePlaceholder...)
            }

            qty, err := {{ $camelName }}Query.Count(r.Context())
            if err != nil {
                respHandler(r, &entrest.Result{
                    ErrorType: entrest.ErrorList,
                    Error:     err,
                })
            }

            {{ $camelName }}s, err := {{ $camelName }}Query.
                {{- range $e := $.Edges }}
                    {{- $annotation := $e.Annotations.EntRESTEdge }}
                    {{- if or (isNil $annotation) $annotation.QueryWith }}
                        With{{ pascal $e.Name }}().
                    {{- end }}
                {{- end }}
                Limit(req.PageSize).
                Offset((req.PageToken - 1) * req.PageSize).
                All(r.Context())
            if err != nil {
                respHandler(r, &entrest.Result{
                    ErrorType: entrest.ErrorList,
                    Error:     err,
                })
            }

            res := ent{{ $.Name }}s2rest{{ $.Name }}s({{ $camelName }}s)
            respHandler(r, &entrest.Result{
                Data:   res,
                Total:  qty,
                IsList: true,
            })
        },
    )

    s.BindMiddleware(
        "GET:{{ $apiPrefix }}/{{ $.Package }}/{id}",
        {{- range $m := $apiAnnotation.Middlewares }}
            {{- if and (or (eq $m.ReqType "") (eq $m.ReqType "get")) (ne $m.Code "") }}
                {{ $m.Code }},
            {{- end }}
        {{- end }}
        func(r *ghttp.Request) {
            var req Get{{ $.Name }}Request
            if err := r.Parse(&req); err != nil {
                respHandler(r, &entrest.Result{
                    ErrorType: entrest.ErrorParameterBind,
                    Error:     err,
                })
            }

            {{ $camelName }}, err := client.{{ $.Name }}.
                Query().
				Where(
					{{ $.Package }}.IDEQ(req.ID),
				).
				{{- range $e := $.Edges }}
                    {{- $annotation := $e.Annotations.EntRESTEdge }}
                    {{- if or (isNil $annotation) $annotation.GetWith }}
                        With{{ pascal $e.Name }}().
                    {{- end }}
                {{- end }}
				First(r.Context())
            if err != nil {
                respHandler(r, &entrest.Result{
                    ErrorType: entrest.ErrorGet,
                    Error:     err,
                })
            }

            res := ent{{ $.Name }}2rest{{ $.Name }}({{ $camelName }})
            respHandler(r, &entrest.Result{
                Data: res,
            })
        },
    )

	s.BindMiddleware(
        "POST:{{ $apiPrefix }}/{{ $.Package }}",
        {{- range $m := $apiAnnotation.Middlewares }}
            {{- if and (or (eq $m.ReqType "") (eq $m.ReqType "create")) (ne $m.Code "") }}
                {{ $m.Code }},
            {{- end }}
        {{- end }}
        func(r *ghttp.Request) {
            var req Create{{ $.Name }}Request
            if err := r.Parse(&req); err != nil {
                respHandler(r, &entrest.Result{
                    ErrorType: entrest.ErrorParameterBind,
                    Error:     err,
                })
            }

            {{ $uniqueFields := list }}
            {{- range $f := $.Fields }}
                {{- $annotation := $f.Annotations.EntRESTField }}
                {{- if and (or (isNil $annotation) $annotation.Creatable) $f.Unique }}
                    {{- $uniqueFields = append $uniqueFields $f.StructField }}
                {{- end }}
            {{- end }}
            {{- if ne (len $uniqueFields) 0 }}
                duplicateCount, err := client.{{ $.Name }}.
                    Query().
                    Where(
                        {{- range $uf := $uniqueFields }}
                            {{ $.Package }}.{{ $uf }}EQ(req.{{ $uf }}),
                        {{- end }}
                    ).
                    Count(r.Context())
                if err != nil {
                    respHandler(r, &entrest.Result{
                        ErrorType: entrest.ErrorCheckDuplicate,
                        Error:     err,
                    })
                } else if duplicateCount > 0 {
                    respHandler(r, &entrest.Result{
                        ErrorType: entrest.ErrorDuplicate,
                        Error:     err,
                    })
                }
            {{- end }}

            res, err := client.{{ $.Name }}.
                Create().
                {{- range $f := $.Fields }}
                    {{- if $annotation := $f.Annotations.EntRESTField }}
                        {{- if $annotation.Creatable }}
                            {{- if $f.NillableValue }}
                                SetNillable{{ $f.StructField }}(req.{{ $f.StructField }}).
                            {{- else }}
                                Set{{ $f.StructField }}(req.{{ $f.StructField }}).
                            {{- end }}
                        {{- end }}
                    {{- else }}
                        {{- if $f.NillableValue }}
                            SetNillable{{ $f.StructField }}(req.{{ $f.StructField }}).
                        {{- else }}
                            Set{{ $f.StructField }}(req.{{ $f.StructField }}).
                        {{- end }}
                    {{- end }}
                {{- end }}
                {{- range $e := $.Edges }}
                    {{- $annotation := $e.Annotations.EntRESTEdge }}
                    {{- if or (isNil $annotation) $annotation.GetWith }}
                        {{- $edgeField := pascal $e.Name }}
                        {{- if $e.Unique }}
                            Set{{ $edgeField }}ID(req.{{ $edgeField }}.ID).
                        {{- else }}
                            Add{{ $e.Type.Name }}IDs(rest{{ $e.Type.Name }}IDs(req.{{ $edgeField }})...).
                        {{- end }}
                    {{- end }}
                {{- end }}
                Save(r.Context())
            if err != nil {
                respHandler(r, &entrest.Result{
                    ErrorType: entrest.ErrorCreate,
                    Error:     err,
                })
            }

            respHandler(r, &entrest.Result{
                Data: res,
            })
        },
    )

	s.BindMiddleware(
        "PUT:{{ $apiPrefix }}/{{ $.Package }}/{id}",
        {{- range $m := $apiAnnotation.Middlewares }}
            {{- if and (or (eq $m.ReqType "") (eq $m.ReqType "update")) (ne $m.Code "") }}
                {{ $m.Code }},
            {{- end }}
        {{- end }}
        func(r *ghttp.Request) {
            var req Update{{ $.Name }}Request
            if err := r.Parse(&req); err != nil {
                respHandler(r, &entrest.Result{
                    ErrorType: entrest.ErrorParameterBind,
                    Error:     err,
                })
            }

            {{ $uniqueFields := list }}
            {{- range $f := $.Fields }}
                {{- $annotation := $f.Annotations.EntRESTField }}
                {{- if and (or (isNil $annotation) $annotation.Updatable) $f.Unique }}
                    {{- $uniqueFields = append $uniqueFields $f.StructField }}
                {{- end }}
            {{- end }}
            {{- if ne (len $uniqueFields) 0 }}
                duplicateCount, err := client.{{ $.Name }}.
                    Query().
                    Where(
                        {{ $.Package }}.IDNEQ(req.ID),
                        {{- range $uf := $uniqueFields }}
                            {{ $.Package }}.{{ $uf }}EQ(req.{{ $uf }}),
                        {{- end }}
                    ).
                    Count(r.Context())
                if err != nil {
                    respHandler(r, &entrest.Result{
                        ErrorType: entrest.ErrorCheckDuplicate,
                        Error:     err,
                    })
                } else if duplicateCount > 0 {
                    respHandler(r, &entrest.Result{
                        ErrorType: entrest.ErrorDuplicate,
                        Error:     err,
                    })
                }
            {{- end }}

            res, err := client.{{ $.Name }}.
                UpdateOneID(req.ID).
                {{- range $f := $.Fields }}
                    {{- if $annotation := $f.Annotations.EntRESTField }}
                        {{- if $annotation.Updatable }}
                            {{- if $f.NillableValue }}
                                SetNillable{{ $f.StructField }}(req.{{ $f.StructField }}).
                            {{- else }}
                                Set{{ $f.StructField }}(req.{{ $f.StructField }}).
                            {{- end }}
                        {{- end }}
                    {{- else if not $f.Immutable }}
                        {{- if $f.NillableValue }}
                            SetNillable{{ $f.StructField }}(req.{{ $f.StructField }}).
                        {{- else }}
                            Set{{ $f.StructField }}(req.{{ $f.StructField }}).
                        {{- end }}
                    {{- end }}
                {{- end }}
                {{- range $e := $.Edges }}
                    {{- $annotation := $e.Annotations.EntRESTEdge }}
                    {{- if or (isNil $annotation) $annotation.GetWith }}
                        {{- $edgeField := pascal $e.Name }}
                        {{- if $e.Unique }}
                            Set{{ $edgeField }}ID(req.{{ $edgeField }}.ID).
                        {{- else }}
                            Add{{ $e.Type.Name }}IDs(rest{{ $e.Type.Name }}IDs(req.{{ $edgeField }})...).
                        {{- end }}
                    {{- end }}
                {{- end }}
                Save(r.Context())
            if err != nil {
                respHandler(r, &entrest.Result{
                    ErrorType: entrest.ErrorUpdate,
                    Error:     err,
                })
            }

            respHandler(r, &entrest.Result{
                Data: res,
            })
        },
    )

	s.BindMiddleware(
        "DELETE:{{ $apiPrefix }}/{{ $.Package }}/{id}",
        {{- range $m := $apiAnnotation.Middlewares }}
            {{- if and (or (eq $m.ReqType "") (eq $m.ReqType "delete")) (ne $m.Code "") }}
                {{ $m.Code }},
            {{- end }}
        {{- end }}
        func(r *ghttp.Request) {
            var req Delete{{ $.Name }}Request
            if err := r.Parse(&req); err != nil {
                respHandler(r, &entrest.Result{
                    ErrorType: entrest.ErrorParameterBind,
                    Error:     err,
                })
            }

            ids := gstr.SplitAndTrimSpace(req.ID, ",")
            _, err := client.{{ $.Name }}.
                Delete().
                Where(
                    {{ $.Package }}.IDIn(ids...),
                ).
                Exec(r.Context())
            if err != nil {
                respHandler(r, &entrest.Result{
                    ErrorType: entrest.ErrorDelete,
                    Error:     err,
                })
            }

            respHandler(r, &entrest.Result{})
        },
    )
}
