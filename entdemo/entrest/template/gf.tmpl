package entrest

import (
	"entdemo/entrest"
    "{{ trimRightStr $.Schema "/schema" }}"

	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/net/ghttp"

    {{- $apiAnnotation := $.Annotations.EntRESTAPI }}
    {{- range $m := $apiAnnotation.Middlewares }}
        "{{ $m.PkgPath }}"
    {{- end }}
)

// {{ $.Name }} .
type {{ $.Name }} struct {
    ID {{ $.ID.Type }} {{ with $.Annotations.Fields.StructTag.id }}`{{ . }}`{{ else }}`{{ $.ID.StructTag }}`{{ end }}
    {{- range $f := $.Fields }}
        {{- $tag := $f.StructTag }}{{ with $tags := $.Annotations.Fields.StructTag }}{{ with index $tags $f.Name }}{{ $tag = . }}{{ end }}{{ end }}
        {{ $f.StructField }} {{ if $f.NillableValue }}*{{ end }}{{ $f.Type }} {{ if not $f.Sensitive }}`{{ $tag }}`{{ else }}`json:"-"`{{ end }}
    {{- end }}
    {{- range $e := $.Edges }}
        {{- $annotation := $e.Annotations.EntRESTField }}
        {{- if or (isNil $annotation) $annotation.Creatable $annotation.Updatable }}
            {{- $tag := printf `json:"%s,omitempty"` $e.Name }}
            {{- if $annotation.Validate }}
                {{- $tag = printf `%s v:"%s"` $tag $annotation.Validate }}
            {{- end }}
            {{ pascal $e.Name }}{{ if not $e.Unique}} []{{ end }}*ent.{{ $e.Type.Name }} `{{ $tag }}`
        {{- end }}
    {{- end }}
}

// List{{ $.Name }}Request .
type List{{ $.Name }}Request struct {
	PageSize  int    `json:"pageSize,omitempty"`
	PageToken int    `json:"pageToken,omitempty"`
	Sort      string `json:"sort,omitempty"`
    {{- range $f := $.Fields }}
        {{- $tag := $f.StructTag }}{{ with $tags := $.Annotations.Fields.StructTag }}{{ with index $tags $f.Name }}{{ $tag = . }}{{ end }}{{ end }}
        {{- if not $f.Sensitive }}
            {{- if $annotation := $f.Annotations.EntRESTField }}
                {{- if $annotation.Searchable }}
                    {{ $f.StructField }} {{ if $f.NillableValue }}*{{ end }}{{ $f.Type }} `{{ $tag }}`
                {{- end }}
            {{- else }}
                {{ $f.StructField }} {{ if $f.NillableValue }}*{{ end }}{{ $f.Type }} `{{ $tag }}`
            {{- end }}
        {{- end }}
    {{- end }}
}

// Get{{ $.Name }}Request .
type Get{{ $.Name }}Request struct {
    ID {{ $.ID.Type }} {{ with $.Annotations.Fields.StructTag.id }}`{{ . }}`{{ else }}`{{ $.ID.StructTag }}`{{ end }}
}

// Create{{ $.Name }}Request .
type Create{{ $.Name }}Request struct {
    {{- range $f := $.Fields }}
        {{- $tag := $f.StructTag }}{{ with $tags := $.Annotations.Fields.StructTag }}{{ with index $tags $f.Name }}{{ $tag = . }}{{ end }}{{ end }}
        {{- if $annotation := $f.Annotations.EntRESTField }}
            {{- if $annotation.Creatable }}
                {{- if $annotation.Validate }}
                    {{- $tag = printf `%s v:"%s"` $tag $annotation.Validate }}
                {{- end }}
                {{ $f.StructField }} {{ if $f.NillableValue }}*{{ end }}{{ $f.Type }} {{ if not $f.Sensitive }}`{{ $tag }}`{{ else }}`json:"-"`{{ end }}
            {{- end }}
        {{- else }}
            {{ $f.StructField }} {{ if $f.NillableValue }}*{{ end }}{{ $f.Type }} {{ if not $f.Sensitive }}`{{ $tag }}`{{ else }}`json:"-"`{{ end }}
        {{- end }}
    {{- end }}
    {{- range $e := $.Edges }}
        {{- $annotation := $e.Annotations.EntRESTField }}
        {{- if or (isNil $annotation) $annotation.Creatable }}
            {{- $tag := printf `json:"%s,omitempty"` $e.Name }}
            {{- if $annotation.Validate }}
                {{- $tag = printf `%s v:"%s"` $tag $annotation.Validate }}
            {{- end }}
            {{ pascal $e.Name }}{{ if not $e.Unique}} []{{ end }}*{{ $e.Type.Name }} `{{ $tag }}`
        {{- end }}
    {{- end }}
}

// Update{{ $.Name }}Request .
type Update{{ $.Name }}Request struct {
    {{- range $f := $.Fields }}
        {{- $tag := $f.StructTag }}{{ with $tags := $.Annotations.Fields.StructTag }}{{ with index $tags $f.Name }}{{ $tag = . }}{{ end }}{{ end }}
        {{- if $annotation := $f.Annotations.EntRESTField }}
            {{- if $annotation.Updatable }}
                {{- if $annotation.Validate }}
                    {{- $tag = printf `%s v:"%s"` $tag $annotation.Validate }}
                {{- end }}
                {{ $f.StructField }} {{ if $f.NillableValue }}*{{ end }}{{ $f.Type }} {{ if not $f.Sensitive }}`{{ $tag }}`{{ else }}`json:"-"`{{ end }}
            {{- end }}
        {{- else if not $f.Immutable }}
            {{ $f.StructField }} {{ if $f.NillableValue }}*{{ end }}{{ $f.Type }} {{ if not $f.Sensitive }}`{{ $tag }}`{{ else }}`json:"-"`{{ end }}
        {{- end }}
    {{- end }}
    {{- range $e := $.Edges }}
        {{- $annotation := $e.Annotations.EntRESTField }}
        {{- if or (isNil $annotation) $annotation.Updatable }}
            {{- $tag := printf `json:"%s,omitempty"` $e.Name }}
            {{- if $annotation.Validate }}
                {{- $tag = printf `%s v:"%s"` $tag $annotation.Validate }}
            {{- end }}
            {{ pascal $e.Name }}{{ if not $e.Unique}} []{{ end }}*{{ $e.Type.Name }} `{{ $tag }}`
        {{- end }}
    {{- end }}
}

// Delete{{ $.Name }}Request .
type Delete{{ $.Name }}Request struct {
    ID {{ $.ID.Type }} {{ with $.Annotations.Fields.StructTag.id }}`{{ . }}`{{ else }}`{{ $.ID.StructTag }}`{{ end }}
}

func ent{{ $.Name }}2rest{{ $.Name }}(e *ent.{{ $.Name }}) *{{ $.Name }} {
	return &{{ $.Name }}{
        ID: e.ID,
		{{- range $f := $.Fields }}
            {{ $f.StructField }}: e.{{ $f.StructField }},
        {{- end }}
	}
}

func rest{{ $.Name }}2ent{{ $.Name }}(r *{{ $.Name }}) *ent.{{ $.Name }} {
	return &ent.{{ $.Name }}{
		ID: r.ID,
		{{- range $f := $.Fields }}
            {{ $f.StructField }}: r.{{ $f.StructField }},
        {{- end }}
	}
}

func rest{{ $.Name }}IDs(items []*{{ $.Name }}) []string {
	ids := make([]string, len(items))
	for _, item := range items {
		ids = append(ids, item.ID)
	}
	return ids
}

func New{{ $.Name }}ServiceHandler(client *ent.Client, respHandler func(r *ghttp.Request, result *entrest.Result)) {
	s := g.Server()

    {{- $apiPrefix := "/api" }}
    {{- if $apiAnnotation.Prefix }}
        {{- $apiPrefix = $apiAnnotation.Prefix }}
    {{- end }}

    {{- $idTypePascal := pascal $.ID.Type.String }}

    s.BindMiddleware(
        "GET:{{ $apiPrefix }}/{{ snake $.Name }}",
        {{- range $m := $apiAnnotation.Middlewares }}
            {{- if and (or (eq $m.ReqType "") (eq $m.ReqType "list")) (ne $m.Code "") }}
                {{ $m.Code }},
            {{- end }}
        {{- end }}
        func(r *ghttp.Request) {
            var req List{{ $.Name }}Request
            if err := r.Parse(&req); err != nil {
                respHandler(r, &entrest.Result{
                    ErrorType: entrest.ErrorParameterBind,
                    Error:     err,
                })
            }

            res, err := client.{{ $.Name }}.
                Query().
                Limit(req.PageSize).
                Offset((req.PageToken - 1) * req.PageSize).
                All(r.Context())
            if err != nil {
                respHandler(r, &entrest.Result{
                    ErrorType: entrest.ErrorList,
                    Error:     err,
                })
            }
            respHandler(r, &entrest.Result{
                Data:   res,
                IsList: true,
            })
        },
    )

    s.BindMiddleware(
        "GET:{{ $apiPrefix }}/{{ snake $.Name }}/{id}",
        {{- range $m := $apiAnnotation.Middlewares }}
            {{- if and (or (eq $m.ReqType "") (eq $m.ReqType "get")) (ne $m.Code "") }}
                {{ $m.Code }},
            {{- end }}
        {{- end }}
        func(r *ghttp.Request) {
            var req Get{{ $.Name }}Request
            if err := r.Parse(&req); err != nil {
                respHandler(r, &entrest.Result{
                    ErrorType: entrest.ErrorParameterBind,
                    Error:     err,
                })
            }

            id := r.Get{{ $idTypePascal }}("id")
            res, err := client.{{ $.Name }}.
                Get(r.Context(), id)
            if err != nil {
                respHandler(r, &entrest.Result{
                    ErrorType: entrest.ErrorGet,
                    Error:     err,
                })
            }
            respHandler(r, &entrest.Result{
                Data: res,
            })
        },
    )

	s.BindMiddleware(
        "POST:{{ $apiPrefix }}/{{ snake $.Name }}",
        {{- range $m := $apiAnnotation.Middlewares }}
            {{- if and (or (eq $m.ReqType "") (eq $m.ReqType "create")) (ne $m.Code "") }}
                {{ $m.Code }},
            {{- end }}
        {{- end }}
        func(r *ghttp.Request) {
            var req Create{{ $.Name }}Request
            if err := r.Parse(&req); err != nil {
                respHandler(r, &entrest.Result{
                    ErrorType: entrest.ErrorParameterBind,
                    Error:     err,
                })
            }

            res, err := client.{{ $.Name }}.
                Create().
                {{- range $f := $.Fields }}
                    {{- if $annotation := $f.Annotations.EntRESTField }}
                        {{- if $annotation.Creatable }}
                            {{- if $f.NillableValue }}
                                SetNillable{{ $f.StructField }}(req.{{ $f.StructField }}).
                            {{- else }}
                                Set{{ $f.StructField }}(req.{{ $f.StructField }}).
                            {{- end }}
                        {{- end }}
                    {{- else }}
                        {{- if $f.NillableValue }}
                            SetNillable{{ $f.StructField }}(req.{{ $f.StructField }}).
                        {{- else }}
                            Set{{ $f.StructField }}(req.{{ $f.StructField }}).
                        {{- end }}
                    {{- end }}
                {{- end }}
                {{- range $e := $.Edges }}
                    {{- $annotation := $e.Annotations.EntRESTField }}
                    {{- if or (isNil $annotation) $annotation.Creatable }}
                        {{- $edgeField := pascal $e.Name }}
                        {{- if $e.Unique }}
                            Set{{ $edgeField }}ID(req.{{ $edgeField }}.ID).
                        {{- else }}
                            Add{{ $e.Type.Name }}IDs(rest{{ $e.Type.Name }}IDs(req.{{ $edgeField }})...).
                        {{- end }}
                    {{- end }}
                {{- end }}
                Save(r.Context())
            if err != nil {
                respHandler(r, &entrest.Result{
                    ErrorType: entrest.ErrorCreate,
                    Error:     err,
                })
            }
            respHandler(r, &entrest.Result{
                Data: res,
            })
        },
    )

	s.BindMiddleware(
        "PUT:{{ $apiPrefix }}/{{ snake $.Name }}/{id}",
        {{- range $m := $apiAnnotation.Middlewares }}
            {{- if and (or (eq $m.ReqType "") (eq $m.ReqType "update")) (ne $m.Code "") }}
                {{ $m.Code }},
            {{- end }}
        {{- end }}
        func(r *ghttp.Request) {
            var req Update{{ $.Name }}Request
            if err := r.Parse(&req); err != nil {
                respHandler(r, &entrest.Result{
                    ErrorType: entrest.ErrorParameterBind,
                    Error:     err,
                })
            }

            id := r.Get{{ $idTypePascal }}("id")
            res, err := client.{{ $.Name }}.
                UpdateOneID(id).
                {{- range $f := $.Fields }}
                    {{- if $annotation := $f.Annotations.EntRESTField }}
                        {{- if $annotation.Updatable }}
                            {{- if $f.NillableValue }}
                                SetNillable{{ $f.StructField }}(req.{{ $f.StructField }}).
                            {{- else }}
                                Set{{ $f.StructField }}(req.{{ $f.StructField }}).
                            {{- end }}
                        {{- end }}
                    {{- else if not $f.Immutable }}
                        {{- if $f.NillableValue }}
                            SetNillable{{ $f.StructField }}(req.{{ $f.StructField }}).
                        {{- else }}
                            Set{{ $f.StructField }}(req.{{ $f.StructField }}).
                        {{- end }}
                    {{- end }}
                {{- end }}
                {{- range $e := $.Edges }}
                    {{- $annotation := $e.Annotations.EntRESTField }}
                    {{- if or (isNil $annotation) $annotation.Updatable }}
                        {{- $edgeField := pascal $e.Name }}
                        {{- if $e.Unique }}
                            Set{{ $edgeField }}ID(req.{{ $edgeField }}.ID).
                        {{- else }}
                            Add{{ $e.Type.Name }}IDs(rest{{ $e.Type.Name }}IDs(req.{{ $edgeField }})...).
                        {{- end }}
                    {{- end }}
                {{- end }}
                Save(r.Context())
            if err != nil {
                respHandler(r, &entrest.Result{
                    ErrorType: entrest.ErrorUpdate,
                    Error:     err,
                })
            }
            respHandler(r, &entrest.Result{
                Data: res,
            })
        },
    )

	s.BindMiddleware(
        "DELETE:{{ $apiPrefix }}/{{ snake $.Name }}/{id}",
        {{- range $m := $apiAnnotation.Middlewares }}
            {{- if and (or (eq $m.ReqType "") (eq $m.ReqType "delete")) (ne $m.Code "") }}
                {{ $m.Code }},
            {{- end }}
        {{- end }}
        func(r *ghttp.Request) {
            var req Delete{{ $.Name }}Request
            if err := r.Parse(&req); err != nil {
                respHandler(r, &entrest.Result{
                    ErrorType: entrest.ErrorParameterBind,
                    Error:     err,
                })
            }

            id := r.Get{{ $idTypePascal }}("id")
            err := client.{{ $.Name }}.
                DeleteOneID(id).
                Exec(r.Context())
            if err != nil {
                respHandler(r, &entrest.Result{
                    ErrorType: entrest.ErrorDelete,
                    Error:     err,
                })
            }
            respHandler(r, &entrest.Result{})
        },
    )
}
