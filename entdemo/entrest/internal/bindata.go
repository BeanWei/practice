// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/gf.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateGfTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1b\x5d\x6f\xdb\x38\xf2\xd9\xfa\x15\xb3\x82\x5b\x48\x81\x2b\xf7\xee\xd1\x8b\x1c\x90\x8b\xdd\xae\x81\x5e\x93\xad\xd3\xdd\x87\xa2\xd8\xaa\xd6\x48\xe1\x55\x96\x14\x8a\xee\xc7\x19\xfe\xef\x07\x92\x92\x2c\x89\xa4\x2d\xe7\xa3\x75\xb6\xd6\x4b\x22\x71\x66\x38\x33\x9c\x0f\xce\x90\x5e\xad\xe0\x0b\x61\xd7\xd0\xf7\x7e\x43\x3f\x40\x0a\xeb\xf5\x6a\x05\x9e\xfc\x83\x71\x8e\xb0\x5e\x0f\x87\x70\x9e\x06\x08\x11\x26\x48\x7d\x86\x01\x7c\xfc\x06\x98\xb0\xf9\x00\xc6\x17\xf0\xfa\xe2\x0a\x26\xe3\xe9\x95\xc7\x11\x92\x00\xd6\x6b\xcb\xca\xfc\xf9\x27\x3f\x42\x0e\x44\x31\x67\x96\xb5\x5a\x41\x7f\xee\x2f\x30\x7e\xed\x2f\x10\x46\xa7\x20\x5e\xa0\xef\x89\x77\x8e\x42\x16\x59\x4a\x19\x38\x56\xcf\xc6\x84\x05\xb8\x48\x87\x05\xb6\x6d\x01\x00\xd8\x9c\x84\x77\x9e\x26\x21\x89\xbc\xcb\x82\xfe\x7a\xbd\x75\x70\x28\x3e\x77\x05\xce\x28\x06\x64\xee\x33\xb4\x2d\xab\x67\x47\x84\x5d\x2f\x3f\x7a\xf3\x74\x31\x8c\xd2\x28\x1c\x46\xe1\x30\xa4\xfe\x02\x87\x91\xad\x1f\x4d\x90\x0d\xa3\x6b\xc6\xb2\x62\x16\x0d\x08\xc3\xaf\x6c\x18\xe5\x8c\xda\x96\x80\x59\xad\x9e\x41\xdf\xcf\xc8\x59\x92\xa4\xcc\x67\x24\x4d\xb8\x6a\xfa\xde\xe6\x3d\xf7\x26\x09\x7b\x33\x99\x5d\x9d\x5d\x4e\xb9\x9a\x4a\x2c\xea\x27\x11\x42\x7f\x21\xe0\x1b\x14\xbc\xff\x90\x20\x88\xf1\x8b\x4f\x31\x2f\x31\x2a\xa9\x17\xde\xe5\xa7\xe8\xd2\x67\xd7\x95\x32\x38\xb1\x62\xd5\x5c\xcb\x1a\x0e\x41\x28\xa7\x58\x15\xf0\x2c\xf6\x2d\xc3\xe6\xb7\x9c\xd1\xe5\x9c\xc1\x4a\xa0\x4f\xc7\x72\x70\x3a\xf6\xae\x38\xe4\x7a\x0d\x1b\x8b\xaa\x8b\xf1\x82\x60\x1c\xe4\xde\x4c\x20\x5f\xf9\x91\x47\xf8\x9c\x1f\x0a\x5b\xfb\xb0\x31\xb6\x0f\x25\xbd\x0a\xb4\x1c\x97\x5c\xb6\x34\x10\x4a\x8d\x49\xf2\x75\x79\x85\x6e\x99\x1f\x89\xf1\xb0\x41\xad\xe2\x90\xf9\x51\xae\x6a\xbc\xcd\x6a\x0d\x83\x24\x01\x7e\x2d\xf0\xfa\x61\xa9\x12\xce\x31\x9f\xe9\xb4\xf2\x1b\xc1\x6a\x93\x67\xc9\xd3\x86\x15\x31\x4b\xa1\x2f\x12\x0a\x6a\x24\x8e\xfd\x8f\x31\xfe\xe1\xc7\x4b\x4e\xf6\xa4\x4e\xa9\x1f\xd6\x15\x4c\x42\x48\x52\x26\x88\x61\x92\x13\x46\x3e\x57\xaa\x63\x1b\x85\x15\x0a\xfd\x6f\x9e\x26\x23\xfb\x99\xad\x51\xa2\x5e\xa7\x28\x75\x32\x09\x22\x6c\xa9\x14\x32\x3f\x9f\xfb\x31\xf4\xb1\x26\x7b\xc9\x0c\x7a\x6f\x13\x72\xb3\xc4\xf5\x1a\xde\xbd\xaf\xe6\x3a\xc1\x84\xf1\xd0\xd0\x47\x21\x40\x65\x46\x9c\x9b\x8c\x92\x84\x85\x50\x70\xf8\x24\x1f\xa4\x0b\xc2\x70\x91\xb1\x6f\xf6\x87\xda\x1c\x1f\xda\xfc\xae\x85\xa5\xbe\x22\x39\xab\x5b\xe6\x1b\xbc\x59\x62\xce\x4a\xa3\x35\x0d\x57\xf6\xdb\xbb\xf4\x23\x9c\x91\xff\x21\x00\x49\x18\x9f\xa2\x60\x24\x2b\xbe\xd7\xd9\x91\xd0\x57\xe9\x27\x4c\x34\xd0\xe2\x7b\x13\x7c\xc6\xa3\x99\x78\x72\x46\x49\x12\x95\xe0\x79\x4a\x59\x03\xf2\x71\x1b\xf4\x33\x83\x2d\x56\x20\x9b\x38\xd7\x0c\x72\xa1\x2e\xca\x95\x4e\xa1\x60\x93\x10\x52\x0a\x0e\xc9\x5f\x93\xb8\x4e\xca\xad\xbf\x78\xbf\x2f\x91\x7e\xe3\x2e\xd4\xa2\x60\xf4\xbd\x93\xa6\x67\xd5\x1d\x48\x61\x41\x23\xba\xde\x9b\xa4\x75\xbe\xc4\x6d\xc6\x69\x18\x7d\x88\xd8\x0a\x9f\x47\x36\xc5\x9b\x25\xa1\x18\xd8\xbb\x02\xad\x0a\x5c\x97\xe9\x9c\xa2\xcf\x70\x8b\x58\x66\x80\x86\x64\x8f\xdc\xdc\xef\x6c\xca\x75\x9b\x15\x2a\xe3\x36\xdb\x86\x35\xc0\xff\xe1\xc7\x24\xf0\x99\x16\xbc\xa1\xb7\xd3\x2a\xbc\x3e\xc9\xf9\xb2\x3e\xc9\x79\x50\xe5\x23\x5d\xc9\x69\xac\x7e\xab\x37\xfd\xa8\x4c\xb6\xcb\x4b\x25\xb6\x75\xd0\xfc\x9b\xc3\x09\x74\x4d\xce\x6a\x8c\x45\x9d\x61\x72\x4c\x8d\x51\x77\x08\xaf\x2f\x91\xfd\x49\xc4\xde\x51\x8d\xee\x85\xa7\x76\xcc\xe8\xbb\x9c\x62\x97\x55\xde\x83\x81\x1b\x8c\xfb\x76\x7b\x1c\xc3\xfe\x46\xc9\x25\xbb\x92\xc6\xdb\x2c\xd8\x1e\x60\xcd\x00\x07\x9b\x3a\xe0\x18\xf0\x1b\x06\x29\x96\xf0\x18\xf0\x1f\x3a\xe0\x6f\xe6\x99\x2e\x16\x4b\xad\xc2\x0f\x4e\xa6\x63\x12\x38\x26\x81\x21\x8c\x31\xc6\xad\x49\xc0\x0c\x70\xb0\x49\x60\x6d\x59\xe1\x32\x99\x03\x26\x8d\xba\xe7\x9f\x14\x9b\x45\xba\xd3\x6c\x14\xf2\x12\xad\xec\x1f\x94\x20\xae\xac\xda\x2a\x1d\xaf\xac\x1e\x45\xb6\xa4\x09\x3c\xad\x7f\x5f\x55\xfa\x9e\x8e\x47\xd0\x26\xeb\x4d\xc7\x03\xab\xd7\xeb\x92\x97\x4c\x91\x42\x43\x54\x07\x36\x30\xad\x7b\x47\x97\xbe\x93\x5b\xdf\x8b\x6b\x57\x1c\x48\x9f\x98\x94\x2d\x5c\xc5\x45\xb4\x49\xa3\x8e\xa4\x55\x9a\x90\xd8\x53\x41\x07\x7b\x54\xe0\x3d\xa3\x85\xe5\x8a\x89\xe5\x8a\x8d\xe5\xf0\xee\xbd\xc6\xcc\xde\xbd\xd7\x18\x5a\x8b\x16\xd7\xc3\xc2\xff\x84\x4e\x0b\x78\x00\x31\x26\xea\x44\xae\x6b\xf5\xc2\x94\xc2\x5f\x03\x45\x0f\x9c\x92\x34\x05\x95\xbd\x95\xd5\xd3\x4c\x7d\x0a\x7e\x96\x61\x12\x38\xca\xd0\x60\x7f\x3f\xe3\x9c\xad\x2b\x4f\x52\x28\x56\xea\x6d\x8f\x4c\xc7\xb9\xc3\x83\x7b\xde\x56\x17\xd7\x5f\xd1\xf9\x5a\x59\x3d\x12\xd4\x55\x25\xbf\x4b\x1d\x09\xe4\x9a\x5e\xf8\xfb\x46\x17\x92\x34\x97\x9f\x53\xa8\x24\x26\x41\x2e\x21\xbd\xe9\xb8\xc1\x38\x09\x36\xac\x46\xcd\x1e\xcb\x79\x1a\x2f\x17\xc9\x8b\x94\xbe\x22\x39\x2b\x02\xa6\x13\x0a\x2f\x95\xfc\xb8\xb0\xe1\x37\xff\x42\xd8\xfc\x1a\xe4\xf0\x7e\x4d\x8b\x47\xd2\x0f\x9b\xfb\x39\xca\x43\x81\x6a\x5b\x6c\x8f\xb4\x1b\xcc\x42\xb5\xad\xb3\x14\x29\xbd\x2e\xe2\xdd\xbe\x73\xd6\x0b\x30\xf4\x97\x31\x1b\x09\x7b\x17\xb3\xda\x76\xdd\xb9\x5f\xe3\x97\xfa\x92\xce\x90\x7e\x26\x73\xfc\xcd\x4f\x82\x18\xa9\x33\x8f\x09\x26\x4c\x66\x8c\x73\xf1\xff\x80\xdb\x6b\x56\x8c\x03\x27\xe1\x50\x38\x11\xa7\x34\x5e\x61\x02\x02\x64\x19\x4b\x34\x6e\xdd\xde\x1b\xf1\xee\xba\xc2\x0e\xf8\xda\x44\x1e\x9f\x08\xa9\xe3\x36\x8f\x6d\x2e\x29\x86\xe4\x2b\x87\xb0\x87\x7e\x46\xec\xba\x44\x62\x2f\xd3\x38\x97\x29\xa0\x95\xdd\x5a\x45\x47\x39\xc9\x69\x62\xd4\xf4\x24\xde\x73\xef\xdf\x24\x09\x36\xa7\x3d\xce\xe6\xa8\xe7\xe5\xe4\x6a\xc4\xf5\xb4\xa1\xad\x39\x0b\x1b\xe8\xb2\xd0\x1e\x07\x4a\x35\x49\xfd\x24\x00\x87\xdb\x23\xde\x40\x7f\xc1\x35\x2b\x36\x1c\xb6\xed\x2a\x9f\x62\x92\x33\xdb\x75\xc1\x49\xf8\x6c\x9e\x38\x57\xe4\x70\x86\xec\x51\x40\xec\x97\x0d\xca\x4f\xda\xf5\x76\x61\xd5\x20\xf5\xd9\xa7\x40\xf1\xc6\x74\x5c\xd0\x80\x25\x21\x20\xa5\x22\x3a\x79\x97\x3e\xcd\xd1\x79\x4a\xf1\xc6\xfd\x55\x7c\xfd\xe5\x14\x12\x12\xb7\xa8\x4b\xff\xa9\x4c\xd0\xa1\x03\x78\xda\xb4\x33\x15\x9e\x3f\x13\x4a\x53\xca\x35\x36\x2a\xcf\x50\x3d\xf1\xe9\xd2\xa7\xfe\x02\x19\x52\xbe\xf6\x03\x33\xea\x48\xfc\x8b\x94\xaa\x30\x6b\xb7\xf1\xa9\xb0\xa6\xba\xd2\xeb\x79\x41\x84\x10\x71\x60\x2b\x1c\xaa\x91\x22\x65\x7c\x29\xbd\xa2\xa6\x24\x8a\x37\x9e\x38\xff\xf8\xe5\x14\x6c\x5b\xa3\x92\x3c\xa5\x8c\x13\x19\x88\xff\x2e\x32\x3e\x41\x29\xe7\x4b\x64\x1c\xf7\x8c\x46\x4e\x49\xc7\x55\x08\x90\x50\xc6\xe6\x72\x2f\xd2\x25\xd6\x97\x93\xba\xbf\xd6\x70\x4d\x1c\x16\x93\x14\xec\x9d\x6e\xd8\x3b\x9b\x9d\x1b\xc0\x8d\xea\xf3\x2e\x68\x80\xd4\x31\x22\xf1\x87\xeb\xf6\x2c\x9f\x3b\x15\x67\xae\x7e\x75\xf9\xa3\xaa\x83\x3f\xeb\xaa\xee\x55\x99\x1e\x4f\x1e\x8e\xeb\x31\xde\x8d\x6d\xd5\x40\xb7\xd9\xe7\x97\x6b\xa4\x78\x19\xfb\x73\xbc\x4e\xe3\x00\x69\x6d\x57\x51\x9d\xdf\x7b\xcd\x9d\xd8\x73\x57\x89\x1d\x5d\xf6\xfc\xd0\x3d\x9f\xd7\xc1\x6f\x9f\xd7\x5b\x93\xde\x31\xbf\x97\x4f\xe1\x8e\xda\x5e\x87\x31\x64\x69\xd8\x51\xe6\xbd\xc8\x4c\x02\xd4\x1f\x65\xbd\xaa\x3d\x5c\x7b\x64\xa0\xec\x30\x74\x3c\x8b\xb4\xa6\xe3\xc4\x39\x31\x89\xe9\xea\x0d\xaf\x2e\x9f\xee\x88\xc0\x04\xdb\x4f\x33\xb1\x2b\xe0\x7f\xfa\x61\x67\xac\x62\x6b\x23\x63\x5d\xd1\x96\xe4\x24\x9e\xff\x28\x2d\x56\x0c\x55\x35\xc1\x9d\x34\xa8\x6f\x1b\x96\x8f\xd9\xd2\x8d\xfd\x46\x43\x67\x46\xfb\x99\x84\xa2\x96\x68\x2b\xc3\x85\x7f\xc1\x73\x8d\x79\xeb\xe3\xdd\x9f\x1c\x5b\xa1\xe1\x79\xde\x5e\x09\x93\x17\x5f\x72\x8f\xa0\x9f\x45\x2b\x69\x87\x1e\x40\x1d\xfc\xd6\xbd\x80\x3a\x91\x3d\x42\x8c\xa9\x2b\x50\x3e\x7c\x5c\xd7\x33\x73\x5c\x55\xdc\x2d\xab\xb8\x63\xe8\x15\x59\x10\x26\xf6\x04\xe5\xc5\x0d\x0d\xf9\x8b\x30\xcc\x91\x39\x15\x98\xbc\xb1\xf1\x0c\xfe\xe1\xc2\x09\xec\xc0\x3d\x8b\x63\x87\x7a\xe7\x69\xc2\xf0\x2b\x73\x5a\x46\x5f\xec\xfd\xbe\xcb\x2e\x8f\xef\x5a\x1e\x62\x73\xc7\x77\xf0\x72\xa7\xb5\x77\x8b\xc4\x6d\x13\xda\x4b\xd8\xb1\xcf\xfc\x91\xc4\x53\x79\x9e\xe6\x5c\xde\x11\x30\xba\xc4\xe6\x68\x4d\x9a\xa2\x00\x70\xef\xa5\xf6\x19\xae\x48\xf0\xa3\x0a\xa0\x08\x0f\xb3\xfe\xd1\xdf\x48\xf9\xd9\xcb\x9f\x2a\x98\xeb\xca\x1f\x85\x76\x51\x0f\x79\x56\xaf\xd7\xeb\xc9\x74\x22\xfe\xed\xb5\x73\xf2\x74\x3c\xf9\x5d\x84\xa8\xe9\xd8\x1d\x08\x90\x02\xe9\xb0\x93\xc1\x96\x06\x71\xf9\x3c\x4c\x2a\xe0\xaa\x79\x41\x68\xce\x0e\x23\x3e\xbf\xc4\xef\x18\x9e\x3b\xf4\x6e\xef\x21\x36\x2b\x91\x59\x1b\x7b\x7b\x5b\x02\xef\xe5\xc5\xec\x60\xbb\x4e\x73\x71\x2f\xed\x20\xe3\xae\xf1\xca\xdc\xcf\x18\x7a\x97\xe2\x5c\xb5\xa8\xc7\x47\xa7\x10\x93\x9c\xe9\x56\x7f\x9f\xfa\xfd\x6e\x05\x79\xdb\xd6\x76\x44\xc8\xea\x36\x9f\xcb\x27\x92\xc7\xc4\x5b\x83\x77\x43\xe2\xb2\xaa\x6b\x7d\xde\xde\x61\x87\xbd\xab\xa5\xb2\xab\x81\xe0\xc4\x98\x34\x27\x73\xf5\x05\x69\xb0\xcc\x62\xd1\x5b\x39\x4f\x97\x09\xdb\x2f\x2b\x42\x3d\x33\xea\x06\x8b\x4c\xa9\x1b\x82\xe6\x82\x2f\xe5\x8a\x37\xb4\xb3\xa3\x7c\xd6\x95\xc3\x4b\x5e\xb6\x17\x19\xb8\x7a\xdf\xd2\xb9\xda\x51\xe0\x1a\xc4\x12\xaa\x32\x27\x2c\xe8\x90\xb4\xe0\x96\x4e\x0c\x5b\x1c\xf9\xfc\x1a\xe7\x9f\xc6\xe5\x7a\x9a\x85\xde\xe5\xcd\xa0\x7a\x34\x34\xda\x90\x4d\x9b\x31\x94\xe2\x0f\x21\xe1\x03\x0a\x67\x72\xaf\x76\x06\xde\xcf\x43\x64\x0e\xd0\xb9\xc7\x3e\xc1\x0e\xee\xe3\xc2\xda\x76\x62\xdb\x6f\x2b\xeb\x70\xd5\x7b\x54\x3b\x9b\x5d\x33\x64\x25\x8e\xae\x19\xe5\x18\xbb\x54\x7a\x37\xac\x73\xd4\xb5\xcf\x37\x93\xc5\xd0\xbd\x4e\xbd\xbd\x41\xb6\x03\xa4\x0b\xf3\xb7\x54\xf9\x03\xa8\xbb\xab\xaa\xef\x51\xcd\x5d\xf4\xb7\x77\xc7\xe9\xd1\x57\x63\x82\x23\x0c\x22\x99\x2b\xbb\x5d\xda\x69\x31\x52\xdd\x76\xeb\xb8\x98\x9b\xd9\xd6\xeb\xe9\xb8\x5a\xca\xfa\x67\x5e\xf5\xde\xdd\x78\xce\x82\x40\xbd\x71\x37\x1d\xe7\xd5\x75\x18\xdd\x88\xca\x8c\xeb\x79\xde\xf7\xb6\xab\x99\xff\x19\x0f\xa3\x92\x95\x99\xe7\x81\x8a\xd9\x1f\x53\x86\xbe\x3d\xec\xfe\xdf\x52\xdc\xe0\x3f\xc8\x52\xd4\xf8\xe3\x82\x63\x29\xfa\x08\x4b\xd1\xea\x77\x06\xc7\x52\xb4\xf1\xdc\xad\x14\x6d\xf7\x71\x5f\xd7\x1b\xb9\x66\xb4\x63\x05\x7b\xac\x60\xf7\x90\xf0\xd1\x55\xb0\x32\x75\x5c\x24\x58\x6c\xf9\xb4\x3b\xbc\x43\x2b\x66\xb7\xfe\x12\x4b\x87\x7b\x2c\x66\xef\xb7\x98\xed\xf0\x1b\xad\x36\xde\xb1\xc0\x3d\x16\xb8\x6d\x8e\x8e\x05\xee\xb1\xc0\x35\x65\x52\x99\x98\xfe\x4e\x05\xee\x78\xf2\x6a\x72\x35\x39\xe8\x1a\x37\x10\x3f\x50\x3c\xc8\x1a\xd7\xf8\xdb\xc9\x9f\xad\xc6\x2d\x7e\x91\x15\xe5\x8c\x7a\xb3\x2c\x26\xec\x2c\x09\xae\x28\x59\xcc\x32\x7f\x8e\xc5\x1e\x6e\x00\xf6\xc0\x6e\x52\xf9\x6b\xbf\x7d\xa1\x54\xb7\xae\xda\xda\x52\x69\xa9\x55\xd6\x34\x71\x48\x90\xf3\x40\xa6\x8a\xa9\xa1\x3d\xf9\x8a\xf3\xc3\x08\x3f\x52\xfe\x1f\x10\x7e\x74\x61\x65\x6d\xfd\x3f\x00\x00\xff\xff\x11\x29\x59\xd4\xee\x4f\x00\x00")

func templateGfTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateGfTmpl,
		"template/gf.tmpl",
	)
}

func templateGfTmpl() (*asset, error) {
	bytes, err := templateGfTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/gf.tmpl", size: 20462, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/gf.tmpl": templateGfTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"gf.tmpl": &bintree{templateGfTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
