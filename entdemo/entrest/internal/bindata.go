// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/gf.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateGfTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x4b\x73\xe2\xb8\x13\x3f\x87\x2a\xbe\x83\xfe\x2e\x66\xca\x4e\x11\x51\xff\x2b\x5b\x73\x98\x0d\x6c\x96\xaa\xd9\x09\x1b\x98\x39\xa3\xc1\x6d\x47\x1b\x5b\x36\xb2\xc8\x63\x29\x7f\xf7\x2d\xc9\x36\x7e\x20\x3b\x64\xc2\x24\xce\xc3\x17\xb0\xd4\xdd\xea\xfe\xa9\x1f\x6a\x39\x24\xcb\x2b\xe2\x02\x02\x26\x38\x44\xa2\xdb\xe9\x76\xa8\x1f\x06\x5c\x20\xb3\xdb\x39\x32\x80\x09\x1b\xfc\x60\x00\x4c\x18\x95\x77\x49\x6e\x48\xfa\x23\xc3\xa5\xe2\x72\xfd\x03\x2f\x03\x7f\xe0\x06\xae\x33\x70\x9d\x81\xc3\x89\x0f\x03\xd7\xa8\x99\x66\x20\x06\xee\xa5\x10\xa1\x92\x80\x10\x42\x9b\xcd\x09\xea\x91\x90\x7e\x66\x2c\x10\x44\xd0\x80\xa1\xe1\x27\xd4\xc3\xf9\x7b\x84\xc7\x4c\x5c\x8c\x67\xf3\xcf\xd3\x09\x8a\xe3\x9c\x8d\x13\xe6\x02\xea\xf9\x8a\xa1\x24\x02\xff\x45\x6d\xdb\x83\x1b\xc2\x21\xda\xb2\xc8\xc7\xd8\x6c\x50\xcf\xc7\xd3\x2b\x77\x4a\xc4\x25\x8a\x63\x23\x17\x07\xcc\x56\xb4\x96\x54\x6d\x30\x40\x5f\x68\x24\x24\x39\xfe\x4a\x7c\x40\x71\x7c\x01\xab\x35\x44\x02\xe1\x6e\x47\xdc\x85\x50\x3b\x1f\x09\xbe\x5e\x0a\xb4\xe9\x76\x8e\xa6\xc4\x85\x19\xfd\x17\x10\xa2\x4c\xc8\x75\x16\xff\x44\x01\x1b\x1a\x61\x3a\xde\x0f\x7c\x2a\xc0\x0f\xc5\x9d\xb1\x48\xc9\xe7\xc1\x15\x30\x0d\xb9\x1a\xaf\xd0\xcf\xe4\x7e\xa9\x27\x12\x9c\x32\x37\xa3\x8f\x02\x2e\xca\xa4\x15\xc8\x9c\x04\xe3\x3f\x28\x78\x76\x19\x20\xb5\x1d\x82\xb8\x8a\xc0\xc1\x33\x65\xcb\x9c\xb8\x28\x8e\x37\x1b\x74\x43\xc5\xa5\x9a\x8e\x76\x37\x29\x11\xa6\xe5\xa0\xcc\x86\xdb\x94\xaf\xe7\x64\x78\x49\xec\xe4\x4a\x9f\x10\x4e\xde\x92\x0d\xd8\xfe\x29\x2b\x45\x1d\xc4\x02\xa1\x74\x02\x16\x51\x41\xaf\xa1\x44\x53\xa0\xeb\x91\xb2\x2f\x39\x3a\x67\x52\xea\xee\x48\xd0\x4b\xc1\x33\x20\x7c\x79\x49\x7e\x78\xbb\x6b\xe6\x5c\x39\x5e\x99\x6c\x39\x28\x25\x39\xf8\x2b\xf5\x3c\xc9\xfe\x9d\x78\x6b\x29\xe3\xb8\x68\x6e\xcf\xc1\x73\xe9\x50\x71\x8c\x16\x19\x28\x71\xbc\xd0\x6b\x56\xc5\x66\x3b\xee\x45\x7a\xe5\x7e\xb5\x62\x3a\xa5\xaa\x63\xc5\xf7\x38\x0d\xaf\x33\x68\x8c\xae\x9a\xe9\x3c\xb8\xa4\xdc\xc9\x48\x99\x87\x27\xa3\xad\xa2\x5b\x2f\x6d\x74\x4e\x4c\xa5\x32\xd2\x28\x9c\xfe\xa6\xf8\x2d\x32\x79\x45\x3f\x5e\x14\x7c\x32\x53\xff\x94\x03\x11\xd0\x64\x41\x3d\x45\xd9\x88\x17\x1f\x97\x8f\x88\x37\x4d\xac\x29\xd8\x6a\x43\x4d\xc3\xf0\x9d\x78\xd4\x26\xa2\x29\x34\x4f\x32\x8b\x42\x4e\x99\x70\xd0\xe2\x43\x84\xae\x87\xc6\x87\xc8\x58\x24\x33\x7b\xcb\xab\x0b\xc1\xc3\x45\x5a\xc2\xa0\xc9\x75\xc5\x10\x2c\x38\x6c\x92\xf2\x4f\x8c\x85\x66\x83\x1a\xe3\x53\x97\x30\xda\x67\xc2\x3e\xa9\xe4\x5b\x68\xdf\x13\x8b\xf5\x14\xef\xb1\xd8\x10\x5a\x0a\xb6\xf7\x58\x7c\x9a\x58\xcc\x57\x9a\xf8\xfe\x5a\x0f\x7b\xfb\xcc\xda\x27\x3e\x47\xe0\x41\x73\x7c\xd6\x53\xb4\xa3\xe0\x3b\x6b\xb6\x44\x5f\xe1\xa6\xa8\xe1\x0c\xf8\x35\x5d\xc2\x9f\x84\xd9\x1e\x70\x73\xe9\x51\x60\x02\x1d\x03\x13\xf8\x54\xfd\xef\x23\x0e\x51\x98\xce\x23\x29\xc2\xe4\xe8\x58\xb5\x3f\x38\x35\x4f\x91\xac\xbd\x84\x4d\x76\x56\xf8\x42\xbd\x5b\x96\xea\x1f\x54\x0a\x71\xb1\x5c\x09\xb8\x69\x55\x7b\xa6\x29\x07\x87\xde\x4a\x1a\x63\x40\x42\x6a\x94\x36\x41\x45\x66\xa9\x29\x4a\xc9\x77\x52\x59\x2e\x69\xa7\x8f\xaa\xb0\x14\x37\xb7\xa0\x0a\xb5\xe5\x66\x4c\x49\xb4\x24\x9e\xd4\x26\x4c\xfe\x6d\xb7\x49\x62\x2b\xdb\x93\x9c\x2d\xc2\xbf\x53\x66\xe7\x5d\x9a\x59\x68\xd1\xce\xc6\xf3\xa1\xc4\x39\x57\x2b\x8e\x07\x9b\x0d\x8a\x18\xb9\x82\x1c\x7e\xa3\x5f\x36\xe3\x27\xba\xc1\x02\x54\x84\xd9\xc8\x0c\x38\x32\x61\x25\x1b\xc4\x0b\x58\x29\xff\x32\x0c\x6b\x67\xc8\xa3\x91\x30\x2c\x0b\x99\x4c\x2e\x87\x4f\x03\x3b\xa1\xab\x4b\x43\x29\x49\x1c\xf7\x1f\x7e\x70\x96\x8f\xd6\x71\xac\x2c\x22\xb2\xe7\x9a\x70\xc4\x61\x55\xd7\x95\x96\x89\xa9\x83\x80\x73\x89\x14\xc7\x53\xc2\x23\x30\x3f\x72\x58\x59\xbf\xa9\xd1\xff\x7d\x42\x8c\x7a\x55\xf9\xf2\x29\xb8\xb3\xc9\xfb\xe8\x63\xd9\x67\x35\x0c\xf2\x19\x73\x1e\x70\x89\xdc\x30\xbb\x6c\xc0\x6a\x68\x4a\x38\xf1\x41\x00\x97\x9e\xd0\x6f\xe0\x1d\xaa\xbf\xc0\xb9\x86\x28\xb6\xca\x63\x5b\x07\x2b\xa8\xdc\xcf\x6c\x4d\x22\x14\x17\xd1\xc1\xbb\x22\xff\x5e\x03\xbf\x33\x2d\xcd\xcc\x17\xea\x53\x61\x72\x58\xe1\xac\xaf\xd7\x51\x9d\x3b\x4e\x04\xc2\xdc\xd2\x25\x0d\xfd\x09\xfa\xbf\x85\x8e\xd1\x7d\xcc\x9f\x3d\xcf\xe4\xf8\x34\x60\x02\x6e\x85\x69\x59\xda\x6d\x7b\xa2\x0d\x92\x9e\x74\xc0\x7d\x79\x94\x9e\x23\x22\xc8\x30\xdd\xce\xdd\xd9\x49\x24\x75\x1d\x22\xc1\xd7\x50\x99\x2e\x2a\x92\x05\xa0\x75\xc0\x2c\x34\xd8\x50\xfb\xf9\x52\x91\x0b\x2d\xce\x44\xfa\x0e\xfe\xad\x26\x22\x6a\x27\x56\xa6\xa8\x94\x4a\x66\x1c\x9b\x06\xb5\x0d\xeb\xb1\xa9\xeb\x0c\x44\x31\x7b\xf4\x11\xb5\x9f\x35\x83\x9c\x41\xcb\x12\xc8\x6e\xfa\xa8\xcd\x0f\x47\x4d\xc9\x61\x7a\x3e\x6b\xf7\x19\x65\xa9\xee\x9e\xda\x9b\x1b\x6a\xef\xc6\xde\x6a\x7a\x78\x78\xb0\x27\x10\x6a\x0f\x2a\x7b\xdd\x62\x54\x19\x1e\x7f\x71\x5e\x2f\xed\x9e\x4b\x3d\x1d\xf3\x6e\x37\xdb\xcc\x27\x9f\x19\x88\x8c\x49\xd7\x28\xab\x23\x99\x6e\x42\x87\x61\x55\xa7\xda\xfb\x75\x8d\x12\x87\x5f\xbc\xe6\x96\x63\x5f\x9a\xbd\x0c\xf8\x59\xe4\x7f\x05\xea\x7b\x23\x7e\x48\xb4\xf7\x42\xb1\xf6\xbe\xa9\x7e\x6e\x46\xae\xa1\x35\xa7\xfa\x24\x6d\xbc\xd2\xb2\xfc\xed\x05\x9c\xd9\xd7\xea\x2a\xba\xbd\xa5\xb9\xf6\xaa\xfc\xad\x96\xe6\xa7\x38\xb9\x27\xa0\x9f\x33\x98\x8c\x4c\x6a\xbf\x8c\x9a\xde\xfc\x71\x40\xc7\xfc\x5e\xd3\x8b\x8b\x1f\xaa\xa6\xef\xf3\xdd\xa0\xca\xf8\x5e\xe7\x5f\x7b\x9d\x4f\x32\xca\xeb\xac\xf3\xa3\xf1\x97\xf1\x7c\xdc\xfe\x52\x6f\xab\xaf\x5a\xed\x2d\xf5\xb5\x5f\xdd\xde\x4b\xfd\xbe\xa5\xfe\x41\x55\x3e\xc1\xbb\xa9\xca\x8f\x6f\x61\xd9\x9a\x14\x92\xa8\xfb\x3c\x29\xa4\x26\x31\xc4\xdd\xce\x7f\x01\x00\x00\xff\xff\xdf\xae\x5b\x99\xba\x2a\x00\x00")

func templateGfTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateGfTmpl,
		"template/gf.tmpl",
	)
}

func templateGfTmpl() (*asset, error) {
	bytes, err := templateGfTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/gf.tmpl", size: 10938, mode: os.FileMode(438), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/gf.tmpl": templateGfTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"gf.tmpl": &bintree{templateGfTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
