// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/service.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5f\x73\xa2\x48\x10\x7f\x86\x4f\xd1\x47\xb9\x5b\x90\x32\x43\xdd\xab\x57\x79\xd8\x8b\x5e\x2e\x55\xa9\x24\x17\xdd\x7d\x76\x56\x1a\x32\x17\x1c\xcc\xd0\x66\x93\xb3\xf8\xee\x57\x33\x80\xa2\x01\x4c\x36\x66\xd7\xad\xd2\x17\x61\xa6\xff\xfc\xba\xe9\x5f\xd3\xc3\x8c\x4f\xee\x78\x84\x80\x92\x14\xa6\x64\xdb\x62\x3a\x4b\x14\x81\x6b\x5b\x0e\x4a\x0a\x70\x9a\xf8\x28\xc9\x59\xbf\xd5\xa2\x8e\x6d\x5b\x4e\x24\xe8\x76\xfe\x95\x4d\x92\xa9\x1f\x25\x51\xe8\x47\xa1\x1f\x2a\x3e\x45\x3f\x72\xea\x77\x25\x92\x1f\xdd\x12\xcd\x1c\xdb\xb3\x6d\xdf\x87\x0b\x91\xd2\x62\x01\x1d\x76\xc9\xa7\x08\x59\x76\x83\xf7\x73\x4c\x09\x98\x4d\x4f\x33\x6c\xdc\x4e\x49\xcd\x27\x04\x0b\xdb\xba\xe6\x11\x0e\xc5\x7f\x08\x20\x24\x01\x00\x8c\xff\x4d\x13\xd9\x73\x66\xc5\x7a\x37\x99\x0a\xc2\xe9\x8c\x9e\x9c\x71\x2e\x3d\x4a\xee\x50\xd6\x48\x9b\xf5\x75\xf1\xa1\xce\x85\xf9\xa5\xa4\x84\x8c\x4a\xf1\x34\x51\xb4\x26\xa9\x45\x16\x8b\x63\x50\x5c\x46\x08\x9d\x10\x7a\x27\xd0\x61\x7f\x09\x8c\x83\x14\xb2\xcc\x86\xe2\xa7\x65\x3a\xc4\x23\xb3\x1f\xb2\xa1\x09\x63\xc4\x23\xc8\xb2\xc5\x02\xbe\x09\xba\x35\xdb\x69\xae\xff\x49\xca\x84\x38\x89\x44\xa6\x85\xad\x5a\x0d\x21\x03\x7c\x2c\xf4\x3a\x61\x99\x2a\x9d\x36\xed\xe9\x04\x58\x7e\x87\x32\xa8\x5e\xac\x61\x12\x21\xc8\x84\x0c\x24\x94\xa9\x20\xf1\x80\x55\x91\x8a\x58\x87\x2f\x41\x15\x41\x54\x51\x0e\x24\xdd\x0c\x86\xa3\x4d\xdd\x7a\x7d\x36\x44\xae\x26\xb7\xfc\x6b\xfc\xcc\xd9\x4a\x69\x95\x26\x93\x01\xc8\x32\xbd\xa8\x0d\x85\xec\x52\xc4\xb1\xd6\xfe\xc2\xe3\xb9\x36\x71\x54\x8d\xb2\x13\xb2\x91\x2e\xa1\x2c\x83\x71\x99\x8b\x2c\x1b\xd7\xe2\xda\xc8\xc8\x72\x39\x4e\x6b\x91\xbd\x33\xaa\x1a\x44\x1b\x4b\x95\xdb\xcc\xd0\xe8\x0c\xdb\x58\xd4\xb0\xbb\x24\x91\x36\x79\xde\x37\x61\xb1\xf3\xfe\x12\xe0\xb2\x22\x5b\x0b\x91\x09\x8d\x43\x07\xc3\x8a\xff\x22\x6d\xe3\xd2\x5e\xb5\x66\xc7\xab\xfa\xcb\x91\x9f\x2a\xe4\x84\x2d\xe0\x9b\x05\xd6\xf0\xff\xe2\xec\xfb\x2e\x5a\xd5\x50\xca\x64\xab\x89\x51\x35\xf2\x5f\x78\x2c\x02\x4e\xd8\xc8\xbf\xe3\x32\x8e\x99\x12\x92\x42\x18\x7f\x48\xe1\xa1\xe7\x7c\x48\x9d\x71\xbe\x53\x67\xad\xc9\x79\x0d\xcf\x76\xc7\xa7\x5c\xa1\xa6\x8d\x55\x89\x56\x29\xcf\xbc\x95\x1f\x3b\xe3\xe7\x0f\xa5\x8d\x85\x35\x3d\x61\xef\xf0\x6f\x6b\x17\x9f\x67\x41\x3b\xe9\x9a\x05\x0e\xa4\x7b\x4e\x22\x93\xad\x03\xe9\x0e\xa4\x6b\x25\x5d\x1f\x63\x6c\x25\x5d\xb3\xc0\xcf\x7f\x53\x87\x73\x39\x81\x4b\xfc\x56\x45\x37\x44\xf5\x20\x26\xf8\x37\x97\x41\x8c\xca\x9d\xc4\x02\x25\xc1\x11\x4a\x62\xa7\xe6\xba\x0b\x0a\xd3\x59\xb1\x0f\xda\x84\xab\xe0\xc8\xcc\xff\xac\x08\xcd\x88\xcc\xe3\x5c\x4d\x9f\x2b\xd8\x8d\xb9\xf7\x3c\x3d\xdc\x9b\xa6\x10\x31\xed\x08\x95\xeb\xd9\x26\xfe\x94\xfd\x29\x64\x50\x7a\x75\xce\x06\xa3\x9e\xcf\x67\xc2\x5f\x2c\x20\x95\xfc\x0e\x57\x00\x9d\x6e\xbd\x53\x63\xdb\x7a\xe0\x0a\x14\xde\x37\x9d\x31\x6c\xcb\x12\x21\xa0\x52\x1a\x83\x62\xd7\x5c\xa5\xe8\x7e\x54\x78\xef\xfd\x61\x56\x7f\x3b\x01\x29\x62\x63\xc9\xaa\x84\xe9\xaa\x2e\x7c\x5c\x8f\xc5\x88\x58\x03\xa5\x12\xa5\x1f\x58\xaf\x3c\x6d\x31\xb3\x74\xcd\xf5\x89\x89\x50\xe9\xa8\xba\x2b\xd1\x9e\x29\x2a\x54\xca\xac\x65\x9e\x6d\x59\x99\x6d\x1b\x5f\xdd\x12\x56\x9e\x72\x56\x45\xcf\xb4\xf4\x3f\x73\x54\x4f\xae\x67\xae\x2f\xc4\x54\x90\xab\xf0\x9e\x95\x47\xa5\x7c\xfd\x2a\x0c\x53\x24\x77\xb9\x93\x1f\x8b\x8e\xe1\x77\x0f\x8e\xe0\xb9\xf8\xa7\x38\x76\x15\x3b\x4d\x24\xe1\x23\xb9\x9e\xb7\x4a\xcf\xae\x12\xa1\x9f\xc3\xb6\xf8\x5f\xe4\xa1\xcf\x89\x6b\x6d\x9d\x29\x7d\x7f\x9e\x6a\xd3\x3d\x20\x35\x47\xbd\xa0\x6d\x65\xaf\x2e\x26\x7f\x21\x82\x17\x56\x54\xfd\xbc\xbd\xaf\x05\x25\x82\x1c\xd0\x19\xd2\xb9\x24\xd7\x11\x81\xe3\xbd\xb0\xce\xce\x90\xaa\x45\xd1\x05\x11\xbc\x43\x61\x9c\xe1\x2e\xeb\xa2\xa8\x8a\xb2\x08\xac\x8d\x0a\xb8\xbe\x1a\xbe\xb1\x9f\x34\x1e\x58\xf6\xb5\x00\x5e\xf2\xa4\xf3\xa0\x74\x4b\xd9\x7c\x5d\x6f\x9b\xff\x9a\xe7\xa0\xd7\x7d\x3f\x68\x98\xa5\x5a\x0f\x3c\x9b\x7a\xcf\xe7\x82\x46\x15\xfd\x1b\x22\x95\xf2\x75\xd3\x86\x69\x9d\x75\x1b\x1b\x59\xda\x44\xd2\xf4\x59\x61\xc3\xf5\x4e\x5d\xd6\xcf\x80\x5b\xb6\xb7\x81\xfd\x8e\xb4\xee\x38\xa5\x2f\x49\xe7\x8e\x52\xb9\x2d\x4f\xad\xc3\xac\x65\x59\x43\xfe\x80\xef\xfc\x06\xcd\x49\xfa\x03\x7b\xe5\xe7\x5d\xbc\x2d\x1b\xcf\x9a\xfb\xda\x2f\xdf\xf0\xc2\xcc\x63\xbd\x92\x78\xde\x77\x45\x90\x4f\x56\x7b\xd0\x44\x5b\x0f\xb0\x9b\x7a\x87\x26\xfa\xaa\xed\x43\x13\x7d\x45\x9e\xf6\xa0\x89\xe6\x14\xfd\x71\x4d\xb4\x3f\xb8\x18\x8c\x06\x3b\xe8\xa3\x8d\x9f\x0f\x7e\xb1\x3e\xba\xa5\x85\xe6\x61\xae\xb7\xd0\xc1\x23\x4e\xde\xb9\x2c\x72\xb7\x6f\x2e\x8b\xa2\x0a\x32\xfb\xff\x00\x00\x00\xff\xff\xae\xcf\x45\xc1\x7a\x1d\x00\x00")

func templateServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateServiceTmpl,
		"template/service.tmpl",
	)
}

func templateServiceTmpl() (*asset, error) {
	bytes, err := templateServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/service.tmpl", size: 7546, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/service.tmpl": templateServiceTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"service.tmpl": &bintree{templateServiceTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
