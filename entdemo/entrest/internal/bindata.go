// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/service.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xb1\x6e\xdb\x30\x14\x9c\xeb\xaf\x38\x10\x9c\x0a\x84\xde\x0b\x64\x28\x8a\x74\x34\x8a\xc4\xcd\x5c\xc6\x7c\x94\x89\x52\x94\x21\x3d\xb7\x09\x08\xfe\x7b\xf1\x28\xc5\x56\x55\x0d\xae\x07\x83\xf0\xbb\x3b\xde\xbb\xa3\x73\x86\x23\x1f\x12\x41\x39\x7a\x39\x37\xdb\xfa\xad\x50\xca\x66\x93\xf3\x1d\x7e\x07\x3e\x82\x5e\x99\x92\x83\x86\xfa\x66\x0f\x3f\x6d\x43\x6a\x42\x2b\xdc\x95\xb2\xf9\x90\x33\x98\xda\x53\xb4\x4c\x50\x47\xb2\x8e\x7a\x05\x23\x1a\x39\x43\x98\xa3\x1a\x7a\x9b\x1a\x82\x4e\xf8\x74\x0f\x6d\x76\x9d\xa3\x41\x46\x00\xb0\xdd\x22\x67\xe8\x64\x76\xb6\x25\x94\x82\x30\x80\x8f\x84\xb6\x73\x14\x41\x89\x03\xbf\xc1\x77\x7d\xfd\xf1\x6f\xe4\x70\x38\x52\x6b\x4d\x95\xe1\xb7\xd3\x3f\x63\xee\xcf\x07\x46\xae\x73\xf9\xc8\x5a\x93\x13\x5f\x9d\x24\xf3\x35\x50\x74\x17\x2f\x73\xa0\x66\xdb\x54\x90\x37\x4f\x55\x68\x6f\x1b\x94\x92\xf3\x98\x8c\x8c\x87\x71\x9d\xcf\x29\x75\x6c\x39\x74\x69\x98\xf4\x56\x19\x21\x39\x7a\x9d\x78\xda\xbf\xbb\x14\xcb\x72\xd3\x7d\x8d\xed\x92\xda\x35\xbe\xa5\xaf\x6b\xde\x35\xa1\xad\x97\x1b\x0f\x5d\xdb\x52\x62\x25\x8b\xad\x70\x82\x87\xb6\x17\x97\xd3\x56\x73\xdb\x0f\x89\x1f\x1f\x9e\xf6\x4b\xee\xac\x9f\x2b\xdd\x3c\xdb\x18\x9c\x38\xb8\x09\xfd\xa5\x27\xcb\xf6\x25\xde\x08\xff\x7e\x72\xff\x03\x7f\x24\xeb\xd6\xd0\xb2\xf5\x6a\x80\xd7\x3e\x6b\x55\xf2\x4e\x72\xae\x01\x79\xb3\x0b\x31\x8a\xd8\xb3\x8d\x67\x51\xfc\x38\xaf\x43\x7b\xb3\x97\x37\x76\x21\xa4\x8e\xab\x18\xa5\x21\x70\xf8\x25\x93\x1f\xef\x6d\x8e\x47\x8a\xc3\x54\xf1\xb2\xb4\xae\x0d\x2c\x0f\x41\x41\xaf\x96\xbd\xb0\xbf\xfc\x3b\x8d\xc7\x3f\x01\x00\x00\xff\xff\xe6\x83\xa0\x8a\xc2\x03\x00\x00")

func templateServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateServiceTmpl,
		"template/service.tmpl",
	)
}

func templateServiceTmpl() (*asset, error) {
	bytes, err := templateServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/service.tmpl", size: 962, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/service.tmpl": templateServiceTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"service.tmpl": &bintree{templateServiceTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
