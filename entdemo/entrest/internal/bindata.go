// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/gf.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateGfTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\xdb\x38\x12\x7f\xb6\x01\x7f\x07\x9e\xe0\x2d\xa4\xc0\x91\x71\xf7\xe8\x43\x1e\x7a\xb5\xb7\x67\xa0\xd7\x7a\xeb\x74\xf7\xa1\x28\x6e\x59\x6b\x24\xf3\x22\x51\x0e\x49\xa7\xed\x19\xfa\xee\x07\x52\x7f\x4c\x49\x94\x22\x27\x6e\xeb\x5c\xec\x97\x44\xe4\xcc\x70\xe6\xc7\xf9\x47\x51\x1b\xbc\xba\xc1\x01\x20\xa0\x82\x01\x17\x83\xfe\xa0\xbf\xdb\xa1\xe1\x0a\x47\x10\xbe\xc5\x11\xa0\xc9\x15\x52\x0f\x68\xe8\xaa\xe7\x24\x49\x29\xc2\xf8\x0b\xb0\x9c\x42\x3d\xe8\x14\x83\x3e\x89\x36\x31\x13\xc8\x1e\xf4\x7b\x16\x50\xe1\x41\x14\x8f\xb3\x45\xac\x41\x1f\x21\x84\xa4\x14\xa0\x62\x71\x13\x48\x11\x82\x91\xe8\x3d\x09\xd6\x62\x29\xa4\xa4\xe5\x6a\x0d\x11\x46\xd6\x98\xab\x7f\x2c\x25\x55\x72\x59\x1a\x5b\x92\x58\xa6\xc1\x71\x59\x3f\x45\x25\xd5\x08\x88\x58\x6f\x3f\xbb\xab\x38\x1a\x07\x71\xe0\x8f\x03\x7f\xec\x33\x1c\xc1\x38\xb0\x1a\xa6\x29\x88\x71\xb0\x16\x62\xa3\x24\xa4\x4a\x5f\xa2\x21\xde\x90\x97\x94\xc6\x02\x0b\x12\x53\xa9\xfc\xd0\xdd\x3f\x73\x77\x46\xc5\xfb\xd9\xf2\xfa\xe5\x62\x5e\x68\x2d\xd9\x18\xa6\x01\xa0\x61\xa4\x18\x4a\x22\xdc\x7f\x11\xcf\x0b\xe1\x0b\x66\xc0\x0b\x96\xc2\xae\xc8\x5d\xdc\x04\x0b\x2c\xd6\x7b\x7b\xa5\x38\xa0\x9e\xa2\x75\xa4\x6a\xe3\xb1\x82\x33\xdf\x00\xe4\x0e\xfa\xe2\xdb\x06\xca\x83\x5c\xb0\xed\x4a\xa0\x5d\x2a\x63\x3e\x4d\x67\xe7\x53\xf7\x5a\x92\x26\x89\x7c\xfe\x42\xc4\xba\x62\xce\xaf\x04\x42\x8f\xbb\x4b\xc5\x7d\x8d\x03\x97\xc8\x85\xff\xdc\xed\x90\x9b\xfd\x85\x90\x43\xf6\xaf\x92\x57\x90\xe6\xf3\x99\xaa\x15\x24\xfc\x14\xba\x54\x7e\xc9\x6e\x85\xb2\xc0\xca\x31\x86\x7e\x49\x5e\xa1\xa3\xc0\x01\xaf\x63\x5f\x55\x56\xe3\x20\xd4\x83\xaf\x19\xdf\xd0\xcf\x51\x91\x3a\xcb\x95\xae\x94\x35\x85\xb2\x15\xad\x73\x7f\xcd\x75\x51\xcb\x64\x90\x11\x5f\x89\x23\x61\x88\x3f\x87\xf0\x3b\x0e\xb7\x52\xee\x85\x2e\x6a\xe8\xeb\x18\x13\x1f\xd1\x58\x28\x61\x40\x39\x11\xe4\xae\x40\x4f\xec\x31\xcb\x30\xfd\x0f\x8f\xe9\xc4\xba\xb4\x4c\x38\x36\xe0\x0a\x29\x2c\x33\x2f\x00\x03\xac\xb8\xec\xb9\x60\x72\xdd\xdc\xbc\x32\x2b\xf1\x51\xcc\x90\x4d\xf8\x5b\x12\xea\x72\x1c\xfd\xc1\x7d\xc5\x00\x0b\x89\x44\x69\xf4\xc3\xc6\xcb\x46\x75\xa9\xd5\xbd\xde\x30\x42\x85\x8f\x32\xa3\x7f\xe1\xa3\x38\x22\x02\xa2\x8d\xf8\x66\xfd\x29\x55\x2d\xf2\x4b\x55\x80\xdc\x03\x6d\xb5\xdf\x71\x48\x3c\x2c\xea\xb4\xa5\x05\xf7\xeb\xfd\xc2\xd1\x9d\x5c\x4f\xae\x22\x67\x3a\xc9\xaa\xee\x80\xe6\x27\x1b\xcc\x57\x38\xd4\x34\xd6\x76\x1d\xdc\x0f\x94\xdc\x6e\x21\x49\xd0\xc7\x4f\xc5\xa6\x5e\x00\x15\xae\xca\x62\xca\x53\x8a\x98\xd5\xbd\xa2\xbc\x1b\x4d\xce\x90\x64\xf9\xe0\x0d\xe1\x42\x0f\xff\xf7\x70\xbb\x05\x2e\x8a\xd4\xd0\x34\xbf\xcf\x12\xbd\x05\x0e\x60\x49\xfe\x0b\x08\x11\x2a\xe4\x3a\xd9\xc6\x6c\xb2\x71\x7d\x7b\x32\xf2\xeb\xf8\x06\xa8\x81\x5c\x8d\x57\xe8\x97\xb2\x40\xa8\x1f\x17\x8c\xd0\x20\xa7\xe7\x31\x13\x65\xd2\xa7\x9e\x38\x2e\x1b\x62\xfe\x3e\x47\xce\xcc\xe8\x14\xa1\x2d\xe1\xb0\x04\xcc\x56\x6b\x63\xf4\x1d\x37\xb9\x99\xbd\xf5\xfe\x80\xb9\xcc\xd3\x9d\x89\xe9\xfb\x2a\x66\x52\xaa\x4b\x78\xbd\x86\xd6\xe8\x6a\x98\xfe\xe9\x25\x38\x57\x5f\x65\x69\x68\xb3\xa0\x99\xa2\x6c\xc4\x93\x8f\xcb\x47\xc4\x9b\x21\xd6\xf6\xe5\xaf\x63\x70\xb6\xd6\x2a\x74\xc4\x7a\xd5\x16\x82\xc7\x8b\xb4\x63\xf5\x37\xf7\xc6\xa7\x29\x61\x9c\x9e\x09\x6d\xa9\x04\x9d\x66\xdb\x76\x6e\xd0\x8c\x0d\xda\x51\x9b\x33\xd5\x0e\xb7\xa6\xdf\x66\x8a\x73\xfa\x6d\x71\xac\xe6\x73\xc6\x43\x3c\xf1\x98\xde\xd8\xe6\x91\xe8\x24\x73\x57\x93\xc6\x45\xfa\xdd\xaf\x34\x8f\xa2\x6d\x53\xf6\x38\x35\xb3\x9e\x4c\x4a\x3e\x9f\x99\x7f\x64\x4a\x9e\x42\x08\xed\x29\xb9\x99\xe2\x34\xda\x7a\x7f\x4b\x57\x08\x68\xe9\xe0\xf1\x37\x06\xe5\x63\xbe\x5d\x7e\xbd\x9b\x24\xa8\x78\xf5\x90\x93\x38\xe8\xa2\xf4\xde\x70\x37\xe8\xf7\x18\x88\x2d\xa3\xe8\x85\x3e\xb1\xdb\x03\x3c\x9f\x4e\x50\x55\xb0\x3b\x9f\x8e\x06\xfd\x5e\xaf\x53\x85\x6a\x4a\x15\x06\xb1\x26\xb2\x51\xf3\x5e\x77\x0d\xe9\x47\x86\xf5\x61\xa1\x7d\xe8\x4b\xb2\x42\xb9\x34\x4a\x66\xf9\x8b\xf7\x5a\xd0\x98\xeb\x8a\xce\x65\xc4\x54\xc1\xe1\xd6\x49\x47\x87\x1d\x96\x7b\x6d\xae\xc8\x6b\xbe\xc8\x6b\xce\xc8\xd1\xc7\x4f\x06\x7f\xfc\xf8\xc9\xe4\x91\x15\x61\x12\x8f\x08\xdf\x80\x5d\xa1\x1e\xa1\x10\x68\x7d\x25\xc7\x19\xf4\x7b\x7e\xcc\xd0\xbf\x47\x35\x3c\xa4\xa8\xd4\x5f\xea\x0a\xca\xb5\x0d\x8b\x5f\x21\xbc\xd9\x00\xf5\xec\xda\xd4\xe8\xf0\x98\x54\xba\x25\xfb\xb0\xab\xc9\xd4\x61\xae\x4e\xce\xa7\xdc\x96\x15\x80\x57\x61\x93\x38\x66\x6f\xda\xa4\x11\xc4\xd3\x21\x4b\x27\x52\xac\x14\xb7\x8e\x8f\x1c\xd8\x63\x92\x0a\x57\x38\x48\x19\x85\xe5\xc4\xe3\x29\xa9\x3b\x9f\x56\x0c\x20\x5e\x49\xe5\xb7\xf0\x45\x57\x6c\x09\xec\x8e\xac\xe0\x9f\x98\x7a\x21\x30\x7b\x15\x12\xa0\x22\xcd\x4b\xaf\xd4\xff\x23\x69\xe4\x26\x9b\x47\x52\x84\xcd\xd0\x85\xba\x99\x71\xb3\x1c\xac\x48\xb6\x61\xca\x26\x21\x71\xdf\xab\x67\xc7\x51\x9a\x2a\x53\x03\x57\xae\x04\xcc\x76\xaa\xd7\x39\x0b\x06\x3e\xf9\x2a\x69\xac\x31\xde\x10\xab\x54\x29\x54\xa1\x2c\xdd\xd7\x64\xe4\xf5\x8e\xa0\x90\x54\xbb\xe2\xa9\xb0\xe8\x51\xa3\xa9\x42\x3c\x59\x31\x16\x69\x54\x6b\xf1\x9d\xd7\x12\x99\xf6\xe4\xfe\xed\xd9\xb8\xfb\x0f\x42\xbd\xfd\x05\x92\xad\xdd\x1e\xbd\x9e\x5d\x4f\x24\xce\x7b\xb5\xd2\xcb\x31\x4e\xf1\x0d\xec\xe1\xb7\x46\xc6\x4c\x79\xc8\x45\x95\x06\x15\xa6\x1e\xb2\x65\x0a\x84\x5b\x34\x8c\xe4\xf6\xa8\x22\x68\x59\x4e\x6d\x28\x24\x5c\x58\x8e\x83\x6c\x2a\x97\x73\x5f\xc5\x5e\x4a\xd7\x94\xc6\x32\x92\x83\xd3\x52\x3e\x66\x74\x1c\x07\xed\xca\xd2\xee\x30\x43\x0c\x6e\x9b\x5e\x90\x97\x89\x89\x8f\x80\x31\x15\x1b\xee\x02\x33\x0e\xf6\x0b\x06\xb7\xce\xdf\xd5\xe8\x5f\xae\x10\x25\x61\x55\xbe\xfc\x69\xee\x6c\xb3\x11\x7a\x51\xf6\x59\x03\x83\xfc\xcd\x18\x8b\x99\x44\x6e\x92\x5f\xd7\xba\x6a\x68\x81\x19\x8e\x40\x00\x93\x9e\x30\x6a\xe1\x9d\xa8\x7f\x81\x31\x03\x51\xe2\x94\xc7\x0a\x07\xd3\x37\xa0\x94\x09\x47\xb9\xe5\x69\xbc\x96\x52\xb6\x5b\x5f\xe0\xb7\x2d\xb0\x6f\xb6\x63\x98\xe9\x5a\x9d\x75\xfa\x47\x54\x69\x5d\xcc\xf7\xab\xd6\xf9\xef\x0f\x22\xd6\xa6\xee\xd6\x88\x04\xba\xf7\x8c\xd8\x3c\xf7\x86\x44\x44\xd8\x0c\x6e\xdd\xfc\xda\xc6\xb4\xc2\x3b\xdf\xe7\x20\xec\x82\x2e\xbd\xaf\xb9\x44\x7f\x75\xd0\x05\xba\x8f\xf9\x65\x18\xda\xcc\x7d\x15\x53\x01\x5f\x85\xed\x38\xc6\x50\xf8\x41\x4e\x2f\xa3\xf3\xbb\xf9\xba\x4c\x6f\x93\xab\x07\x35\x30\x4e\x4d\xd2\x61\x36\x4f\xb1\xc0\x93\x94\xd1\xa0\xf9\x9c\x4b\xbb\x27\x48\xb0\x2d\x54\xa6\x75\xa3\xf2\x04\xe9\x1c\xb1\x4a\x8c\x77\xc4\xfb\x79\xa5\x22\x80\x13\xae\x14\xe6\xcb\x9e\xe7\x5a\x28\x88\x97\x5a\x99\xa1\x52\x6a\x69\x92\xc4\xb6\x88\x67\x39\xed\xa5\xe5\xc1\x95\xa5\xd7\xeb\xf5\xfe\x58\x83\xf2\x6f\xf9\x7f\xaf\xfa\x25\x90\x3b\x9f\xce\x7e\xb3\x89\xe7\x8c\x52\x82\x9c\xe9\x5c\x82\xaa\x6a\x75\x29\x41\x12\xb9\x5f\x09\xe3\xe2\x64\xaa\xc2\x6b\xf8\xd1\x45\xa1\xc3\x61\xee\x28\x15\xa1\x5e\x0f\x1a\x13\x7e\xaf\x2d\xdb\x2f\xde\x2d\x4f\xfb\x50\xb0\x52\xf7\xce\xa7\x9b\xec\x1b\xef\xc5\x9f\x6b\xbe\x97\x9e\x79\x58\xc2\x4e\x21\xbc\xef\x2c\xd0\xfe\xb2\x50\x67\x78\xfc\x47\x33\xcd\xd2\xee\xb9\xd0\x37\x31\xd7\xaf\x35\xda\xf9\xe4\x6f\x09\x22\x67\x32\xbd\xdf\x54\xfd\xba\x69\xa2\x29\x85\xeb\x3a\x35\x7e\x5b\x63\x50\xe2\xf8\x8b\x37\xd4\x91\xae\x34\x9d\x0c\x78\x28\xf2\xdf\x03\xf5\xce\x88\x1f\x13\xed\x4e\x28\x3e\xe0\x50\xf9\x84\xfa\xa2\xfb\xfc\x63\x08\x5e\x00\xe9\xb2\xdd\x5e\x9c\x57\x94\x29\x2e\xa1\xba\x6e\xec\x7e\xbd\x24\x99\x4f\x8b\x6d\xd5\x87\xdd\xf9\xf4\x28\xae\xf4\xd2\xf3\xea\x77\x61\xf3\x29\x2f\x5e\x46\x9b\x66\xea\xea\x38\xae\xeb\xfe\x0c\x2f\x5b\xe2\x3b\x38\x99\x16\x32\x2d\x4e\x47\xac\x96\x8f\xd2\xf4\xc8\xcd\xdf\x87\x27\x70\xd4\xdf\xaa\x2f\x5f\x4e\xb7\x01\x6c\xfc\x32\xe7\xb9\x36\x80\x87\x1f\xf8\x0f\x6f\x19\x53\xd0\xdf\x51\x98\x4f\xe5\xf1\xfd\x49\x74\x8e\xdd\x4e\xe7\xe8\xdc\x39\x36\x2c\x7e\xac\xce\xb1\xcb\x67\x4a\x55\xc6\x73\x37\xf9\x1c\xbb\xc9\x6e\x11\x7b\xee\x26\xcf\xdd\x64\xf5\xd7\x54\x81\xd3\xba\xf5\xff\xd9\x4d\x4e\x67\x6f\x66\xd7\xb3\xd3\x6f\x28\x3d\xf5\xdd\xde\xe9\x36\x94\x8d\xdf\x15\x9e\x1b\xca\xae\x0d\xe5\x41\xbd\x64\x8a\x77\x5b\x2f\x39\xfb\x0a\xab\x93\x49\x21\xa9\xba\x3f\x27\x85\x34\x24\x86\x64\xd0\xff\x5f\x00\x00\x00\xff\xff\x5e\xf2\xe9\xac\x39\x40\x00\x00")

func templateGfTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateGfTmpl,
		"template/gf.tmpl",
	)
}

func templateGfTmpl() (*asset, error) {
	bytes, err := templateGfTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/gf.tmpl", size: 16441, mode: os.FileMode(438), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/gf.tmpl": templateGfTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"gf.tmpl": &bintree{templateGfTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
