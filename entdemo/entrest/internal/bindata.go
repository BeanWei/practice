// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/gf.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateGfTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6f\xdb\x38\x12\x7f\xb6\x01\xff\x0f\x3c\xc1\x2d\xa4\xc0\xa1\x71\xf7\xe8\x43\x1e\x72\xb5\xb7\x67\xa0\xd7\x7a\xeb\x74\xf7\xa1\x28\xb6\x5c\x6b\xa4\xf0\x22\x51\x0a\x49\xa7\xe9\x19\xfa\xdf\x0f\xa4\x3e\xac\x0f\xca\x56\x12\xa7\x75\xb7\xd6\x8b\x2d\x72\x66\x38\xf3\xd3\x7c\x89\x54\x4c\x56\x37\xc4\x07\x04\x4c\x72\x10\x72\xd0\x1f\xf4\x37\x1b\x34\x5c\x91\x10\x82\xb7\x24\x04\x34\xb9\x40\xfa\x06\x0d\xb1\xbe\x4f\x92\x94\x22\x88\xbe\x00\xcf\x29\xf4\x4d\x99\x62\xd0\xa7\x61\x1c\x71\x89\xec\x41\xbf\x67\x01\x93\x2e\x84\xd1\x38\x5b\xc4\x1a\xf4\x11\x42\x48\x49\x01\x26\x17\x37\xbe\x12\x21\x39\x0d\xdf\x53\xff\x5a\x2e\xa5\x92\xb4\x5c\x5d\x43\x48\x90\x35\x16\xfa\x8f\xa5\xa5\x2a\x2e\xab\xc4\x96\x24\x96\x69\x70\x5c\xd5\x4f\x53\x29\x35\x7c\x2a\xaf\xd7\x7f\xe2\x55\x14\x8e\xfd\xc8\xf7\xc6\xbe\x37\xf6\x38\x09\x61\xec\x5b\x2d\xd3\x0c\xe4\xd8\xbf\x96\x32\xce\xd7\x31\xd0\x48\xb8\x97\x63\x5f\x48\xae\x57\x49\x0d\x3b\x47\x43\x12\xd3\x4b\xc6\x22\x49\x24\x8d\x98\x32\x70\x88\xb7\xf7\x02\xcf\x98\x7c\x3f\x5b\x5e\x5d\x2e\xe6\x85\x65\x8a\x8d\x13\xe6\x03\x1a\x86\x9a\xa1\x22\x02\xff\x87\xba\x6e\x00\x5f\x08\x07\x51\xb0\x14\xb6\x87\x78\x71\xe3\x2f\x88\xbc\xde\x62\xa2\xc4\x01\x73\x35\xad\xa3\x54\x1b\x8f\x35\xe4\xf9\x43\x42\x78\xd0\x97\x5f\x63\xa8\x0e\x0a\xc9\xd7\x2b\x89\x36\xa9\x8c\xf9\x34\x9d\x9d\x4f\xf1\x95\x22\x4d\x12\x75\xff\x85\xca\xeb\x9a\x39\xbf\x50\x08\x5c\x81\x97\x9a\xfb\x8a\xf8\x98\xaa\x85\x3f\x6f\x36\x08\x67\xbf\x10\x08\xc8\xfe\x6a\x79\x05\x69\x3e\x9f\xa9\x5a\x43\xc2\x4b\xa1\x4b\xe5\x57\xec\xd6\x28\x4b\xa2\x9d\x67\xe8\x55\xe4\x15\x3a\x4a\xe2\x8b\x26\xf6\x75\x65\x4b\x1c\x94\xb9\x70\x9f\xf1\x0d\xbd\x1c\x15\xa5\xb3\x5a\xe9\x42\x5b\x53\x28\x5b\xd3\x3a\xf7\xe9\x5c\x17\xbd\x4c\x06\x19\xf5\xb4\x38\x1a\x04\xe4\xcf\x00\x7e\x23\xc1\x5a\xc9\x3d\x2b\x8b\x1a\x7a\x65\x8c\xa9\x87\x58\x24\xb5\x30\x60\x82\x4a\x7a\x57\xa0\x27\xb7\x98\x65\x98\xfe\x57\x44\x6c\x62\x9d\x5b\x26\x1c\x5b\x70\x85\x14\x96\x99\xeb\x43\x1d\x56\x14\x13\xb1\x22\x01\x1a\x42\xc9\xfe\x5c\x1f\xc0\x1f\x18\xbd\x5d\x43\x92\xa0\x8f\x9f\x8a\xe5\xce\x80\x49\xac\x63\x50\xdb\x50\x78\x93\x52\x28\xe6\x94\x49\x0f\x65\x4a\xbe\x10\xa3\x28\xa4\x12\xc2\x58\x7e\xb5\x3e\x97\xd6\xf8\xdc\x54\x39\xc9\xbc\xf6\x0d\x15\xb2\xec\xa4\xef\xe1\x76\x0d\x42\x16\x0e\xdc\x36\xbf\xf5\xe5\xde\x82\xf8\xb0\xa4\xff\x03\x84\x28\x93\x6a\x9d\x4c\x9d\x38\x1b\x2f\x2b\x95\x91\x5f\x45\x37\xc0\x0c\xe4\x7a\xbc\x46\xbf\x54\xa9\x4e\x5f\x42\x72\xca\xfc\x9c\x5e\x44\x5c\x56\x49\x7f\x74\xf7\x3e\x6f\xf1\xcc\x2d\x4d\x89\x6e\x48\xaa\x19\xd0\x33\xa5\xc0\x3c\x4c\xaa\x12\xcc\x52\xf0\x12\x08\x5f\x5d\xab\x18\x32\x72\x1c\x2e\x04\xcb\x91\x66\xd6\xac\x8e\x4d\x31\x9e\x06\xa5\x89\xe9\x79\x15\x33\x29\x65\xca\x00\xf5\xf0\x7a\x0d\x3b\xa3\xab\x65\xfa\x59\x0a\x05\xba\x9b\x58\x1c\x6e\xd7\x94\x83\x6b\xed\xab\x1a\x4d\xe2\x9a\x61\xaf\x38\x10\x09\xbb\x6c\x6b\xa7\xa8\x9a\xf7\xc3\x47\xec\x13\x22\xd1\x10\x85\x1a\xb6\xd6\x20\x34\x30\xfc\x46\x02\xea\x12\xb9\x2b\x68\xcf\x73\x8b\xf2\x7a\xf1\x42\xa8\x07\xfc\x42\xa8\x2a\xa1\x66\x3a\xcb\x6b\x0b\xce\xc3\xc5\xe0\xa1\xea\xf3\xde\xc8\x35\xa5\x92\xe3\x33\x61\x57\x92\x41\x9d\xdb\x8e\xf3\x86\x93\x82\xc9\x49\x15\xab\xc9\xc3\x23\x8e\x6c\x2a\xde\xd2\xa0\x2c\xc6\xa9\x78\xcd\x6b\x90\xbf\x53\xdd\x22\x37\xe1\xcf\x03\xb7\x63\xb7\xb2\x37\x44\xf6\x7a\xe8\x21\xbc\xbd\xbd\x0c\x3d\xa6\x87\x6b\xe9\xdf\x9a\xc5\xa6\x4b\x51\xf9\x10\xbb\x7b\x72\x6f\x3b\xc5\x11\x97\x16\x74\x2a\x06\x75\x4f\xd7\xcf\xf1\x54\x0c\xbe\x4d\x31\xd8\xae\x34\x0f\xc3\xb5\x19\xf6\xe3\x33\xeb\x54\x20\x4e\x05\xa2\x5e\x20\xa6\x10\xc0\xee\x02\xd1\x4e\x71\xc4\x05\x42\x9b\xe7\xad\xd9\x0a\x01\xab\xbc\x37\xfd\x83\x43\x75\x97\xc2\xae\xee\xb3\x26\x09\x2a\x76\x51\x72\x12\x07\x9d\x55\x36\xe7\x36\x83\x7e\x8f\x83\x5c\x73\x86\x5e\x96\x27\x36\x5b\xe8\xe7\xd3\x09\xaa\x0b\xc6\xf3\xe9\x68\xd0\xef\xf5\x3a\x15\xae\xb6\x0c\x62\x10\x6b\x22\x1b\xb5\x7b\x41\xd7\x48\x7f\x5a\xb4\x1f\x26\xe2\x0b\x1d\xd2\x30\x99\xe5\x1b\xdd\x8d\xa8\x31\x57\x95\x32\x97\x11\x3a\x6d\x35\x6e\x92\x8e\x1e\xf6\x4a\xdf\xdb\xe5\x71\xa2\xe1\x72\xa2\xe1\x73\x02\x7d\xfc\x64\x70\xbb\x8f\x9f\x4c\x8e\x57\x13\xa6\xf0\x08\xc9\x0d\xd8\x35\xea\x11\x0a\x80\x35\x57\x72\x9c\x41\xbf\xe7\x45\x1c\xfd\x31\x6a\xe0\xa1\x44\xa5\x6e\xd1\x54\x50\xad\x6d\x58\xfc\x02\x91\x38\x06\xe6\xda\x8d\xa9\xd1\xc3\x43\x4f\xeb\x96\x6c\xa3\xab\x21\xb3\x0c\x73\x7d\x72\x3e\x15\xb6\x2a\x01\xa2\x0e\x9b\xc2\x31\xdb\x0f\x54\x46\x50\xb7\x0c\x59\x3a\x91\x62\xa5\xb9\xcb\xf8\xa8\x81\x2d\x26\xa9\x70\x8d\x83\x92\x51\x58\x4e\x5d\x91\x92\xe2\xf9\xb4\x66\x00\x75\x2b\x2a\xbf\x85\x2f\x65\xc5\x96\xc0\xef\xe8\x0a\xfe\x4d\x98\x1b\x00\xb7\x57\x01\x05\x26\xd3\xf4\xf3\x4a\xff\x1f\x29\x23\xe3\x6c\x1e\x29\x11\x36\x47\x67\xfa\x24\x04\x67\x49\x58\x93\xac\x83\x94\x4d\x41\x82\xdf\xeb\x7b\xc7\xd1\x9a\x6a\x53\x7d\xac\x56\x02\x6e\x3b\xf5\xa3\x91\x05\x07\x8f\xde\x2b\x1a\x6b\x4c\x62\x6a\x55\x4a\x85\xae\x94\x95\xb3\x8f\x8c\xbc\xd9\x0f\x14\x92\x1a\xc7\x25\x35\x96\x72\xd4\xa4\x23\x02\xff\x8b\x32\x77\x7b\xaa\x62\x97\x8e\x54\x5e\xcf\xae\x26\x0a\xb0\xad\xfc\xf4\x54\x49\x30\x72\x03\x5b\x1c\xad\x91\x31\xb3\x3d\xe4\xf4\xa6\x64\x33\x61\x2e\xb2\x55\xce\x82\x5b\x34\x0c\x15\xce\xba\x9c\x59\x96\xd3\x18\x0a\xa8\x90\x96\xe3\x20\x9b\xa9\xe5\xf0\xab\xc8\x4d\xe9\xda\xf2\x51\x46\xf2\xe0\xfc\x92\x8f\x19\x3d\xc0\x41\x9b\xaa\xb4\x3b\xc2\x11\x87\xdb\xb6\xfd\xf8\x2a\x31\xf5\x10\x70\xae\x9d\x1c\x2f\x08\x17\x60\xbf\xe4\x70\xeb\xfc\x53\x8f\xfe\xed\x02\x31\x1a\xd4\xe5\xab\xab\xe4\x97\x36\x1f\xa1\x97\x55\xe7\x33\x30\xa8\x6b\xc6\x79\xc4\x15\x72\x93\xfc\x9c\x13\xeb\xa1\x05\xe1\x24\x04\x09\x5c\x79\xc2\x68\x07\xef\x44\xff\x05\xce\x0d\x44\x89\x53\x1d\x2b\x1c\xac\xfc\x00\x2a\x29\x6d\x94\x5b\x9e\x06\x5e\x25\xf7\xe2\xe6\x02\xbf\xae\x81\x7f\xb5\x1d\xc3\x4c\xd7\x6a\x5a\xa6\x7f\x7c\x55\x2d\x4b\xe9\x56\x5d\xb5\xe6\xad\xf5\x35\xbf\x14\x81\xa9\x21\x35\x9a\x8c\xf6\xbe\xd3\xb5\xcf\xbd\xa1\x21\x95\x36\x87\x5b\x9c\x1f\x07\x99\x56\x78\xe7\x79\x02\xa4\x5d\xd0\xa5\xe7\x40\xe7\xe8\xef\x0e\x3a\x43\xfb\x98\x2f\x83\xc0\xe6\xf8\x55\xc4\x24\xdc\x4b\xdb\x71\x8c\x3e\xff\x8d\xbc\x5b\x85\xe1\xb3\x39\xb5\xca\x63\x93\x8b\x47\xb5\x1c\x4e\x43\xd2\xc3\x6c\x9e\x12\x49\x26\x29\xa3\x41\xf3\xb9\x50\x76\x4f\x90\xe4\x6b\xa8\x4d\x97\x8d\xca\x33\xa1\x73\xc0\x72\x30\xde\x50\xf7\xfb\xd5\x04\x1f\x8e\xb8\x24\x98\x0f\x91\x4e\x15\x21\xef\x98\x1f\x59\x10\x7a\xbd\x5e\xef\xf7\x6b\xd0\xde\xaa\xfe\xf7\xea\x5f\xbe\xe0\xf9\x74\xf6\xab\x4e\x65\xf3\xa9\x33\x4a\x89\x72\xc6\x63\xaf\x1e\xbb\xde\xcd\xf2\xeb\xd9\x6a\x87\x02\xe8\x17\xca\x85\x3c\x9a\x74\xfe\x1a\xbe\x75\x36\xef\xf0\xde\x74\x90\x54\xde\x4c\xe4\xad\x99\xba\xb7\x2b\x4d\x2f\xde\x2d\x8f\xbb\x6d\x5f\xe9\xe3\xe6\xe3\xcd\xd2\xad\xc7\xe1\x3f\x6b\xa2\x56\x9e\xf9\xb0\xdc\x9c\x42\xb8\xaf\x5b\xdf\xbd\xfd\x56\x66\x78\xfa\x57\x34\xed\xd2\xf6\x9c\xe3\x9b\x98\x9b\xe7\x07\xbb\xf9\xd4\xb5\x04\x99\x33\x99\x76\x0c\x75\x75\x32\x4d\xb4\xa5\xf0\xb2\x4e\xad\x1f\xdb\x18\x94\x38\xfc\xe2\x2d\x75\xa4\x2b\x4d\x27\x03\x1e\x8b\xfc\x73\xa0\xde\x19\xf1\x43\xa2\xdd\x09\xc5\x47\xbc\x0d\xfe\x15\xda\x1f\xad\x13\xb8\x3e\xa4\x40\x76\xdb\xa0\xae\xa9\x52\x9c\xf6\x74\x7d\xaa\xdb\xf5\x92\x64\x3e\x2d\x9e\x69\x79\x58\x75\x9b\x87\xf0\xa3\x4b\xd7\x6d\x1e\x3a\xcd\xa7\xa2\xd8\xf4\x35\xcd\x34\xd5\x71\x30\xc6\xdf\xc3\xc5\x96\xe4\x0e\x8e\xa6\x7f\x4c\x2b\xd3\x01\x4b\xe5\x93\x34\x3d\x70\xe7\xf7\xe1\x07\x78\x41\x5f\xeb\x0f\x5e\x8e\xb7\xfb\x6b\xfd\x20\xe7\xd4\xfd\x75\xed\xfe\x52\x08\xdf\x31\xc8\xf2\xa2\x39\x0d\x1e\x5f\x23\xb8\xfb\x1b\x1e\x13\xf3\xa9\x11\x2c\x2f\x7e\xa8\x46\xb0\xcb\xe7\x3d\x75\xc6\x53\x73\x78\x6a\x0e\x5b\xb1\x39\x35\x87\xa7\xe6\xb0\x7c\xb5\x15\xd4\xb4\x70\xfd\x35\x9b\xc3\xe9\xec\xcd\xec\x6a\x76\xfc\xfd\xa1\xab\xbf\x77\x3b\xde\xfe\xb0\xf5\x7b\xbc\x9f\xb5\x3f\xcc\x3e\xe8\xf1\x85\xe4\x78\x19\x07\x54\x5e\x32\xf7\x8a\xd3\x70\x19\x93\x15\x64\xfd\xdf\x08\x59\x23\xab\x26\xe8\x8f\x07\x76\x95\x29\xf0\xc6\x3d\xc5\xfc\xf0\xc7\x64\xa0\xe1\x2c\x68\xce\x6c\xea\x0a\x95\xf0\x0c\xf6\x9a\xe4\xcf\xee\x61\x75\x34\x49\x2a\xc5\xe1\xfb\x24\xa9\x96\xd4\x93\x0c\xfa\xff\x0f\x00\x00\xff\xff\x3c\x56\x53\x57\x42\x3f\x00\x00")

func templateGfTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateGfTmpl,
		"template/gf.tmpl",
	)
}

func templateGfTmpl() (*asset, error) {
	bytes, err := templateGfTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/gf.tmpl", size: 16194, mode: os.FileMode(438), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/gf.tmpl": templateGfTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"gf.tmpl": &bintree{templateGfTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
