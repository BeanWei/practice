// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/gf.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateGfTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5d\x73\x9b\x38\x17\xbe\x0e\xbf\x42\x2f\xe3\x76\x20\xe3\xc8\xf3\xde\x7a\xa7\x17\xdd\xd8\x9b\xf5\x4c\x37\xf5\xc6\x6e\xaf\xad\x9a\x03\xd1\x06\x04\x96\xe4\x7c\xac\x87\xff\xbe\x23\x01\x36\x18\xe1\x38\x8d\x93\xd0\x24\xdc\xc4\x48\xe7\x1c\x1e\x3d\x3a\x1f\x3a\x4a\x42\xe6\x57\x24\x00\x04\x4c\x72\x10\xd2\xb2\x68\x94\xc4\x5c\x22\xc7\x3a\xb2\x81\x49\x0f\xa2\xb8\x07\x4c\xda\xd5\x57\x25\x6a\x5b\xd6\x91\x1d\x50\x79\xb9\xfc\x81\xe7\x71\xd4\x0b\xe2\xc0\xef\x05\x7e\xcf\xe7\x24\x82\x5e\x60\x9b\x67\x19\xc8\x5e\x70\x29\x65\x62\x5b\x16\x42\x08\xad\x56\x27\xa8\x43\x12\xfa\x99\xb1\x58\x12\x49\x63\x86\xfa\x9f\x50\x07\x6f\xde\x05\x1e\x32\x79\x31\x9c\x4c\x3f\x8f\x47\x28\x4d\xd7\x5a\x9c\xb0\x00\x50\x27\xd2\xf2\x15\x0b\xf8\x2f\xea\x79\x21\xdc\x10\x0e\xa2\xd0\x50\x8f\xbd\x5a\xa1\x4e\x84\xc7\x57\xc1\x98\xc8\x4b\x94\xa6\xf6\xda\x18\x30\x4f\x49\xba\x96\xd5\xeb\xa1\x2f\x54\x48\x25\x8a\xcf\x49\x04\x28\x4d\x2f\x60\xb1\x04\x21\x11\xb6\xe4\x5d\x02\x8d\xd3\x42\xf2\xe5\x5c\xa2\x95\x75\x34\x26\x01\x4c\xe8\xbf\x80\x10\x65\x52\x7d\x62\xf6\x8f\x88\x59\xdf\x4e\xf2\xf1\x6e\x1c\x51\x09\x51\x22\xef\xec\x59\x26\x3d\x8d\xaf\x80\x19\xa4\xf5\x78\x55\x7c\xa2\xb6\x47\x3f\x42\x72\xca\x82\x42\x5c\xc4\x5c\x56\x24\xb7\x88\xf2\x33\x62\xff\xa0\x10\x7a\x15\x5a\xf4\x16\x48\x12\xe8\x79\x1f\x4f\xf4\x32\xa6\x24\x40\x69\xba\x5a\xa1\x1b\x2a\x2f\xf5\xb4\xa8\x6f\x4c\x66\xcb\xa8\x41\x99\x07\xb7\xb9\x5e\xc7\x2f\xa8\x52\xb4\xa9\x2f\x7d\x42\x38\x7b\xcb\x78\x5f\xff\xa8\x60\xa2\x3e\x62\xb1\xd4\x90\x80\x09\x2a\xe9\x35\x94\x45\x4a\x62\x1d\x52\xf5\x1e\xdf\xe4\x3e\x1a\xec\xb6\x01\xb3\x11\x3c\x01\xc2\xe7\x97\xe4\x47\x58\xfb\xe2\x46\x69\xc3\x55\x61\x59\x0d\x2a\x43\x3e\x3e\xa7\x61\xa8\xb4\xbf\x93\x70\xa9\x4c\x1c\x97\x97\xda\xf1\xf1\x54\xf9\x51\x9a\xa2\x59\x41\x48\x9a\xce\x8c\xb8\xb6\x68\x59\x0f\x87\xc2\x88\xec\x89\x51\x19\x10\x6d\x0d\x95\x5e\x53\x1d\x4b\x67\xb0\x2b\x94\x1a\x66\xd7\x91\xa4\x4c\x8e\x06\x7a\x59\x78\x34\x58\x03\x5c\xbb\xe5\x4e\x6f\xc4\x54\xe1\x50\x8b\xc1\xf9\xdf\x9c\xb6\x59\x61\xaf\xec\xb8\xb3\x8d\x13\x66\xc8\x4f\x39\x10\x09\x3b\xc0\x37\x0b\x54\xf0\xff\xe2\x21\xf8\xf3\xb1\x65\x88\x2b\x4d\x59\x53\x58\x95\x62\xde\xa1\xe2\x9c\x86\x15\xd5\xef\x24\xa4\x1e\x91\xe0\x36\x47\xe4\x49\xb1\xb2\x84\x53\x26\x7d\x34\xfb\x20\xd0\x75\xdf\xfe\x20\xec\x59\x36\x63\xb2\xd7\x84\xc4\x10\x79\x87\x8b\xb0\x4c\xc1\x90\xdd\xca\xa1\x57\x72\xd8\x2c\xc3\x9f\xd8\xb3\xfa\x36\xed\x8a\x4b\x43\x96\x68\x1d\xfe\xfb\x12\xc8\xb7\xc4\xdb\x1d\x86\xcd\x02\xef\x61\xd8\x10\x86\x9a\xb2\xf7\x30\x7c\xce\x30\xdc\x7c\x67\x14\x45\x4b\x23\xf9\xad\x5b\xd3\x7d\xa1\x39\x80\x10\x76\x86\x66\xb3\xc0\xcb\x57\x78\x7f\xc9\xe6\xe8\x1c\x6e\xca\xe8\x26\xc0\xaf\xe9\x1c\xfe\x24\xcc\x0b\x81\x3b\xf3\x90\x02\x93\xe8\x18\x98\xc4\xa7\xfa\x77\x17\x71\x10\x49\x3e\x8f\x94\x09\x87\xa3\x63\xdd\xcf\xe0\x7c\x69\x5a\x64\x19\x66\x6a\xaa\x4f\xc2\x17\xfa\xdd\x75\x55\x67\xa0\x53\x47\x80\xd5\x87\x80\x3b\x6e\xb5\x07\x1a\x73\xf0\xe9\xad\x92\xb0\x7b\x24\xa1\x76\x99\xf8\xed\x88\xac\xf4\x3b\x99\xa2\x5b\x4b\x65\x1b\x9b\xb5\x16\x29\x1f\xaf\x6f\xed\x06\x11\xf5\xd4\x6e\x8c\x89\x98\x93\x50\x81\x4a\xb2\x5f\xeb\x7d\x52\xe4\xaa\xfe\xa3\x50\x12\xf8\x77\xca\xbc\x4d\xef\xe5\x6c\x1a\xaf\xb3\xe1\xb4\xaf\x88\xde\x00\x4a\xd3\xde\x6a\x85\x04\x23\x57\xb0\xe1\xdf\xee\x56\xf0\x3f\xbc\xc3\x2b\xb1\x45\x98\x87\x9c\x98\x23\x07\x16\xaa\xe9\xbb\x80\x85\xf6\x2d\xdb\x76\x6b\x43\x21\x15\xd2\x76\x5d\xe4\x94\x19\x8e\xf0\x69\xec\x81\x6b\xcc\x73\x59\x1f\xa9\xe6\x51\x9a\x76\x1f\x78\x44\x56\x8f\xd1\x73\xdc\x3c\x1c\x8a\xe7\x9a\x70\xc4\x61\xd1\xd4\x6f\x56\x64\xa9\x8f\x80\x73\x45\x14\xc7\x63\xc2\x05\x38\x1f\x39\x2c\xdc\xdf\xf4\xe8\xff\x3e\x21\x46\xc3\x2d\xeb\xea\x29\x39\xb3\xc3\xbb\xe8\x63\xd5\x63\xeb\xf2\xea\x19\x72\x1e\x73\xc5\x5b\xbf\xb8\x33\xc0\x7a\x68\x4c\x54\xdf\x2f\x81\x2b\x27\xe8\x36\xab\xf6\xf5\x4f\xe0\xbc\x2e\x93\xba\x95\xa1\xdc\xad\x4a\x60\xbb\xc5\x22\xb3\xc8\xc4\x65\x56\x70\xcd\xdc\xdf\x4b\xe0\x77\x8e\x5b\x9f\xf8\x42\x23\x2a\x1d\x0e\x0b\x5c\x34\xea\x06\xa1\xaf\xbe\x2f\x40\x3a\x6b\xb1\xac\x43\x3f\x41\xff\x77\xd1\x31\xba\x47\xf7\x73\x18\x3a\x1c\x9f\xc6\x4c\xc2\xad\x74\x5c\xd7\xb4\x55\xcf\xb2\x29\xca\x75\x0e\xb4\x17\x8f\x81\x38\x20\x92\xf4\xf3\x2d\xac\x4d\x8e\x84\x42\xd9\x47\x92\x2f\xa1\x3a\x5b\xc2\x90\x47\x99\x7b\xa8\x4c\xd3\x5b\x51\xef\xa5\xd2\x4d\x00\x6d\xce\x36\xe6\x96\xfc\xad\x25\x1b\xea\x65\xcb\xcb\xd9\xa8\x94\xc2\x34\x75\x6c\xea\xd9\xee\xe3\xb2\xd3\x19\xc8\x72\x8e\xe8\x22\xea\xbd\x5c\x9e\x38\x83\xf6\xa4\x89\x5a\x92\x30\xa6\x81\xa3\x1d\x39\x60\xfc\x75\xd2\xe6\xe3\xc6\x5c\xdf\x1b\xb5\x38\x05\x34\x5e\x6c\xbd\xb5\x2c\xf0\xe0\xa0\xce\x98\x33\x9d\x39\xf6\xb9\x7e\xd8\x96\x7f\xf4\xcd\x76\xb3\xb1\xdd\x37\x71\x26\xdd\x7a\x07\xba\x53\x4d\x3d\x13\x90\x85\x8e\xa9\xb7\xd5\x47\x2b\xd3\x84\x81\xbe\x6d\x44\x4d\x17\xe0\x06\x08\x07\xff\xb4\xf9\x46\x62\x4f\x91\x7d\xc0\xff\x24\xe5\x4f\x40\xf7\xbe\x54\x1f\x90\xe6\x7d\xf8\x6b\xba\x13\x6a\x9c\x9a\x90\x6b\x68\xc7\x89\x3c\xcb\x10\xaf\xa9\xd8\x7e\x6b\xfd\x81\x7b\xa9\x6f\x88\x5b\x5c\x70\x1b\xaf\xb0\xdf\x5a\xc1\x7d\xfa\x63\x77\x46\xf5\x57\x06\xa3\x81\x43\xbd\x5f\xa0\x50\xef\xbc\xab\x37\xe9\xbe\x17\xea\xc3\x16\xea\x3d\x6e\xee\xb7\xf5\xde\x8b\xf7\xeb\x2c\xde\x59\xf2\x78\x45\xc5\x7b\x30\xfc\x32\x9c\x0e\xdb\x5e\xbf\x3d\xfd\x6f\xa4\x16\xd7\xef\xc6\xff\x73\xbd\xd7\xef\x7b\xea\xf7\x43\x4a\x77\xc6\xf2\x8e\xd2\x3d\xbc\x85\x79\x3b\x12\x45\x06\xf5\xf9\x13\x85\x29\x01\xa4\xd6\x7f\x01\x00\x00\xff\xff\xa4\x14\x65\x5b\xe4\x29\x00\x00")

func templateGfTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateGfTmpl,
		"template/gf.tmpl",
	)
}

func templateGfTmpl() (*asset, error) {
	bytes, err := templateGfTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/gf.tmpl", size: 10724, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/gf.tmpl": templateGfTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"gf.tmpl": &bintree{templateGfTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
