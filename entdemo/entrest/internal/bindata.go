// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/gf.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateGfTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6f\xdb\x38\x12\x7f\xb6\x01\xff\x0f\x3c\xc1\x2d\xa4\xc0\xa1\x71\xf7\xe8\x43\x1e\x72\xb5\xb7\x67\xa0\xd7\x7a\xeb\x74\xf7\xa1\x28\xb6\x5c\x6b\x24\xf3\x22\x51\x0e\x49\xa7\xe9\x19\xfa\xdf\x0f\xa4\x3e\xac\x0f\xca\x56\x52\xa7\xd5\xee\x5a\x2f\xb6\xc8\x99\xe1\xcc\x4f\xf3\x25\x52\x1b\xb2\xba\x25\x3e\x20\x60\x92\x83\x90\x83\xfe\xa0\xbf\xdb\xa1\xe1\x8a\x84\x10\xbc\x25\x21\xa0\xc9\x15\xd2\x37\x68\x88\xf5\x7d\x1c\x27\x14\x41\xf4\x05\x78\x46\xa1\x6f\x8a\x14\x83\x3e\x0d\x37\x11\x97\xc8\x1e\xf4\x7b\x16\x30\xe9\x42\x18\x8d\xd3\x45\xac\x41\x1f\x21\x84\x94\x14\x60\x72\x71\xeb\x2b\x11\x92\xd3\xf0\x3d\xf5\xd7\x72\x29\x95\xa4\xe5\x6a\x0d\x21\x41\xd6\x58\xe8\x3f\x96\x96\xaa\xb8\xac\x02\x5b\x1c\x5b\xa6\xc1\x71\x59\x3f\x4d\xa5\xd4\xf0\xa9\x5c\x6f\x7f\xc7\xab\x28\x1c\xfb\x91\xef\x8d\x7d\x6f\xec\x71\x12\xc2\xd8\xb7\x1a\xa6\x19\xc8\xb1\xbf\x96\x72\x93\xad\x63\xa0\x91\xf0\x20\xc7\xbe\x90\x5c\xaf\x92\x18\x76\x89\x86\x64\x43\xaf\x19\x8b\x24\x91\x34\x62\xca\xc0\x21\xde\xdf\x0b\x3c\x63\xf2\xfd\x6c\x79\x73\xbd\x98\xe7\x96\x29\x36\x4e\x98\x0f\x68\x18\x6a\x86\x92\x08\xfc\x1f\xea\xba\x01\x7c\x21\x1c\x44\xce\x92\xdb\x1e\xe2\xc5\xad\xbf\x20\x72\xbd\xc7\x44\x89\x03\xe6\x6a\x5a\x47\xa9\x36\x1e\x6b\xc8\xb3\x87\x84\xf0\xa0\x2f\xbf\x6e\xa0\x3c\x28\x24\xdf\xae\x24\xda\x25\x32\xe6\xd3\x64\x76\x3e\xc5\x37\x8a\x34\x8e\xd5\xfd\x17\x2a\xd7\x15\x73\x7e\xa2\x10\xb8\x02\x2f\x35\xf7\x0d\xf1\x31\x55\x0b\x7f\xde\xed\x10\x4e\x7f\x21\x10\x90\xfe\xd5\xf2\x72\xd2\x6c\x3e\x55\xb5\x82\x84\x97\x40\x97\xc8\x2f\xd9\xad\x51\x96\x44\x3b\xcf\xd0\x2b\xc9\xcb\x75\x94\xc4\x17\x75\xec\xab\xca\x16\x38\x28\x73\xe1\x21\xe5\x1b\x7a\x19\x2a\x4a\x67\xb5\xd2\x95\xb6\x26\x57\xb6\xa2\x75\xe6\xd3\x99\x2e\x7a\x99\x14\x32\xea\x69\x71\x34\x08\xc8\xef\x01\xfc\x42\x82\xad\x92\x7b\x51\x14\x35\xf4\x8a\x18\x53\x0f\xb1\x48\x6a\x61\xc0\x04\x95\xf4\x3e\x47\x4f\xee\x31\x4b\x31\xfd\xaf\x88\xd8\xc4\xba\xb4\x4c\x38\x36\xe0\x0a\x09\x2c\x33\xd7\x87\x2a\xac\x68\x43\xc4\x8a\x04\x68\x08\x05\xfb\x33\x7d\x00\x7f\x60\xf4\x6e\x0b\x71\x8c\x3e\x7e\xca\x97\xbb\x00\x26\xb1\x8e\x41\x6d\x43\xee\x4d\x4a\xa1\x0d\xa7\x4c\x7a\x28\x55\xf2\x85\x18\x45\x21\x95\x10\x6e\xe4\x57\xeb\x73\x61\x8d\xcf\x75\x95\xe3\xd4\x6b\xdf\x50\x21\x8b\x4e\xfa\x1e\xee\xb6\x20\x64\xee\xc0\x4d\xf3\x7b\x5f\xee\x2d\x88\x0f\x4b\xfa\x3f\x40\x88\x32\xa9\xd6\x49\xd5\xd9\xa4\xe3\x45\xa5\x52\xf2\x9b\xe8\x16\x98\x81\x5c\x8f\x57\xe8\x97\x2a\xd5\xe9\x4b\x48\x4e\x99\x9f\xd1\x8b\x88\xcb\x32\xe9\x1f\xdd\xbd\x2f\x1b\x3c\x73\x4f\x53\xa0\x1b\x92\x72\x06\xf4\x4c\x29\x30\x0b\x93\xb2\x04\xb3\x14\xbc\x04\xc2\x57\x6b\x15\x43\x46\x8e\xd3\x85\x60\x31\xd2\xcc\x9a\x55\xb1\xc9\xc7\x93\xa0\x34\x31\x3d\xaf\x62\x26\xa5\x4c\x19\xa0\x1a\x5e\xaf\xe1\x60\x74\x35\x4c\x3f\x4b\xa1\x40\xf7\x13\x8b\xc3\xdd\x96\x72\x70\xad\x63\x55\xa3\x4e\x5c\x31\xec\x15\x07\x22\xe1\x90\x6d\xcd\x14\x65\xf3\xfe\xf0\x11\xfb\x0d\x91\x68\x88\x42\x0d\x5b\x63\x10\x1a\x18\x7e\x21\x01\x75\x89\x3c\x14\xb4\x97\x99\x45\x59\xbd\x78\x21\xd4\x03\x7e\x21\x54\x95\x50\x33\xad\xe5\x35\x05\xe7\xe9\x62\xf0\x54\xf5\xf9\x68\xe4\x9a\x52\x49\xf7\x4c\x38\x94\x64\x50\xeb\xb6\xe3\xb2\xe6\xa4\x60\x72\x52\xc5\x6a\xf2\xf0\x88\x23\x9b\x8a\xb7\x34\x28\x8a\x71\x4a\x5e\xf3\x1a\xe4\xaf\x54\xb7\xc8\x75\xf8\xb3\xc0\x6d\xd9\xad\x1c\x0d\x91\xa3\x1e\x7a\x0a\x6f\x6f\x2e\x43\x4f\xe9\xe1\x1a\xfa\xb7\x7a\xb1\x69\x53\x54\x3e\x6c\xdc\x23\xb9\xb7\x99\xa2\xc3\xa5\x05\x9d\x8b\x41\xd5\xd3\xf5\x73\x3c\x17\x83\xef\x53\x0c\xf6\x2b\xcd\xc3\x70\x6b\x86\xbd\x7b\x66\x9d\x0b\xc4\xb9\x40\x54\x0b\xc4\x14\x02\x38\x5c\x20\x9a\x29\x3a\x5c\x20\xb4\x79\xde\x96\xad\x10\xb0\xd2\x7b\xd3\x3f\x38\x94\x77\x29\xec\xf2\x3e\x6b\x1c\xa3\x7c\x17\x25\x23\x71\xd0\x45\x69\x73\x6e\x37\xe8\xf7\x38\xc8\x2d\x67\xe8\x65\x71\x62\xb7\x87\x7e\x3e\x9d\xa0\xaa\x60\x3c\x9f\x8e\x06\xfd\x5e\xaf\x55\xe1\x6a\xca\x20\x06\xb1\x26\xb2\x51\xb3\x17\xb4\x8d\xf4\x6f\x8b\xf6\xd3\x44\x7c\xae\x43\x12\x26\xb3\x6c\xa3\xbb\x16\x35\xe6\xaa\x52\xe4\x32\x42\xa7\xad\xc6\x75\xd2\xd1\xe3\x5e\xe9\x7b\x87\x3c\x4e\xd4\x5c\x4e\xd4\x7c\x4e\xa0\x8f\x9f\x0c\x6e\xf7\xf1\x93\xc9\xf1\x2a\xc2\x14\x1e\x21\xb9\x05\xbb\x42\x3d\x42\x01\xb0\xfa\x4a\x8e\x33\xe8\xf7\xbc\x88\xa3\xdf\x46\x35\x3c\x94\xa8\xc4\x2d\xea\x0a\xaa\xb5\x0d\x8b\x5f\x21\xb2\xd9\x00\x73\xed\xda\xd4\xe8\xf1\xa1\xa7\x75\x8b\xf7\xd1\x55\x93\x59\x84\xb9\x3a\x39\x9f\x0a\x5b\x95\x00\x51\x85\x4d\xe1\x98\xee\x07\x2a\x23\xa8\x5b\x84\x2c\x99\x48\xb0\xd2\xdc\x45\x7c\xd4\xc0\x1e\x93\x44\xb8\xc6\x41\xc9\xc8\x2d\xa7\xae\x48\x48\xf1\x7c\x5a\x31\x80\xba\x25\x95\xdf\xc2\x97\xa2\x62\x4b\xe0\xf7\x74\x05\xff\x26\xcc\x0d\x80\xdb\xab\x80\x02\x93\x49\xfa\x79\xa5\xff\x8f\x94\x91\x9b\x74\x1e\x29\x11\x36\x47\x17\xfa\x24\x04\xa7\x49\x58\x93\x6c\x83\x84\x4d\x41\x82\xdf\xeb\x7b\xc7\xd1\x9a\x6a\x53\x7d\xac\x56\x02\x6e\x3b\xd5\xa3\x91\x05\x07\x8f\x3e\x28\x1a\x6b\x4c\x36\xd4\x2a\x95\x0a\x5d\x29\x4b\x67\x1f\x29\x79\xbd\x1f\xc8\x25\xd5\x8e\x4b\x2a\x2c\xc5\xa8\x49\x46\x04\xfe\x17\x65\xee\xfe\x54\xc5\x2e\x1c\xa9\xbc\x9e\xdd\x4c\x14\x60\x7b\xf9\xa6\x53\xa5\x91\x31\xaf\x3d\xe6\xec\xa6\x60\x31\x61\x2e\xb2\x55\xc6\x82\x3b\x34\x0c\x15\xca\xba\x98\x59\x96\x53\x1b\x0a\xa8\x90\x96\xe3\x20\x9b\xa9\xe5\xf0\xab\xc8\x4d\xe8\x9a\xb2\x51\x4a\xf2\xe8\xec\x92\x8d\x19\x9f\xbf\x83\x76\x65\x69\xf7\x84\x23\x0e\x77\x4d\xbb\xf1\x65\x62\xea\x21\xe0\x5c\xbb\x38\x5e\x10\x2e\xc0\x7e\xc9\xe1\xce\xf9\xa7\x1e\xfd\xdb\x15\x62\x34\xa8\xca\x57\x57\xc1\x2b\x6d\x3e\x42\x2f\xcb\xae\x67\x60\x50\xd7\x8c\xf3\x88\x2b\xe4\x26\xd9\x29\x27\xd6\x43\x0b\xc2\x49\x08\x12\xb8\xf2\x83\xd1\x01\xde\x89\xfe\x0b\x9c\x1b\x88\x62\xa7\x3c\x96\xbb\x57\xf1\x01\x94\x12\xda\x28\xb3\x3c\x09\xbb\x52\xe6\xc5\xf5\x05\x7e\xde\x02\xff\x6a\x3b\x86\x99\xb6\xb5\xb4\x48\xff\xf4\x9a\x5a\x94\xd2\xae\xb6\x6a\xcd\x1b\xab\x6b\x76\x29\x02\x53\x3b\x6a\x34\x19\x1d\x7d\xa3\x6b\x9e\x7b\x43\x43\x2a\x6d\x0e\x77\x38\x3b\x0c\x32\xad\xf0\xce\xf3\x04\x48\x3b\xa7\x4b\x4e\x81\x2e\xd1\xdf\x1d\x74\x81\x8e\x31\x5f\x07\x81\xcd\xf1\xab\x88\x49\x78\x90\xb6\xe3\x18\x7d\xfe\x3b\x79\xb7\x0a\xc3\x67\x73\x6a\x95\xc7\x26\x57\x4f\x6a\x38\x9c\x9a\xa4\xc7\xd9\x3c\x25\x92\x4c\x12\x46\x83\xe6\x73\xa1\xec\x9e\x20\xc9\xb7\x50\x99\x2e\x1a\x95\x65\x42\xe7\x64\xc5\x60\xbc\xa3\xee\x8f\xab\x08\x3e\x74\xb8\x20\x98\x0f\x90\xce\xf5\x20\xeb\x96\x9f\x58\x0e\x7a\xbd\x5e\xef\xd7\x35\x68\x5f\x55\xff\x7b\x55\x97\xc4\xf3\xe9\xec\x67\x9d\xc8\xe6\x53\x67\x94\x10\x65\x8c\x5d\xaf\x1d\x87\xde\xcb\xb2\xeb\xd9\x2a\x87\x02\xe8\x27\xca\x85\xec\x4c\x32\x7f\x0d\xdf\x3b\x97\xb7\x78\x67\x3a\x49\x22\xaf\xa7\xf1\xc6\x3c\xdd\x3b\x94\xa4\x17\xef\x96\x5d\x6e\xd9\x57\xfa\xa0\xb9\xbb\x39\xba\xf1\x20\xfc\xaf\x9a\xa6\x95\x5f\x3e\x2e\x33\x27\x10\x1e\xeb\xd4\x0f\x6f\xbc\x15\x19\xbe\xfd\xfb\x99\x66\x69\x47\x4e\xf0\x4d\xcc\xf5\x93\x83\xc3\x7c\xea\x5a\x82\xcc\x98\x4c\x7b\x85\xba\x36\x99\x26\x9a\x12\x78\x51\xa7\xc6\xcf\x6c\x0c\x4a\x9c\x7e\xf1\x86\x2a\xd2\x96\xa6\x95\x01\x4f\x45\xfe\x39\x50\x6f\x8d\xf8\x29\xd1\x6e\x85\xe2\x13\xde\x04\xff\x0c\xcd\x8f\xd6\x09\x5c\x1f\x12\x20\xdb\x6d\x4d\x57\x54\xc9\xcf\x79\xda\x3e\xd5\xfd\x7a\x71\x3c\x9f\xe6\xcf\xb4\x38\xac\x7a\xcd\x53\xf8\xd1\xb5\xeb\xd6\x8f\x9b\xe6\x53\x91\x6f\xf7\x9a\x66\xea\xea\x38\x18\xe3\x1f\xe1\x62\x4b\x72\x0f\x9d\xe9\x1e\x93\xca\x74\xc2\x52\xf9\x4d\x9a\x9e\xb8\xef\xfb\xd0\xf9\x97\xf3\xad\xfe\xd0\xa5\xbb\xbd\x5f\xe3\x87\x38\xe7\xde\xaf\x6d\xef\x97\x40\xf8\x8e\x41\x9a\x15\xcd\x49\xb0\x7b\x6d\xe0\xe1\x6f\x77\x4c\xcc\xe7\x36\xb0\xb8\xf8\xa9\xda\xc0\x36\x9f\xf5\x54\x19\xcf\xad\xe1\xb9\x35\x6c\xc4\xe6\xdc\x1a\x9e\x5b\xc3\xe2\xd5\x54\x50\x93\xc2\xf5\xe7\x6c\x0d\xa7\xb3\x37\xb3\x9b\x59\xd7\xbb\x43\x57\x7f\xe5\xd6\xdd\xee\xb0\xf1\x2b\xbc\xbf\x6a\x77\x98\x7e\xc6\xe3\x0b\xc9\xf1\x72\x13\x50\x79\xcd\xdc\x1b\x4e\xc3\xe5\x86\xac\x20\xed\xfe\x46\xc8\x1a\x59\x15\x41\xbf\x3d\xb2\xa7\x4c\x80\x37\xee\x27\x66\xc7\x3e\x26\x03\x0d\xa7\x40\x73\x66\x53\x57\xa8\x74\x67\xb0\xd7\x24\x7f\xf6\x00\xab\xce\xa4\xa8\x04\x87\x1f\x93\xa2\x1a\x12\x4f\x3c\xe8\xff\x3f\x00\x00\xff\xff\x93\xbf\x35\x67\x38\x3f\x00\x00")

func templateGfTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateGfTmpl,
		"template/gf.tmpl",
	)
}

func templateGfTmpl() (*asset, error) {
	bytes, err := templateGfTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/gf.tmpl", size: 16184, mode: os.FileMode(438), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/gf.tmpl": templateGfTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"gf.tmpl": &bintree{templateGfTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
