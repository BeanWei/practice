// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/gf.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateGfTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xdf\x73\xda\xb8\x13\x7f\x8e\xff\x8a\xfd\x7a\x68\xc7\xce\x10\x31\xdf\x57\x6e\xfa\xd0\x0b\x5c\x8e\x99\x5c\xc2\x05\xda\x67\x54\xbc\x76\x74\x31\x32\xc8\x22\x3f\x8e\xf1\xff\x7e\x23\x19\x83\x8d\x65\x97\x34\xb4\x71\x1b\xf4\x12\x2c\xed\xae\x57\x1f\xed\x67\xd7\xab\xcc\xe9\xf4\x8e\x06\x08\xc8\xa5\xc0\x58\x5a\x16\x9b\xcd\x23\x21\xc1\xb1\x4e\x6c\xe4\xd2\xc3\x59\xd4\x41\x2e\xed\xe2\xa3\x12\xb5\x2d\xeb\xc4\x0e\x98\xbc\x5d\x7e\x21\xd3\x68\xd6\x09\xa2\xc0\xef\x04\x7e\xc7\x17\x74\x86\x9d\xc0\x36\xaf\x72\x94\x9d\xe0\x56\xca\xb9\x6d\x59\x00\x00\xab\xd5\x19\xb4\xe8\x9c\x7d\xe4\x3c\x92\x54\xb2\x88\x43\xf7\x03\xb4\xc8\xf6\x39\x26\x7d\x2e\x6f\xfa\xa3\xf1\xc7\xe1\x00\x92\x64\xa3\x25\x28\x0f\x10\x5a\x33\x2d\x5f\xb0\x40\xfe\x62\x9e\x17\xe2\x03\x15\x18\x67\x1a\x6a\xd8\xab\x15\xb4\x66\x64\x78\x17\x0c\xa9\xbc\x85\x24\xb1\x37\xc6\x90\x7b\x4a\xd2\xb5\xac\x4e\x07\x2e\x59\x2c\x95\x28\xb9\xa2\x33\x84\x24\xb9\xc1\xc5\x12\x63\x09\xc4\x92\x4f\x73\xac\x5c\x8e\xa5\x58\x4e\x25\xac\xac\x93\x21\x0d\x70\xc4\xfe\x45\x00\xc6\xa5\x7a\xc5\xe4\x9f\x38\xe2\x5d\x7b\xbe\x9e\x6f\x47\x33\x26\x71\x36\x97\x4f\xf6\x24\x95\x1e\x47\x77\xc8\x0d\xd2\x7a\xbe\x28\x3e\x52\xc7\xa3\x47\x2c\x05\xe3\x41\x26\x1e\x47\x42\x16\x24\x77\x80\xf2\x53\x60\xff\x60\x18\x7a\x05\x58\xf4\x11\x48\x1a\xe8\x75\x9f\x8c\xf4\x36\xc6\x34\x80\x24\x59\xad\xe0\x81\xc9\x5b\xbd\x1c\x97\x0f\x26\xb5\x65\xd4\x60\xdc\xc3\xc7\xb5\x5e\xcb\xcf\xa0\x52\xb0\xa9\x37\x7d\x00\x92\x3e\xa5\xb8\x6f\x7e\x14\x7c\x62\x3e\xf0\x48\x6a\x97\x90\xc7\x4c\xb2\x7b\xcc\x8b\xe4\xc4\x5a\xb4\x18\x3d\xbe\x29\x7c\xb4\xb3\xbb\x06\xcc\x46\xc8\x08\xa9\x98\xde\xd2\x2f\x61\xe9\x8d\x5b\xa5\x2d\x56\x99\x65\x35\xa9\x0c\xf9\xe4\x8a\x85\xa1\xd2\xfe\x4c\xc3\xa5\x32\x71\x9a\xdf\x6a\xcb\x27\x63\x15\x47\x49\x02\x93\x0c\x90\x24\x99\x18\xfd\xda\x81\x65\x33\x1d\xc6\x46\xcf\xbe\xb3\x57\x06\x8f\x76\xa6\x72\x8f\x89\xe6\xd2\x05\xd6\x51\xa9\x62\x75\xc3\x24\x65\x72\xd0\xd3\xdb\x22\x83\xde\xc6\xc1\x4d\x58\xd6\x46\x23\x61\xca\x0f\xb5\x19\xb2\xfe\xbb\x86\x6d\x92\xd9\xcb\x07\xee\x64\x1b\x84\xa9\xe7\xe7\x02\xa9\xc4\x1a\xe7\xab\x05\x0a\xfe\xff\xe4\x14\xfc\x76\x6e\x19\x78\xa5\x21\xab\xa2\x55\x8e\xf3\x0e\x8b\xaf\x58\x58\x50\xfd\x4c\x43\xe6\x51\x89\x6e\x35\x23\xcf\xb2\x9d\xcd\x05\xe3\xd2\x87\xc9\xbb\x18\xee\xbb\xf6\xbb\xd8\x9e\xa4\x2b\x26\x7b\x55\x9e\x18\x98\x77\x38\x86\xa5\x0a\x86\xec\x96\xa7\x5e\x2e\x60\xd3\x0c\x7f\x66\x4f\xca\xc7\x54\xc7\x4b\x43\x96\x68\x9c\xff\x5f\x4b\x20\x9f\xe6\x5e\x3d\x0d\xab\x05\x8e\x34\xac\xa0\xa1\x86\xec\x48\xc3\x23\x0d\xf7\xa7\x61\x0f\x43\xac\xa5\x61\xb5\xc0\xeb\x57\x73\x7f\xc9\xa7\x70\x85\x0f\x79\xef\x46\x28\xee\xd9\x14\xff\xa4\xdc\x0b\x51\x38\xd3\x90\x21\x97\x70\x8a\x5c\x92\x73\xfd\xbb\x0d\x02\xe3\xf9\x7a\x1d\x94\x09\x47\xc0\xa9\xee\x5d\xc8\x7a\x6b\x5a\x64\x19\xa6\x6a\xaa\x27\x22\x37\xfa\xd9\x75\x55\x17\xa0\xd3\x44\x40\xd4\x8b\x50\x38\x6e\xb1\xdf\x19\x0a\xf4\xd9\xa3\x92\xb0\x3b\x74\xce\xec\x3c\xf0\xbb\xec\x2b\xf4\x36\xa9\xa2\x5b\x4a\x5b\x5b\x9b\xa5\x76\x68\x3d\x5f\x3e\x5a\xfd\x1c\x93\xdf\x19\xf7\xb6\x2d\x93\xb3\xed\x97\x2e\xfa\xe3\xae\xc2\x6c\x6b\x3b\x49\x3a\xab\x15\xc4\x9c\xde\xe1\x16\x4a\xbb\x5d\x70\xe5\xf9\x8d\x59\x6e\xe3\x94\x7b\xe0\x44\x02\x1c\x5c\xa8\x5e\xed\x06\x17\x3a\x4c\x6c\xdb\x2d\x4d\x85\x2c\x96\xb6\xeb\x82\x93\x07\x6b\x46\xce\x23\x0f\x5d\x63\x7a\x4a\xdb\x3f\xb5\x0e\x49\xd2\x7e\xe6\x97\xad\x1a\xc6\x20\x70\xd7\x91\x9d\x8d\x7b\x2a\x40\xe0\xa2\xaa\x4d\x2c\xc8\x32\x1f\x50\x08\x05\x94\x20\x43\x2a\x62\x74\xde\x0b\x5c\xb8\xbf\xe9\xd9\xff\x7d\x00\xce\xc2\x1d\xeb\x6a\xe4\xe2\xd2\x11\x6d\x78\x5f\x0c\xbe\xb2\xbc\x1a\x7d\x21\x22\xa1\x70\xeb\x66\xad\x3e\xd1\x53\x43\xaa\xda\x75\x89\x42\x05\x41\xbb\x5a\xb5\xab\x7f\xa2\x10\x65\x99\xc4\x2d\x4c\xad\xc3\x2a\xe7\x6c\x3b\xdb\x64\x4a\x32\x92\x47\x85\x94\xcc\xfd\xbd\x44\xf1\xe4\xb8\xe5\x85\x4b\x36\x63\xd2\x11\xb8\x20\x59\x7f\x6d\x10\xba\xf6\xfd\x18\xa5\xb3\x11\x4b\x1b\xeb\x33\xf8\xbf\x0b\xa7\xf0\x15\xdd\x8f\x61\xe8\x08\x72\x1e\x71\x89\x8f\xd2\x71\x5d\xd3\x51\xfd\x90\x43\x51\xa1\x73\xa0\xb3\x78\x89\x8b\x3d\x2a\x69\x77\x7d\x84\xa5\xc5\x41\xac\xbc\xec\x82\x14\x4b\x2c\xae\xe6\x7c\x58\xb3\xcc\x3d\x54\xa6\xe9\xac\x98\xf7\x5a\xe9\x26\xc0\x26\x67\x1b\x73\x27\xfd\xd6\x92\x0d\xf3\xd2\xed\x5d\xa0\x1c\x70\xe9\xd8\xcc\xb3\xdd\x97\x65\xa3\x0b\x94\xf9\x9c\xd0\x06\xe6\xbd\x5e\x5e\xb8\xc0\xe6\xa4\x85\x52\x52\x30\xd2\xfe\xa4\x86\xf3\xc3\xeb\x51\x93\x3f\x2f\xa6\xfa\x7a\xa7\xc1\x94\xaf\xbc\x7f\x7a\x6b\xac\x7f\x36\xa9\x53\xe4\x4c\xdf\x18\xfb\xdc\x12\xec\xca\xbf\xf8\x02\xba\xda\x58\xfd\x85\x99\x49\xb7\xdc\x3c\xd6\xaa\xa9\x31\x42\x99\xe9\x98\xda\x52\xfd\x29\x65\x5a\x30\xc0\xb7\xeb\x51\xd5\x3d\xb5\xc1\x85\x83\xbf\xda\x7c\x71\xb0\xa7\xc8\x3e\xce\x7f\x23\xe4\xdf\x01\xee\x7d\xa1\x3e\x20\xcc\xfb\xe0\x57\x75\x75\x53\xb9\x34\xa2\xf7\xd8\x8c\x2f\xf0\x34\x43\xfc\x4a\xc5\xf6\x53\xe3\x3f\xb0\x97\xfa\x22\xb7\xc1\x05\xb7\xf2\xa6\xf9\xad\x15\xdc\xc3\x7f\x66\xa7\xd0\x5e\x73\x1c\xf4\x1c\xe6\xfd\x04\x85\xb9\xf6\x0a\xdd\xa4\x7b\x2c\xcc\xc7\xc2\x5c\xf7\xea\x63\x61\x2e\x8c\xaa\xdc\x96\x26\x8a\x5f\xa8\x30\xf7\xfa\x97\xfd\x71\xbf\xe9\xb5\xd9\xd3\xff\xdd\x69\x70\x6d\xae\xfc\xf7\xd3\xb1\x36\xef\xd4\xe6\xe7\x94\xe5\x14\xd5\x9a\xb2\xdc\x7f\xc4\x69\x33\x12\x43\xea\xea\x8f\x4f\x0c\x26\xc2\x27\xd6\x7f\x01\x00\x00\xff\xff\xcb\x06\xf4\xae\x57\x29\x00\x00")

func templateGfTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateGfTmpl,
		"template/gf.tmpl",
	)
}

func templateGfTmpl() (*asset, error) {
	bytes, err := templateGfTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/gf.tmpl", size: 10583, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/gf.tmpl": templateGfTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"gf.tmpl": &bintree{templateGfTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
