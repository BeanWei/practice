// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/gf.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateGfTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x93\xda\x38\x12\x7f\x86\x2a\xbe\x83\xce\xc5\xa6\xec\x29\x46\xd4\xdd\x23\x57\xf3\x90\x0b\x6c\x8e\xaa\x5c\xc2\x86\xc9\xee\x43\x2a\x75\xd1\xe2\xb6\x47\x37\xb6\xcc\x48\x62\x92\x1c\xe5\xef\xbe\x25\xf9\x0f\xb2\x2d\x33\x66\x42\x12\x92\xe0\x17\xb0\xd4\xdd\xea\xfe\xb9\xff\x59\xf2\x9a\xac\x6e\x49\x08\x08\x98\xe4\x20\xe4\xa0\x3f\xe8\x6f\xb7\x68\xb8\x22\x31\x44\x2f\x49\x0c\x68\x72\x85\xf4\x0d\x1a\x62\x7d\x9f\xa6\x19\x45\x94\x7c\x00\x5e\x50\xe8\x1b\x93\x62\xd0\xa7\xf1\x3a\xe1\x12\xb9\x83\x7e\xcf\x01\x26\x7d\x88\x93\x71\xbe\x88\x33\xe8\x23\x84\x90\x92\x02\x4c\x2e\x6e\x43\x25\x42\x72\x1a\xbf\xa6\xe1\x8d\x5c\x4a\x25\x69\xb9\xba\x81\x98\x20\x67\x2c\xf4\x1f\x47\x4b\x55\x5c\x8e\xc1\x96\xa6\x8e\x6d\x70\x5c\xd5\x4f\x53\x29\x35\x42\x2a\x6f\x36\x7f\xe2\x55\x12\x8f\xc3\x24\x0c\xc6\x61\x30\x0e\x38\x89\x61\x1c\x3a\x2d\xd3\x0c\xe4\x38\xbc\x91\x72\xad\x25\x64\x4a\x5f\xa2\x21\x59\xd3\xa7\x8c\x25\x92\x48\x9a\x30\xa5\xfc\x10\xef\xee\x05\x9e\x31\xf9\x7a\xb6\xbc\x7e\xba\x98\x97\x5a\x2b\x36\x4e\x58\x08\x68\x18\x6b\x86\x8a\x08\xfc\x1f\xea\xfb\x11\x7c\x20\x1c\x44\xc9\x52\xda\x15\xe3\xc5\x6d\xb8\x20\xf2\x66\x67\xaf\x12\x07\xcc\xd7\xb4\x9e\x52\x6d\x3c\xd6\x70\x16\x0f\x00\xe1\x41\x5f\x7e\x5a\x43\x75\x50\x48\xbe\x59\x49\xb4\xcd\x64\xcc\xa7\xd9\xec\x7c\x8a\xaf\x15\x69\x9a\xaa\xfb\x0f\x54\xde\xd4\xcc\xf9\x95\x42\xe4\x0b\xbc\xd4\xdc\xd7\x24\xc4\x54\x2d\xfc\x7e\xbb\x45\x38\xff\x85\x48\x40\xfe\x57\xcb\x2b\x49\x8b\xf9\x5c\xd5\x1a\x12\x41\x06\x5d\x26\xbf\x62\xb7\x46\x59\x12\xed\x18\xc3\xa0\x22\xaf\xd4\x51\x92\x50\x34\xb1\xaf\x2b\x6b\x70\x50\xe6\xc3\xc7\x9c\x6f\x18\x14\xa8\x28\x9d\xd5\x4a\x57\xda\x9a\x52\xd9\x9a\xd6\x85\xbf\x16\xba\xe8\x65\x72\xc8\x68\xa0\xc5\xd1\x28\x22\x7f\x46\xf0\x3b\x89\x36\x4a\xee\x85\x29\x6a\x18\x98\x18\xd3\x00\xb1\x44\x6a\x61\xc0\x04\x95\xf4\xbe\x44\x4f\xee\x30\xcb\x31\xfd\x9f\x48\xd8\xc4\xb9\x74\x6c\x38\xb6\xe0\x0a\x19\x2c\x33\x3f\x84\x3a\xac\x68\x4d\xc4\x8a\x44\x68\x08\x86\xfd\x85\x3e\x80\xdf\x30\x7a\xb7\x81\x34\x45\x6f\xdf\x95\xcb\x5d\x00\x93\x58\xc7\x97\xb6\xa1\xf4\x26\xa5\xd0\x9a\x53\x26\x03\x94\x2b\xf9\x8b\x18\x25\x31\x95\x10\xaf\xe5\x27\xe7\xbd\xb1\xc6\xfb\xa6\xca\x69\xee\xb5\x2f\xa8\x90\xa6\x93\xbe\x86\xbb\x0d\x08\x59\x3a\x70\xdb\xfc\xce\x97\x7b\x0b\x12\xc2\x92\xfe\x1f\x10\xa2\x4c\xaa\x75\x72\x75\xd6\xf9\xb8\xa9\x54\x4e\x7e\x9d\xdc\x02\xb3\x90\xeb\xf1\x1a\xfd\x52\xa5\x31\x7d\x09\xc9\x29\x0b\x0b\x7a\x91\x70\x59\x25\xfd\xde\xdd\xfb\xb2\xc5\x33\x77\x34\x06\xdd\x90\x54\x33\x60\x60\x4b\x81\x45\x98\x54\x25\xd8\xa5\xe0\x25\x10\xbe\xba\x51\x31\x64\xe5\x38\x5e\x08\x9a\x91\x66\xd7\xac\x8e\x4d\x39\x9e\x05\xa5\x8d\xe9\xcb\x2a\x66\x53\xca\x96\x01\xea\xe1\xf5\x1c\xf6\x46\x57\xcb\xf4\x37\x2f\x14\x85\xfa\xcf\x38\x10\x09\xfb\x2c\x68\xa7\xa8\x1a\xf1\xdd\xc7\xe5\x67\xc4\x9b\x25\xd6\x34\x6c\xad\xa1\x66\x61\xf8\x9d\x44\xd4\x27\x72\x5f\x68\x5e\x16\x16\x15\x55\xe1\x17\x81\xee\x55\x55\x50\xb5\x40\xcd\x74\x96\xd7\x16\x82\xc7\x8b\xb4\x63\x55\xe1\x07\xe3\xd3\x96\x30\x4e\xcf\x84\x7d\xa9\x04\x75\x6e\x2e\x2e\x1b\x4e\x0a\x36\x27\x55\xac\x36\x0f\x4f\x38\x72\xa9\x78\x49\x23\x53\x8c\x57\xf1\x9a\xe7\x20\xff\xa0\xba\x11\x6e\xc2\x5f\x04\x6e\xc7\x9e\xe4\xc1\x10\x79\xd0\x43\x8f\xe1\xed\xed\xc5\xe6\x31\x9d\x5a\x4b\x97\xd6\x2c\x29\x5d\x4a\xc7\x9b\xb5\xff\x40\xee\x6d\xa7\x38\xe7\xde\x3d\x8e\xa5\x61\x3b\xe7\xde\xaf\x93\x7b\x77\x2b\xcd\xe3\x78\x63\x87\xfd\xf4\xcc\x3a\xe7\xe3\x73\x3e\xae\xe7\xe3\x29\x44\xb0\x3f\x1f\xb7\x53\x9c\x46\x43\x1f\x6c\xd8\x0a\x01\xab\xbc\x72\xfc\x83\x43\xf5\x05\xdf\xad\x6e\x3f\xa6\x29\x2a\x37\x20\x0a\x12\x0f\x5d\x54\xf6\xb5\xb6\x83\x7e\x8f\x83\xdc\x70\x86\x9e\x98\x13\xdb\x1d\xc0\xf3\xe9\x04\xd5\x05\xe3\xf9\x74\x34\xe8\xf7\x7a\x9d\xca\x53\x5b\x9e\xb0\x88\xb5\x91\x8d\xda\x9f\x75\xd7\x78\xfe\xbc\x98\x3e\x4e\x5c\x97\x3a\x64\xc1\x30\x2b\xf6\x7f\x1b\xb1\x61\xaf\x1d\x26\x97\x15\x3a\x6d\x35\x6e\x92\x8e\x0e\x7b\x1b\xee\xed\xf3\x38\xd1\x70\x39\xd1\xf0\x39\x81\xde\xbe\xb3\xb8\xdd\xdb\x77\x36\xc7\xab\x09\x53\x78\xc4\xe4\x16\xdc\x1a\xf5\x08\x45\xc0\x9a\x2b\x79\xde\xa0\xdf\x0b\x12\x8e\xfe\x3b\x6a\xe0\xa1\x44\x65\x6e\xd1\x54\x50\xad\x6d\x59\xfc\x0a\x91\xf5\x1a\x98\xef\x36\xa6\x46\x87\x87\x9e\xd6\x2d\xdd\x45\x57\x43\xa6\x09\x73\x7d\x72\x3e\x15\xae\x4a\xf4\xa2\x0e\x9b\xc2\x31\xdf\x4a\x53\x46\x50\xdf\x84\x2c\x9b\xc8\xb0\xd2\xdc\x26\x3e\x6a\x60\x87\x49\x26\x5c\xe3\xa0\x64\x94\x96\x53\x5f\x64\xa4\x78\x3e\xad\x19\x40\xfd\x8a\xca\x2f\xe1\x83\xa9\xd8\x12\xf8\x3d\x5d\xc1\xbf\x09\xf3\x23\xe0\xee\x2a\xa2\xc0\x64\x96\x7e\x9e\xe9\xff\x23\x65\xe4\x3a\x9f\x47\x4a\x84\xcb\xd1\x85\x3e\x20\xc0\x79\xaa\xd5\x24\x9b\x28\x63\x53\x90\xe0\xd7\xfa\xde\xf3\xb4\xa6\xda\xd4\x10\xab\x95\x80\xbb\x5e\xfd\x54\x61\xc1\x21\xa0\x1f\x15\x8d\x33\x26\x6b\xea\x54\x0a\x82\xae\x87\x95\x63\x83\x9c\xbc\x59\xf5\x4b\x49\x8d\x93\x86\x1a\x8b\x19\x35\x86\x2a\xd4\x57\x85\x61\x91\x45\xb5\x11\xdf\x45\xc9\x50\xd9\x4d\x3d\xbf\x1d\x9b\xc0\xff\xa2\xcc\xdf\x9d\x63\xb8\xc6\x21\xc6\xf3\xd9\xf5\x44\xe1\xbc\x53\x2b\x3b\xa3\x11\x8c\xdc\xc2\x0e\x7e\x67\x64\x4d\x88\x87\x9c\x97\x18\x50\x11\xe6\x23\x57\xa5\x3a\xb8\x43\xc3\x58\x3d\x1e\x5d\xeb\x1c\xc7\x6b\x0c\x45\x54\x48\xc7\xf3\x90\xcb\xd4\x72\xf8\x59\xe2\x67\x74\x6d\x69\x2c\x27\x39\x38\x2d\x15\x63\x56\xc7\xf1\xd0\xb6\x2a\xed\x9e\x70\xc4\xe1\xae\x6d\x07\xbc\x4a\x4c\x03\x04\x9c\xeb\xd8\xc0\x0b\xc2\x05\xb8\x4f\x38\xdc\x79\xff\xd4\xa3\x7f\xbb\x42\x8c\x46\x75\xf9\xea\x32\xdc\xd9\xe5\x23\xf4\xa4\xea\xb3\x16\x06\x75\xcd\x38\x4f\xb8\x42\x6e\x52\x9c\x1a\x62\x3d\xb4\x20\x9c\xc4\x20\x81\x2b\x4f\x18\xed\xe1\x9d\xe8\xbf\xc0\xb9\x85\x28\xf5\xaa\x63\xa5\x83\x99\x0f\xa0\x92\x09\x47\x85\xe5\x59\xbc\x56\x52\x36\x6e\x2e\xf0\xdb\x06\xf8\x27\xd7\xb3\xcc\x74\x2d\xc2\x26\xfd\xe3\x8b\xb1\x29\xa5\x5b\x51\xd6\x9a\xb7\x96\xe5\xe2\x52\x04\xb6\x6e\xd5\x6a\x32\x7a\xf0\x85\xaf\x7d\xee\x05\x8d\xa9\x74\x39\xdc\xe1\xe2\x00\xc6\xb6\xc2\xab\x20\x10\x20\xdd\x92\x2e\x3b\x79\xb9\x44\x7f\xf7\xd0\x05\x7a\x88\xf9\x69\x14\xb9\x1c\x3f\x4b\x98\x84\x8f\xd2\xf5\x3c\xab\xcf\x7f\x25\xef\x56\x61\xf8\xc5\x9c\x5a\xe5\xb1\xc9\xd5\xa3\x3a\x15\xaf\x21\xe9\x30\x9b\xa7\x44\x92\x49\xc6\x68\xd1\x7c\x2e\x94\xdd\x13\x24\xf9\x06\x6a\xd3\xa6\x51\x45\x26\xf4\x8e\x58\x0e\xc6\x5b\xea\x7f\xbb\x9a\x10\xc2\x09\x97\x04\xfb\xb1\xcd\xcf\x5a\x11\xa8\x9f\x59\x99\xa3\x52\xe9\x5d\xd2\xd4\x75\xa8\xef\x78\xfb\x6b\xc8\xa3\x4b\x48\xaf\xd7\xeb\xfd\x71\x03\xda\xbf\xd5\xff\x5e\xfd\xcb\x13\x3c\x9f\xce\x7e\x73\xa9\xef\x8d\x32\x82\x82\xe9\xd4\x6b\xcd\xbe\x17\xc0\xe2\xfa\x62\x95\x46\x01\xf4\x2b\xe5\x42\x9e\x4c\xf2\x7f\x0e\x5f\x3b\xf7\x77\x78\x39\x3b\x4a\xe2\x6f\xa6\xfd\xd6\xbc\xde\xdb\x97\xd4\x17\xaf\x96\xa7\xdd\xe4\xaf\xf4\x41\xf1\xe9\xe6\xf4\xd6\x83\xec\x9f\x35\xad\x2b\xcf\x3c\x2c\x2f\x67\x10\x3e\xd4\xdb\xef\xdf\xe3\x33\x19\x3e\xff\x2b\x97\x76\x69\x0f\x9c\xc0\xdb\x98\x9b\x47\x11\xfb\xf9\xd4\xb5\x04\x59\x30\xd9\xb6\x25\x75\x5b\x6e\x9b\x68\x4b\xe1\xa6\x4e\xad\x1f\xc3\x58\x94\x38\xfe\xe2\x2d\x75\xa4\x2b\x4d\x27\x03\x1e\x8b\xfc\x97\x40\xbd\x33\xe2\xc7\x44\xbb\x13\x8a\x8f\x78\x77\xfc\x11\xda\x1f\xad\x13\xf8\x21\x64\x40\x76\xdb\x05\xaf\xa9\x52\x1e\x1c\x75\x7d\xaa\xbb\xf5\xd2\x74\x3e\x2d\x9f\xa9\x39\x8c\xe7\xd3\xa3\xf8\xd1\x53\xdf\x6f\x9e\x5f\xcd\xa7\xa2\xdc\x59\xb6\xcd\x34\xd5\xf1\x30\xc6\xdf\xc2\xc5\x96\xe4\x1e\x4e\xa6\x7f\xcc\x2a\xd3\x11\x4b\xe5\x67\x69\x7a\xe4\xce\xef\xcd\x77\xf0\x3a\xbf\xd1\x9f\xaa\x9c\x6e\xf7\xd7\xfa\x29\xcd\xcf\xda\xfd\x1d\xfe\x52\x7f\x78\xbf\x98\x81\xfe\x8a\xc1\x7c\xaa\x5e\xd1\xbf\x8b\xb6\x71\xff\xc7\x43\x36\xe6\x73\xdb\x68\x2e\x7e\xac\xb6\xb1\xcb\x77\x45\x75\xc6\x73\x2b\x79\x6e\x25\x5b\xb1\x39\xb7\x92\xe7\x56\xd2\xbc\xda\xca\x6f\x56\xb4\x7e\xcc\x56\x72\x3a\x7b\x31\xbb\x9e\x9d\x7e\x37\xe9\xeb\x0f\xed\x4e\xb7\x9b\x6c\xfd\x10\xf0\xdc\x4d\x76\xed\x26\x0f\x6a\x24\x33\xbc\xf7\x35\x92\xb3\x8f\xb0\x3a\x99\x14\x92\xa9\xfb\x6d\x52\x48\x4b\x62\x48\x07\xfd\xbf\x02\x00\x00\xff\xff\x78\x49\x32\xd5\x8a\x3e\x00\x00")

func templateGfTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateGfTmpl,
		"template/gf.tmpl",
	)
}

func templateGfTmpl() (*asset, error) {
	bytes, err := templateGfTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/gf.tmpl", size: 16010, mode: os.FileMode(438), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/gf.tmpl": templateGfTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"gf.tmpl": &bintree{templateGfTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
