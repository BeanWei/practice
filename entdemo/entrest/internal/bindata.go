// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/gf.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateGfTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdd\x6f\xdb\x38\x12\x7f\xb6\xfe\x8a\x39\xc3\x2d\xa4\xc0\x91\xf7\xee\xd1\x87\x1c\x90\x8b\xbd\x5d\x03\xbd\x24\x5b\xbb\xbb\x0f\x45\xd1\xb0\xd6\x48\xe1\x45\xa6\x1c\x8a\x4e\xd3\x33\xf4\xbf\x1f\x48\x7d\x58\x1f\x94\x2c\xa7\x4e\xeb\x6c\xad\x97\xc6\xe4\xcc\x70\xe6\xa7\xf9\xe0\x90\xea\x7a\x0d\x5f\xa8\xb8\x85\x9e\xfd\x1b\x12\x07\x39\x44\xd1\x7a\x0d\x76\xfc\x0f\xfa\x21\x42\x14\x0d\x06\x70\x11\x38\x08\x1e\x32\xe4\x44\xa0\x03\x9f\xbf\x02\x32\x31\xef\xc3\xe8\x0a\x2e\xaf\x66\x30\x1e\x4d\x66\xb6\x64\x60\x0e\x44\x91\x61\x2c\xc9\xfc\x8e\x78\x28\x89\x38\x86\xc2\x30\xd6\x6b\xe8\xcd\xc9\x02\xfd\x4b\xb2\x40\x18\x9e\x81\xfa\x01\x3d\x5b\xfd\x96\x2c\x74\xb1\x0c\xb8\x00\xd3\xe8\x74\x91\x09\x07\x17\xc1\x20\xe1\xee\x1a\x00\x00\x5d\x29\xc2\xbe\x08\x98\x4b\x3d\xfb\x3a\x91\x1f\x45\x8d\x93\x03\x35\x9c\x27\x36\x3a\x5d\x8f\x8a\xdb\xd5\x67\x7b\x1e\x2c\x06\x5e\xe0\xb9\x03\xcf\x1d\xb8\x9c\x2c\x70\xe0\x75\xf5\xb3\x0c\xc5\xc0\xbb\x15\x62\x99\xac\xa5\x21\x11\xf8\x28\x06\x5e\x28\x78\xd7\x50\x34\xeb\xf5\x29\xf4\xc8\x92\x9e\x33\x16\x08\x22\x68\xc0\xa4\xcd\x3d\x7b\xf3\x3b\xb4\xc7\x4c\xbc\x1b\x4f\x67\xe7\xd7\x13\x69\x7f\xca\xc5\x09\xf3\x10\x7a\x0b\x45\x5f\x90\x60\xff\x87\x3a\x8e\x8f\x5f\x08\xc7\x30\xe5\xc8\x6c\x5f\xd8\xd7\x77\xde\x35\x11\xb7\x19\x24\x52\x58\xf2\x3a\x2c\xc3\x18\x0c\x40\x61\x91\xc0\x0d\xb6\x21\xbe\x2e\xb1\x38\x16\x0a\xbe\x9a\x0b\x58\x2b\xf6\xc9\x28\x9e\x9c\x8c\xec\x99\xa4\x8c\x22\xd8\xb8\x4a\xde\x8c\x5f\x29\xfa\x4e\x68\x4f\x15\xf3\x8c\x78\x36\x95\x6b\xde\x24\x4e\x74\xb3\xf1\xa2\x9b\x54\x5e\x46\x9a\xce\xc7\x5a\x96\x10\x70\x63\xc4\x62\xf1\x79\x7b\x15\xb6\x82\x78\x6a\xde\x2d\x48\xcb\x34\x14\xc4\x0b\xab\x88\x97\x55\xcd\x71\x50\xe6\xe0\x63\xc2\xd7\x73\x53\x48\xa4\xc6\x72\xa5\xb3\x2c\x20\x94\xaa\x45\x9d\x63\x9d\x36\xaa\xa8\x55\x12\xbc\xa8\xab\xa4\x51\xdf\x27\x9f\x7d\xfc\x83\xf8\x2b\x29\xf6\x24\x2f\xa9\xe7\xe6\x01\xa6\x2e\xb0\x40\x28\x61\xc8\x42\x2a\xe8\x43\x06\x9d\xd8\x00\x96\x00\xfa\xdf\x30\x60\xc3\xee\x69\x57\x03\xa2\x1e\x53\x8c\x31\x19\x3b\x1e\x96\x20\x85\x25\x09\xe7\xc4\x87\x1e\xe6\x6c\x4f\x95\x41\xfb\x3d\xa3\xf7\x2b\x8c\x22\xf8\xf0\x31\x5b\xeb\x04\x99\x90\x31\xdf\x43\x65\x40\xe6\x46\x52\x9b\x25\xa7\x4c\xb8\x90\x68\xf8\x2a\xec\x07\x0b\x2a\x70\xb1\x14\x5f\xbb\x37\xb9\x35\x6e\xca\xfa\x46\xca\x53\xdf\xd2\x50\xe4\x3d\xf3\x1d\xde\xaf\x30\x14\xa9\xd3\xd6\x4d\x67\xfe\xdb\xb9\x26\x1e\x4e\xe9\xff\x10\x80\x32\x21\x97\x48\x14\x59\x26\xe3\x79\x75\x62\xea\x59\x70\x87\x4c\x43\xad\xc6\x8b\xe4\x53\x99\xa6\xd4\x13\x0a\x4e\x99\x97\x92\x87\x01\x17\x05\xca\x97\xed\xd0\xa7\x35\xbe\x98\x91\xe4\xc8\x7a\xa4\x98\xe7\x5c\x5d\xa2\x4b\xe3\xa2\x20\x40\x2f\xc4\x9e\x22\xe1\xf3\x5b\x19\x33\x3a\x86\xfd\x45\x5c\x3e\xb0\xb4\x7a\x95\x60\xc9\x86\xe3\x08\xd4\xb0\x3c\xab\x56\x1a\x8d\x34\xc1\x5e\x88\xa5\x37\xd8\x14\x4a\x35\xb3\xcf\x51\x09\xe0\x61\xd8\xe5\x78\xbf\xa2\x1c\x9d\xee\xb6\xb2\x50\x25\xce\xdb\x74\xc1\x91\x08\x6c\x30\xab\x9e\xa0\x60\xd9\x0b\x0f\xce\xa7\x47\x9d\x26\xe2\x14\x64\x75\x01\xa7\xa1\xff\x83\xf8\xd4\x21\xa2\x21\x3e\x4f\x53\x6b\xd2\x62\xf0\x2a\x94\xaf\xf5\x55\x28\x4b\x80\x9c\x69\x2b\xae\x26\x0e\xf7\x17\x6f\x7b\xaa\xbb\xdb\xa2\x54\x93\x33\x0e\x4e\xff\xfa\x74\x02\x6d\xb7\x12\xa7\x15\xc7\x44\x9d\x63\x4a\x4e\x8d\x53\x07\x1c\x4c\x1a\x5e\x52\x3f\x2f\xc5\x2a\xf8\xca\x1b\x14\x7f\x52\xb5\xd3\xad\xc0\x9e\x46\x6a\xcb\xfd\xc7\xb6\xa0\xd8\xe6\x95\x7b\x70\xf0\xda\x22\xf3\x94\x1d\x59\xcd\x6e\xac\x52\x4b\xb6\x15\x8d\xf7\x4b\xa7\x39\xc1\xd6\x13\x1c\x6c\xe9\x80\x63\xc2\x2f\x38\xa4\x7a\x85\xc7\x84\xff\xdc\x09\x7f\xb3\xce\x64\xb1\x58\x69\x01\x3f\x38\x9b\x8e\x45\xe0\x58\x04\x06\x30\x42\x1f\x1b\x8b\x40\x3d\xc1\xc1\x16\x81\xc8\x30\xdc\x15\x9b\x03\xb2\x42\xdf\xf3\x0f\x8e\xc5\x23\x05\xb3\x78\x5e\x19\x45\x90\x9d\x76\xa4\x24\x16\x9c\x14\x4e\xcf\xd6\x46\x87\xa3\x58\x71\x06\xaf\xf3\xe3\xeb\x0c\xef\xc9\x68\x08\x65\xb1\xf6\x64\xd4\x37\x3a\x9d\x36\x75\xa9\x2e\x53\x68\x84\xea\xc8\xfa\x75\xef\xbd\x65\x48\x7f\x53\x58\xef\x25\xb4\x33\x0d\xe2\x98\x18\xa7\x27\xc9\x95\x10\xd1\x16\x8d\x3c\x93\x16\x34\x65\xb1\x5d\x25\xed\xef\xd0\x81\x77\x6a\x3d\x2c\xac\xb8\x58\x58\xf1\xb1\x10\x3e\x7c\xd4\xb8\xd9\x87\x8f\x1a\x47\x2b\xc9\x92\x38\x2c\xc8\x1d\x9a\x25\xe2\x3e\xf8\xc8\xaa\x0b\x59\x96\xd1\x71\x03\x0e\x9f\xfa\x15\x1c\xa4\xa4\xd8\x15\xaa\xea\xad\x8d\x8e\x66\xe9\x33\x20\xcb\x25\x32\xc7\xac\x4c\xf5\x77\x8f\x33\xa9\x59\x94\x45\x52\x45\x62\x06\x6f\x79\x66\x32\x0a\x4d\x99\xdc\xc3\x32\x5c\x12\xbf\xe4\x9c\x6e\x6d\x74\xa8\x93\x87\x2a\x1e\x8f\x31\x52\xcc\x39\x5c\xe4\xef\x0d\x16\xb1\x68\x69\xbf\x94\x90\x59\x4c\x9d\x30\xa6\xb4\x27\xa3\x82\xe2\xd4\xd9\xa8\x7a\x89\x5f\xf2\x0a\x4d\x91\x3f\xd0\x39\xfe\x46\x98\xe3\x23\x37\xe7\x3e\x45\x26\xe2\xf4\x72\xa1\xfe\xee\x4b\xe3\x96\xc9\x3c\x48\x11\x26\x87\x13\x75\x01\x61\x27\x09\x56\x91\xac\xfc\x98\x4d\x42\x61\xbf\x53\xbf\x2d\x4b\xea\xa8\x4c\xf4\x6c\xb9\x10\x72\xd3\x2a\xde\x48\x5c\x73\x74\xe9\xa3\xa4\xe8\x0e\xc8\x92\x76\xf3\xe9\x5f\x15\xbe\xc2\x95\x43\x42\x5d\x29\xed\x99\x9c\xca\x25\x45\x91\x23\x17\x1b\xea\x77\x68\xff\x9b\x32\x67\x73\x91\x61\x6e\x6e\x31\xde\x8c\x67\x43\x89\xd3\x46\xb6\xe6\xfe\xa6\xaf\x4b\x59\x3b\xdc\x95\xe4\x2c\x25\xcc\x01\x53\x66\x23\xbc\x87\xde\x42\x22\xab\xaa\x53\xb7\x6b\x55\x86\x7c\x1a\x8a\xae\x65\x81\xc9\xe4\x6a\xb6\xba\x0b\x93\x74\x35\xa9\x26\xa1\xd8\x2d\x75\xa4\x43\xda\xf7\x6d\xc1\xba\x20\xea\x81\x70\xe0\x78\x5f\x77\x12\x5e\xa0\xa5\x2e\x20\xe7\xca\x95\xed\x6b\xc2\x43\x34\x5f\x73\xbc\xb7\xfe\xa9\x46\xff\x76\x06\x8c\xfa\x25\xe9\xf2\xc9\xb9\xa0\xc9\xfb\xf0\xba\xe8\x67\x55\x7a\xf9\x8c\x39\x0f\xb8\x44\x6c\x98\xde\xfb\xd9\x6a\xe8\x9a\x70\xb2\x40\x81\x5c\xbe\xfb\x7e\x3d\xeb\x50\xfd\x89\x9c\x57\x69\x22\xab\x30\x94\x78\x53\x1e\xf4\x42\xa6\xea\xa7\x26\xc7\xd1\x55\x48\xa8\x76\x45\xf8\xef\x2b\xe4\x5f\x4d\xab\x3a\xd1\xb2\x2c\xe6\xc9\x9f\x5c\x1e\xf3\x42\xda\x95\x49\xa5\x76\x5d\xa1\x4c\x1f\x39\xaf\xdb\x46\xea\xcc\x85\x6d\xad\x57\xed\xd4\x5b\xba\xa0\xc2\xe4\x78\x6f\xa7\x37\x2f\x1a\xf1\x57\xae\x1b\xa2\x30\x33\xb2\xf8\xca\xe5\x14\xfe\x6e\xc1\x09\x6c\xe1\x3d\xf7\x7d\x93\xdb\x17\x01\x13\xf8\x28\x4c\xcb\xd2\x79\xf8\x77\xf1\x65\x19\x71\xcf\xe1\xc2\x32\x4f\x0d\xcf\x9e\xb4\x6b\xb0\xca\x82\x76\x32\x76\x44\x04\x19\xc6\x7c\x55\x9d\x27\xa1\xb4\x77\x08\x82\xaf\xb0\x38\x9b\xb3\x26\x49\x73\xd6\x5e\x32\xfc\x60\x4d\x9d\x1f\x95\xe6\x3d\x3c\xcc\x2c\xaf\xbf\xa4\xf9\xd9\x93\xfc\x13\x73\x7c\xa7\xd3\xe9\xfc\x79\x8b\xd2\x31\xe5\x9f\x9d\x92\xff\xd9\x93\xd1\xf8\x77\x95\xa2\x26\x23\xab\xaf\x48\x12\xa6\xc3\x2e\x06\x0d\x3d\x53\xfa\x3c\x4f\x29\x90\xd0\xfc\x4a\x79\x28\x0e\x23\x3f\xbf\xc1\xef\x98\x9e\x5b\xb4\x33\x7b\xc8\xcd\x95\xcc\xac\xcd\xbd\x9d\x86\xc4\x7b\x7d\x35\x3d\xd8\xbd\xf5\x5c\x5d\xd5\x1e\x64\xde\xad\xbd\x45\xfe\x19\x53\xef\x4a\x1d\x35\x26\xc7\x52\xc3\x33\x90\x3d\x91\xee\xed\xb7\x39\xc6\x82\x9a\xfc\xf8\xa4\xcf\x46\x32\x5f\xdb\x92\x21\xb3\x0b\x6e\x4b\x2e\x14\x9f\x9c\x36\x26\xef\x82\xc5\x69\xcb\x5f\x1a\xae\x1c\xb3\xb5\xdd\x35\x37\x0c\x53\x17\x18\x82\xe9\x23\x2b\x2e\x66\xc1\x2f\xba\x05\x9c\xd5\xd2\xa7\x73\x22\xf0\x22\x58\x31\xb1\x5b\x55\x84\xa6\xee\x47\x3e\x49\xa5\xd4\x4d\x41\xf1\x85\xaf\xe2\x37\x5e\x40\xa7\xa1\x18\x41\xe2\x56\xf9\xd2\xab\xdc\xcc\x85\x28\x4a\x2a\x70\xf6\xdb\xd2\x3b\x75\x03\x8e\xe9\x53\x63\x96\x82\xaa\xbe\x60\x41\x8b\xa2\x05\x4f\x0c\x62\x68\x08\xe4\x8b\x5b\x9c\xdf\x8d\xd2\xf7\x59\x6f\xf4\xb6\x68\x86\x6a\x44\xab\xa1\xec\x46\xaa\xe8\x33\xf0\x2f\xf8\xe5\x3b\x59\xf8\x8c\xc6\xd5\x85\x57\xb9\x02\xef\x16\x21\x71\x0d\xd8\x72\x38\xb0\x35\xd9\xc1\xbe\x3e\x95\xab\x17\xd6\xfc\x01\x8f\x8e\xb7\x7a\xb5\xd8\xc8\x26\x9f\x29\x8a\x94\x47\x77\xc7\x90\x45\x6d\x79\xa2\x26\x0c\xf3\x1a\xd5\x7d\x51\xa7\x51\x61\xef\x4b\xd7\xe7\x8f\x16\x24\x6d\x94\x7f\x22\xe4\xcf\x00\x77\x5b\xa8\xf7\x08\x73\x1b\xfc\x76\x3e\x71\x7a\xf1\xdd\x98\xd2\x08\x1d\x2f\xae\x95\xed\xee\xb1\x4a\x8a\x64\x17\xc0\x2d\x5f\xe6\x66\xb5\x28\x9a\x8c\xb2\x57\x99\x1f\x96\x5d\xef\xb7\x3b\xcf\xb9\xe3\x54\x2f\xa1\x27\xa3\x30\xbb\x21\xd2\xcd\x54\x95\xb1\x6c\xdb\xfe\xde\x7e\x35\x25\x0f\x78\x18\x9d\x6c\x5c\x79\x9e\xa9\x99\xfd\x31\x6d\xe8\xfb\xc3\x3e\xff\x5b\xa9\x8f\xda\x0e\xb2\x15\xad\xfd\xde\xee\xd8\x8a\xbe\xc0\x56\x34\xfb\xf4\xee\xd8\x8a\x16\x9e\x6f\x6b\x45\xcb\xe7\xb8\x97\xf9\x83\xdc\x7a\xb6\x63\x07\x7b\xec\x60\x77\xb0\xf0\xc5\x75\xb0\x71\xe9\xb8\x62\x98\x6c\xf9\xb4\x3b\xbc\x43\x6b\x66\x1b\x3f\x4e\xd6\xf1\x1e\x9b\xd9\xfd\x36\xb3\x2d\x3e\x5b\x2e\xf3\x1d\x1b\xdc\x63\x83\x5b\xd6\xe8\xd8\xe0\x1e\x1b\xdc\xba\x4a\x1a\x17\xa6\xbf\x52\x83\x3b\x1a\xbf\x1d\xcf\xc6\x07\xdd\xe3\x3a\xea\x9b\xfd\x83\xec\x71\x6b\xff\x3b\xc1\xcf\xd6\xe3\x26\x1f\x29\x7b\xa1\xe0\xf6\x74\xe9\x53\x71\xce\x9c\x19\xa7\x8b\xe9\x92\xcc\x31\xd9\xc3\xf5\xa1\xdb\xef\x16\xa5\x7c\xda\x6d\x5f\x18\xc3\xad\xeb\xb6\x1a\x3a\xad\x6a\x97\x35\x61\x26\x75\x42\x99\xc8\xaa\x66\x6a\x64\x8f\x1f\x71\x7e\x18\xe9\x27\xb6\xff\x07\xa4\x1f\x5d\x5a\x89\x8c\xff\x07\x00\x00\xff\xff\xc8\x46\xaa\x85\x88\x47\x00\x00")

func templateGfTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateGfTmpl,
		"template/gf.tmpl",
	)
}

func templateGfTmpl() (*asset, error) {
	bytes, err := templateGfTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/gf.tmpl", size: 18312, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/gf.tmpl": templateGfTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"gf.tmpl": &bintree{templateGfTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
