// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/gf.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateGfTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x4d\x6f\xdb\x38\x13\x3e\x27\x40\xfe\x03\x5f\xc1\x2d\xa4\xc0\xa1\xf0\x5e\xbd\xe8\xa1\x9b\x78\xb3\x06\xba\xad\x37\x4a\x7b\x59\x2c\x50\xd6\x1a\xc9\xdc\x48\x94\x4c\xd2\x69\xba\x86\xfe\xfb\x82\xd4\xb7\x2c\x39\x72\xe3\x36\x6a\x1a\x5d\x6c\x8b\x33\xc3\xe1\x33\x9c\x87\xc3\x71\x4c\x16\x37\xc4\x07\x04\x4c\x72\x10\xf2\xe4\xf8\xe4\x98\x86\x71\xc4\x25\x32\x4f\x8e\x8f\x0c\x60\xd2\x85\x30\xb2\xb3\x61\xe3\xe4\x18\x21\x84\x8c\xcd\x06\x49\x4e\xc3\x2b\xea\x2f\xa5\x23\x39\x1a\x61\x67\xb1\x84\x90\x20\xc3\x16\xfa\x8b\x81\x92\xc4\x50\xc6\x8e\x0c\x9f\xca\xe5\xfa\x13\x5e\x44\xa1\xed\x47\xbe\x67\xfb\x9e\xed\x71\x12\x82\xed\x1b\x1d\xc3\x0c\xa4\xed\x2f\xa5\x8c\xb5\x05\x35\xe1\x66\x73\x86\x46\x24\xa6\xaf\x19\x8b\x24\x91\x34\x62\x68\xf2\x0a\x8d\x70\xf9\x5b\xe0\x29\x93\x57\x53\xe7\xfa\xf5\x7c\x86\x92\xa4\x54\xe3\x84\xf9\x80\x46\xa1\x56\xa8\x99\xc0\x7f\x50\xd7\x0d\xe0\x33\xe1\x20\x0a\x95\x7c\x79\xa3\x10\xcf\x6f\xfc\x39\x91\xcb\x74\x25\xb9\x39\x60\xae\x96\xb5\x94\x6b\xb6\x8d\x94\x28\x7e\x4b\x42\x40\x49\x82\xf0\xc9\xb1\xfc\x12\x43\xfd\xa5\x90\x7c\xbd\x90\x68\x93\xda\x98\x5d\xa4\xa3\xb3\x0b\x7c\xad\x44\x93\x44\xfd\xfe\x4c\xe5\xb2\xb1\x9c\xdf\x28\x04\xae\xc0\x8e\xd6\xbe\x26\x3e\xa6\x6a\xe2\x8f\x9b\x0d\xc2\xd9\x27\x04\x02\xb2\xaf\xda\x5e\x21\x9a\x8f\x67\xae\x36\x90\xf0\x52\xe8\x52\xfb\xb5\x75\xa7\x28\xd7\x21\xf6\xda\x30\xd6\xba\x5b\xaa\xd4\x43\x2c\x92\x55\x0b\x78\xe6\xb3\x88\x43\x4d\xb2\x98\x48\x12\x3f\x9b\xa1\xea\x78\x01\x86\x24\xbe\xd8\x0e\x72\x13\x95\x8a\x06\x65\x2e\xdc\x65\x7a\x23\x2f\x87\x5f\x81\xa3\x66\x7a\xa5\x61\x2b\x50\x69\xc0\x53\x3a\x56\xfa\x93\x2f\x52\xbd\xa4\x9e\x36\x49\x83\x80\x7c\x0a\xe0\x03\x09\xd6\xca\xf6\x69\xd5\xdc\xc8\xab\x06\x34\xc7\xc2\xc3\x0e\x30\x41\x25\xbd\x2d\x42\x25\xcb\x00\x65\x01\xfc\x47\x44\x6c\x62\x9c\x19\xcd\xa0\x35\xf7\x5c\xd7\xef\x2c\xb0\x90\xc2\x35\x75\x7d\xb8\x3f\xae\xf0\xad\xe3\x1a\x73\xca\xa4\x87\xb2\xc5\xbd\x10\xe3\x28\xa4\x12\xc2\x58\x7e\x31\x3e\xaa\xe9\xb3\xf8\x6c\x1b\x50\x58\x57\xa6\xfa\x40\x02\xea\x12\xb9\x2d\x5b\x9b\xb0\x9c\xef\x85\x40\xb7\x6a\x3e\x35\x8b\x1a\xe9\x65\xab\x89\x6a\x65\x3f\xc4\x44\x2c\x48\x50\xf1\xb8\x12\x5d\xc0\xef\x19\x5d\xad\x21\x49\xd0\x5f\x7f\x17\xc1\x3b\x05\x26\xb1\x8a\x34\xe8\x1d\x51\x10\x41\x35\xfa\xfd\x02\x9c\x64\x24\xf3\x86\x0a\x59\xe5\x94\x2b\x58\xad\x41\xc8\x82\x6f\xba\xc6\x4b\xea\x39\x9a\x13\x1f\x1c\xfa\x2f\x20\x44\x99\x54\xf3\x64\x81\x89\xb3\xf7\xd5\xf0\x64\xe2\xd7\xd1\x0d\xb0\x16\x71\xfd\xbe\x21\xef\xa8\x13\x43\x3f\x42\x72\xca\xfc\x5c\x5e\x44\x5c\xd6\x45\xf7\x63\xa3\xa1\x91\x44\x35\x1f\xea\xb9\x7d\xdf\x46\xde\x87\x4d\x1b\x56\x08\x73\x91\xd9\x9e\x82\x56\xed\x9d\x03\x84\x2f\x96\x8a\xa2\x5a\xcd\x1d\x8e\xe1\xda\xb7\xf2\xfd\xd9\x74\x96\x73\x5e\x9b\xd2\xb7\x75\xac\xcd\xa9\x3e\xb9\x77\x09\x3b\x53\xaf\x63\xf8\xd1\x0f\xfd\xdc\xfd\x73\x0e\x44\xc2\xae\x15\x74\x4b\xd4\x17\xf1\xc3\x27\xed\x03\x92\x71\xdf\x44\xd4\x98\x76\xe6\xe1\xbe\xa7\x1c\x3a\xe0\x49\xb7\x2b\x3f\x0f\x97\x86\x87\xac\x80\x76\x26\x6f\x1b\x9b\x0c\x6f\x09\x7d\x78\xe6\x7d\xec\xde\x93\xa8\xdd\x12\xcf\x89\xfa\xb5\x89\xaa\x31\x7d\x4e\xd4\xef\x93\xa8\xe5\x4c\xb3\x30\x5c\xb7\xc3\x3e\xbc\x65\xf5\x49\xde\x0b\x08\x60\x77\xf2\x76\x4b\x0c\xa3\x54\xf0\xd6\x6c\x81\xde\xc2\xe7\xaa\x87\x0e\xf0\x5b\xba\x80\xdf\x09\x73\x03\xe0\xe6\x22\xa0\xc0\x24\xd2\xd7\x9b\x73\xfd\x7d\x8c\x38\x88\x38\x1b\x47\xca\x84\xc9\xd1\xa9\x6e\xdd\xe0\x6c\x79\x5a\x64\x1d\xa4\x6a\x1c\x84\xc4\x57\xfa\xb7\x65\xe9\x6b\x89\xe6\x17\x1f\xab\x99\x80\x9b\x56\xb3\xdf\x33\xe7\xe0\xd1\x3b\x25\x63\xd8\x24\xa6\x46\x2d\x08\x3a\x33\x6b\x0d\x9d\x4c\x7c\xfb\xee\x5b\x58\xda\xea\x01\x35\x54\xaa\xc1\xad\xb8\x42\x5d\x15\x8c\x79\x7a\x15\x54\x97\xdb\xec\x52\x98\x87\x49\x61\xab\x6e\x3d\xa5\x9a\xc0\xbf\x52\xe6\x96\x1d\x26\xb3\xd2\x5e\xba\x9c\x5e\x4f\x14\xce\xa5\x5b\x49\x62\x6f\x36\x48\x30\x72\x03\x25\xfc\xc6\xb8\xbe\x8c\xaf\xe8\x64\x35\x29\x31\xe2\xc8\x84\x15\x1a\x85\x2a\x3c\x7a\x7f\x19\x86\xb5\xf5\x2a\xa0\x42\x1a\x96\x85\x4c\xa6\xa6\xc3\xe7\x91\x9b\xca\x75\xd1\x50\x26\x92\x24\xe3\xfd\x4b\x6e\xf5\xb4\x6e\x1c\x2b\xcf\x88\xfc\xb9\x25\x1c\x71\x58\x75\x5d\x76\xeb\xc2\xd4\x43\xc0\xb9\x42\x8a\xe3\x39\xe1\x02\xcc\x97\x1c\x56\xd6\x2f\xfa\xed\xff\x5e\x21\x46\x83\xa6\x7d\xf5\x54\xb6\xb3\xc9\xc7\xe8\x65\x7d\xcf\xb6\x28\xa8\x67\xca\x79\xc4\x15\x72\x93\xbc\x8b\x8a\xf5\xab\x39\xe1\x24\x04\x09\x5c\xed\x84\xf1\x0e\xdd\x89\xfe\x0a\x9c\xb7\x08\x25\x56\xfd\x5d\xb1\xc1\x2a\x2e\x8f\xf3\xb5\xa6\x19\x8a\xab\xe8\xe0\x6d\x93\x7f\xae\x81\x7f\x31\xad\x96\x91\x37\x34\xa4\xd2\xe4\xb0\xc2\x79\xbb\xa0\x4d\xea\x9d\xe7\x09\x90\x66\x21\x97\xf6\x09\xce\xd0\xff\x2d\x74\x8a\xee\x53\x7e\x1d\x04\x26\xc7\xe7\x11\x93\x70\x27\x4d\xcb\x6a\x0d\xdb\x77\x0a\x90\xda\x49\x07\x8c\xcb\x83\xfc\xbc\x20\x92\x4c\xb2\x70\x6e\x8f\xce\x84\xf2\x75\x82\x24\x5f\x43\x63\xb8\xea\x48\x9e\x80\xd6\x01\x59\xc8\xde\x50\xf7\xf1\xa8\xc8\x87\x01\x33\x51\xfb\xdd\xff\x67\x25\x22\xea\xa6\xab\xcc\x50\xa9\x1d\x99\x49\x62\x1a\xd4\x35\xac\x87\x52\xd7\x25\xc8\x2a\x7b\x8c\x11\x75\x1f\x95\x41\x2e\x61\x60\x04\xb2\x4d\x1f\x9d\xfc\x70\xb4\x8b\x1c\xe6\xef\x9c\x61\xd7\x28\x0b\xdd\xb5\x1a\x2e\x37\x74\x76\xd5\x7e\x56\x7a\xd8\x3f\xd9\x53\x08\x5b\x0b\x95\x5e\x2d\x8e\xa6\xc2\xc3\xfb\xf1\x0d\x6b\x07\x6a\x07\xb6\xf9\xb9\x7d\xd5\xdd\xad\xa7\x1e\x07\x64\xae\xd4\x76\x8b\xd6\xf5\x5a\xdb\x40\x1b\xc0\x4d\x9f\x3a\xdb\xf6\x2d\x4e\x1c\x7e\xf2\x8e\x16\x48\x5f\x99\x5e\x0b\xf8\x5a\xe4\xbf\x05\xea\xbd\x11\x3f\x24\xda\xbd\x50\xec\x6c\x46\x75\x8f\x39\xe4\x16\x06\x53\xf2\xa7\x9c\xf2\x44\xcf\xec\xf7\x3f\x40\x41\xbf\xd6\x4d\xec\xe1\x9e\xdb\x9d\x4d\xf6\x9f\xf5\xdc\xfe\x1e\x65\x7d\x0a\xfa\x3b\x06\xb3\x0b\x93\xba\x4f\xe0\xc0\xdf\xfd\xb7\x42\x9b\x9f\xcf\x07\x7e\x75\xf2\x43\x1d\xf8\x7d\xfe\x71\x68\x2a\x3e\x17\x01\x4f\xbd\x08\x48\xe9\xe6\x69\x16\x01\x17\xd3\x37\xd3\xeb\xe9\xf0\xeb\x00\x57\xff\x1f\x36\xdc\x3a\xa0\xf3\xff\xba\xe7\x3a\xa0\x6f\x1d\xb0\x57\x09\x90\xe2\xbd\xab\x04\x98\xde\xc1\x62\x30\x14\x92\xba\xfb\x38\x14\xd2\x41\x0c\xc9\xc9\xf1\x7f\x01\x00\x00\xff\xff\xa1\x86\xa7\x56\xcd\x2f\x00\x00")

func templateGfTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateGfTmpl,
		"template/gf.tmpl",
	)
}

func templateGfTmpl() (*asset, error) {
	bytes, err := templateGfTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/gf.tmpl", size: 12237, mode: os.FileMode(438), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/gf.tmpl": templateGfTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"gf.tmpl": &bintree{templateGfTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
