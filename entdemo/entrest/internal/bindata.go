// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/service.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x4d\x8f\x9b\x30\x10\xbd\xf3\x2b\x46\x88\xbd\x54\x5d\xef\x7d\xa5\x1c\xaa\x66\x5b\xad\x54\x45\xab\x24\xdd\x33\x6e\x18\xc8\xb4\x60\x28\x1e\xb6\x4d\x11\xff\xbd\xb2\x81\xd4\x84\x8f\x73\x54\xe5\x86\x3d\xef\x79\xde\x8c\xde\x93\x28\xe4\xe1\x87\x4c\x10\x50\x71\x89\x9a\x3d\xef\xe1\x01\xea\x1a\x02\xb1\x91\x19\x42\xd3\x00\x69\xe0\x23\x42\x96\x47\x98\x1a\x14\xf1\x09\xe2\xbc\xb4\x97\x03\xa0\x3e\x1c\x31\x93\xc2\xe3\x53\x71\x59\xe1\xb2\x3a\x30\xd4\x1e\x00\x40\x5d\xdf\x43\x29\x55\x82\x10\xc4\xf0\xb8\x82\x40\x7c\x22\x4c\x23\x0d\x4d\x63\xeb\x3d\x26\x60\x99\xd8\x7a\x2c\x76\x96\xbf\x97\x09\x34\x4d\x5d\xc3\x2f\xe2\xa3\x2d\xeb\x96\xff\x41\xa9\x9c\x25\x53\xae\x74\xf7\xd6\x24\x83\x54\x84\xbf\x3b\x5e\x10\xf7\xe2\x8c\x50\xd3\x69\x05\xa2\x3d\xa1\x8a\xdc\x8f\x81\x26\x8a\x21\x90\xe7\x6e\x9d\x3a\xb7\xfd\x93\xe2\xed\xd3\x6e\xef\xf2\xa6\xb9\x62\x8b\x32\x92\xdf\x52\xbc\x84\xb6\xf0\x7f\x53\xdb\x81\xcc\x12\xeb\xda\x3e\x11\x8b\x0d\xa5\xa9\x61\xbe\xca\xb4\x32\xf4\x77\xae\xe8\x20\x16\x7b\xb3\xff\x33\x41\xe5\x6c\x1f\x43\xa5\x89\xe9\xcd\x54\xc2\x7e\xe6\xf6\x13\x53\x6d\x6f\xbf\xeb\x5c\x3d\xfa\xf7\x7e\x38\x9e\xbd\x9f\x61\x62\x25\x1d\xdb\xbb\x6a\xfd\x17\xda\x9d\x63\x63\x0d\xff\xb1\x44\xc9\xe8\x7a\x76\x8b\x3f\x2b\xd4\x0c\x9d\x9d\xe7\x01\x37\x6f\x8f\xbd\x6d\xb7\x35\x6f\xee\x11\xfe\x55\xa6\x14\x49\xc6\x09\xf4\x60\x63\x2b\x28\x4a\x52\x1c\x43\x78\xa7\xe1\xed\xd1\xbf\xd3\x7e\xd8\x56\xa6\x5e\x9b\x6b\x3e\xe1\xed\xab\x34\xed\xff\x1e\xba\xaf\x45\xb4\x1c\xba\x79\xc0\x2d\x74\xe3\x10\xd9\x6d\xdd\x42\x77\x0b\xdd\x62\xe8\xd6\x98\xe2\x62\xe8\xe6\x01\x83\xd0\x3d\xaf\xdb\x5f\xbc\xe7\xb5\x3b\x45\x1b\xa4\xc5\xfc\x08\x8a\xba\x69\xc4\xc5\x54\xfd\x7b\x6e\xd4\x9c\x09\x5b\xfd\x9f\x91\x17\xc4\xcf\x54\xaf\x42\xf9\x17\xd2\x4b\xd2\x4d\xf9\x05\x79\x52\xf2\x8b\x4c\x70\x47\x7f\x10\x48\xb1\x39\x77\x06\x28\xba\xeb\xf7\x79\x46\x8c\x59\xc1\x27\x3f\x3c\xe3\x37\x55\x06\x13\xf8\x4d\x95\x8d\xe0\xbb\xbc\xb4\x30\xd3\x94\x54\xd2\xc3\x75\x5e\xf2\x00\xdb\x78\x7f\x03\x00\x00\xff\xff\xb4\xc1\xd6\x2f\x2d\x0c\x00\x00")

func templateServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateServiceTmpl,
		"template/service.tmpl",
	)
}

func templateServiceTmpl() (*asset, error) {
	bytes, err := templateServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/service.tmpl", size: 3117, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/service.tmpl": templateServiceTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"service.tmpl": &bintree{templateServiceTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
