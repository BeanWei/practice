// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/gf.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateGfTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1b\x5d\x6f\xdb\x38\xf2\xd9\xfa\x15\x5c\xc1\x2d\xa4\xc0\x95\x7b\xf7\xe8\x45\x0e\xc8\xc5\xde\xac\x81\x6e\xe2\xad\xd3\xdd\x87\xa0\x68\x58\x6b\xa4\xf0\x22\x4b\x0a\x45\xa7\xe9\x19\xfe\xef\x07\x92\x92\x2c\x89\x94\x2c\xc7\x49\xe3\x5c\xed\x97\x44\xe4\xcc\x70\x66\x38\x1f\x9c\x11\xb5\x5c\xa2\x6f\x84\xdd\xa0\xae\xf3\x3b\x60\x17\x28\x5a\xad\x96\x4b\xe4\xc8\x3f\x10\x24\x80\x56\xab\x7e\x1f\x9d\x46\x2e\x20\x1f\x42\xa0\x98\x81\x8b\xbe\x7e\x47\x10\xb2\x59\x0f\x0d\x2f\xd0\xf9\xc5\x25\x1a\x0d\xc7\x97\x0e\x47\x08\x5d\xb4\x5a\x19\x46\x8c\x67\xb7\xd8\x07\x0e\x44\x21\x61\x86\xb1\x5c\xa2\xee\x0c\xcf\x21\x38\xc7\x73\x40\x83\x63\x24\x1e\x50\xd7\x11\xcf\x1c\x85\xcc\xe3\x88\x32\x64\x19\x1d\x13\x42\xe6\xc2\x3c\xea\xa7\xd8\xa6\x81\x10\x42\x26\x27\xe1\x9c\x46\xa1\x47\x7c\x67\x92\xd2\x5f\xad\x1a\x27\xfb\x62\xb8\x2d\x70\x4c\xc1\x25\x33\xcc\xc0\x34\x8c\x8e\xe9\x13\x76\xb3\xf8\xea\xcc\xa2\x79\xdf\x8f\x7c\xaf\xef\x7b\x7d\x8f\xe2\x39\xf4\x7d\x53\x3f\x1b\x02\xeb\xfb\x37\x8c\xc5\xe9\x2a\x1a\x10\x06\x0f\xac\xef\x27\x8c\x9a\x86\x80\x59\x2e\xdf\xa1\x2e\x8e\xc9\x49\x18\x46\x0c\x33\x12\x85\x5c\x35\x5d\x67\xfd\x9c\x38\xa3\x90\x7d\x1c\x4d\x2f\x4f\x26\x63\xae\xa6\x0c\x8b\xe2\xd0\x07\xd4\x9d\x0b\xf8\x12\x05\xe7\x0f\xe2\xba\x01\x7c\xc3\x14\x92\x0c\x23\x97\x7a\xee\x4c\x6e\xfd\x09\x66\x37\xb9\x32\x38\xb1\x74\xd7\x6c\xc3\xe8\xf7\x91\x50\x4e\xba\x2b\xc8\x31\xd8\xf7\x18\xca\x63\x09\xa3\x8b\x19\x43\x4b\x81\x3e\x1e\xca\xc9\xf1\xd0\xb9\xe4\x90\xab\x15\x5a\x5b\x54\x51\x8c\xdf\x08\x04\x6e\xe2\x4c\x05\xf2\x25\xf6\x1d\xc2\xd7\xbc\x4e\x6d\xed\x7a\x6d\x6c\xd7\x19\xbd\x1c\x34\x9b\x97\x5c\x56\x34\xe0\x49\x8d\x49\xf2\x45\x79\x85\x6e\x19\xf6\xc5\xbc\x57\xa2\x96\x73\xc8\xb0\x9f\xa8\x1a\xaf\xb2\x5a\xc0\x20\xa1\x0b\x0f\x29\x5e\xd7\xcb\x54\xc2\x39\xe6\x2b\x1d\xe7\x7e\x23\x58\x2d\xf3\x2c\x79\x5a\xb3\x22\x56\x49\xf5\x45\x3c\x41\x8d\x04\x01\xfe\x1a\xc0\x5f\x38\x58\x70\xb2\x47\x45\x4a\x5d\xaf\xa8\x60\xe2\xa1\x30\x62\x82\x18\x84\x09\x61\xe4\x3e\x57\x1d\x5b\x2b\x2c\x55\xe8\x7f\x92\x28\x1c\x98\xef\x4c\x8d\x12\xf5\x3a\x05\xa9\x93\x91\xeb\x43\x45\xa5\x28\xc6\xc9\x0c\x07\xa8\x0b\x05\xd9\x33\x66\xc0\xf9\x14\x92\xbb\x05\xac\x56\xe8\xea\x73\xbe\xd6\x11\x84\x8c\x87\x86\x2e\x08\x01\x72\x33\xe2\xdc\xc4\x94\x84\xcc\x43\x29\x87\x6f\x92\x5e\x34\x27\x0c\xe6\x31\xfb\x6e\x5e\x17\xd6\xb8\xae\xf2\xbb\x12\x96\xfa\x81\x24\xac\x68\x99\x1f\xe1\x6e\x01\x09\xcb\x8c\xb6\x6e\x3a\xb7\xdf\xce\x04\xfb\x30\x25\xff\x05\x84\x48\xc8\xf8\x12\x29\x23\x71\x3a\x5e\x64\x47\x42\x5f\x46\xb7\x10\x6a\xa0\xc5\x78\x19\x7c\xca\xa3\x99\xf8\x25\x8c\x92\xd0\xcf\xc0\x93\x88\xb2\x12\xe4\xeb\x36\xe8\x77\x35\xb6\x98\x83\xac\xe3\x5c\x39\xc8\x79\xba\x28\x97\x39\x85\x82\x4d\x3c\x14\x51\x64\x91\xe4\x9c\x04\x45\x52\x76\xf1\xc1\xf9\x73\x01\xf4\x3b\x77\xa1\x0a\x85\x5a\xdf\x3b\x2a\x7b\x56\xd1\x81\x14\x16\x34\xa2\xeb\xbd\x49\x5a\xe7\x19\x34\x19\x67\xcd\xec\x73\xc4\x56\x74\x3f\x30\x29\xdc\x2d\x08\x05\xd7\xdc\x14\x68\x55\xe0\xa2\x4c\xa7\x14\x30\x83\x06\xb1\xea\x01\x4a\x92\xbd\x72\x73\xdf\xd9\x94\x8b\x36\x2b\x54\xc6\x6d\xb6\x0a\x5b\x03\xff\x17\x0e\x88\x8b\x99\x16\xbc\xa4\xb7\xe3\x3c\xbc\xbe\x49\xf8\xb6\xbe\x49\x78\x50\xe5\x33\x6d\xc9\x69\xac\xbe\xd1\x9b\x5e\x2a\x93\x6d\xf2\x52\x89\x6d\xec\x35\xff\xf5\xe1\x04\xb5\x4d\xce\x6a\x8c\x05\x9d\x61\x72\x4c\x8d\x51\xb7\x08\xaf\x67\xc0\xfe\x26\xe2\xec\xa8\x46\xf7\xd4\x53\x5b\x66\xf4\x4d\x4e\xb1\xc9\x2a\x9f\xc0\xc0\x6b\x8c\xfb\x71\x67\x9c\x9a\xf3\x8d\x92\x4b\x36\x25\x8d\x4f\xb1\xdb\x1c\x60\xeb\x01\xf6\x36\x75\xa0\x43\xc0\x2f\x19\xa4\xd8\xc2\x43\xc0\x7f\xee\x80\xbf\x5e\x67\x3c\x9f\x2f\xb4\x0a\xdf\x3b\x99\x0e\x49\xe0\x90\x04\xfa\x68\x08\x01\x34\x26\x81\x7a\x80\xbd\x4d\x02\x2b\xc3\xf0\x16\xe1\x0c\x41\x58\xaa\x7b\xfe\x49\xa1\x5c\xa4\x5b\xe5\x46\x21\x2f\xd1\xb2\xfe\x41\x06\x62\xcb\xaa\x2d\xd7\xf1\xd2\xe8\x50\x60\x0b\x1a\xa2\xb7\xc5\xf1\x65\xae\xef\xf1\x70\x80\xaa\x64\x9d\xf1\xb0\x67\x74\x3a\x6d\xf2\x52\x5d\xa4\xd0\x10\xd5\x81\xf5\xea\xf6\xbd\xa5\x4b\xef\xe4\xd6\x4f\xe2\xda\x39\x07\xd2\x27\x46\x59\x0b\x57\x71\x11\x6d\xd2\x28\x22\x69\x95\x26\x24\x76\x54\xd0\xde\x16\x15\x78\xa7\xd6\xc2\x12\xc5\xc4\x12\xc5\xc6\x12\x74\xf5\x59\x63\x66\x57\x9f\x35\x86\x56\xa1\xc5\xf5\x30\xc7\xb7\x60\x55\x80\x7b\x28\x80\x50\x5d\xc8\xb6\x8d\x8e\x17\x51\xf4\xa5\xa7\xe8\x81\x53\x92\xa6\xa0\xb2\xb7\x34\x3a\x9a\xa5\x8f\x11\x8e\x63\x08\x5d\x4b\x99\xea\x6d\xef\x67\x9c\xb3\x55\xee\x49\x0a\xc5\x5c\xbd\xd5\x99\xf1\x30\xb1\x78\x70\x4f\xaa\xea\xe2\xfa\x4b\x3b\x5f\x4b\xa3\x43\xdc\xa2\xaa\xe4\xb8\xd4\x91\x40\x2e\xe8\x85\x3f\xaf\x75\x21\x49\x73\xf9\x39\x85\x5c\x62\xe2\x26\x12\xd2\x19\x0f\x4b\x8c\x13\x77\xcd\xea\x39\x7c\x2b\x32\x34\x05\x7a\x4f\x66\xf0\x3b\x0e\xdd\x00\xa8\x35\x0b\x08\x84\x4c\x86\x97\x53\xf1\x7f\x8f\x0b\x17\xa7\xf3\x88\x93\xb0\x28\x3a\x12\x2d\x7d\x27\x0d\xb0\x02\x64\x11\x48\x34\xae\x0a\xe7\xa3\x78\xb6\x6d\xce\xa3\x10\xd1\x77\xf8\x42\x40\x2d\xbb\xdc\xe3\x9f\x50\xf0\xc8\x03\x87\x30\xfb\x38\x26\x66\x31\xfc\x8b\xc4\x57\x6a\xe2\xa7\xd0\x4a\x6a\xcf\xe9\x28\x6d\xff\x32\x46\xc1\x37\xc4\x73\xe2\xfc\x9b\x84\xee\xfa\xd5\x80\xb5\x7e\x2f\x70\x36\xba\x1c\x70\x3d\xad\x69\x6b\x5e\x9c\xf4\x74\x21\x6b\x8b\xb7\x0f\x05\x49\x71\xe8\x22\x8b\x47\x23\xb8\x43\xdd\x39\xd7\xac\xc8\x4e\xa6\x69\x2b\x43\x01\x49\x98\x69\xdb\xc8\x0a\xf9\x6a\x8e\x78\x09\xc5\xe1\x6a\x42\x4d\x0a\xb1\x5d\xe8\xc8\x86\xb4\xfb\x6d\xa3\x65\x89\xd4\x3d\xa6\x88\xc2\x5d\x5d\x6f\xb9\x04\x4b\x3c\x04\x94\x0a\x53\x76\x26\x98\x26\x60\xbd\xa5\x70\x67\xff\x2a\x46\x7f\x39\x46\x21\x09\x2a\xd4\xf9\xaf\x60\x82\x16\xed\xa1\xb7\x65\x3b\x53\xe1\xf9\x6f\x44\x69\x44\xb9\xc6\x06\xd9\x0b\x37\x47\x0c\x4d\x30\xc5\x73\x60\x40\xf9\xde\xf7\xea\x51\x07\xe2\x5f\xa0\x54\x85\x59\xd9\xa5\xa1\xd4\x9a\x8a\x4a\x2f\x06\x11\xd1\x7f\x15\x6f\xf7\x84\x43\x95\xe2\xa9\x6c\xce\x66\x5e\x51\x50\x12\x85\x3b\x47\x34\xcb\x7f\x39\x46\xa6\xa9\x51\x49\x12\x51\xc6\x89\xf4\xc4\x7f\x17\x31\x5f\x20\x93\xf3\x0c\x18\xc7\x3d\xa1\xbe\x95\xd1\xb1\x15\x02\x9e\xc8\xe9\x7f\xe0\x58\x86\xa0\xf8\x4a\xc6\x9f\x34\x0c\xe9\x75\xda\xf6\x64\x50\xc5\x69\xd1\x0d\xd7\xa1\x3d\xbe\xc2\xac\x61\x62\xc7\x6e\x79\xf5\x67\xca\xa3\x4d\xba\x97\xa6\x4c\xe3\x85\x00\x21\xb5\xd3\x7c\xfe\xa9\xe3\xb6\xa6\xe2\x6c\x09\xd2\x30\xad\x8e\x10\x4f\x1a\x83\x34\xa7\xe8\x96\xeb\x3a\xb7\x8e\xab\xcc\xd0\x3e\xff\xca\xa7\xf4\x76\x41\xbc\xcc\x0a\x8f\xd7\x56\x78\x32\x3d\xad\x01\x47\x75\x5e\xe2\x5c\x50\x17\xa8\xd5\xa8\x1c\xee\x42\x27\xc9\xcc\xca\x59\xb6\xeb\x95\xa9\x5a\xbd\xd0\x40\x5e\x0b\xab\x4c\x0f\x47\xcf\xc7\xf5\x10\x76\x63\x7b\xc3\x56\x56\xc2\xd0\xb7\x1b\xa0\x30\x09\xf0\x0c\x6e\xa2\xc0\x05\x5a\x38\x69\xe4\xef\xf4\x9d\xf2\xe9\xec\xbd\xad\xa4\x88\xb6\xde\xbe\xa5\x97\x3f\x8d\x77\x3f\xad\x57\xa7\x51\x57\xdb\xff\xa8\xcd\x4c\x1a\x76\x94\x75\x2f\xe2\x4d\xe1\x09\xe9\xf6\x2b\x3f\xd7\x55\x67\x7a\x4a\x9c\xd1\xf1\x2c\x4e\x2f\x3a\x4e\xac\xa3\x3a\x31\x6d\xbd\xe1\x15\xe5\xd3\xbd\x36\xa8\x83\xed\x46\xb1\x38\xfc\xf1\x3f\x5d\xaf\x35\x96\x0b\x1e\x5e\x04\x69\x4a\x4b\x5b\x95\x9c\xc4\xfb\x97\xd2\x62\xce\x50\x5e\x27\xec\xa4\xc1\xe6\xc0\xbe\x75\x3c\xaf\xed\xd6\x68\x87\x89\x27\xea\x8b\xaa\x32\x6c\xf4\x2f\xf4\x5e\x63\xde\xfa\x78\xf7\x37\xc7\x56\x68\x38\x8e\xb3\xd5\xb9\x88\x17\x64\xf2\x28\xa8\x5f\x45\x2b\x69\x8b\xbe\x40\x11\xfc\xd1\xfd\x81\x22\x91\x2d\x42\x4c\x5d\xa7\x20\xfb\xf1\x79\x5d\x1f\xcd\xb2\x55\x71\x1b\x76\x71\xc3\xd4\x07\x32\x27\x4c\x1c\xfd\xb2\xcb\x1c\x1a\xf2\x17\x9e\x97\x00\xb3\x72\x30\x79\x8b\xe3\x1d\xfa\x87\x8d\x8e\xd0\x06\xdc\x93\x20\xb0\xa8\x73\x1a\x85\x0c\x1e\x98\x55\x31\xfa\xf4\x88\xff\x43\x0e\xf3\xbc\xe4\x78\x8e\x33\x3c\x2f\xd4\xe4\x81\x7a\xeb\xb6\x89\x5d\x25\xb4\x95\xb0\x43\xcc\xf0\x40\xe2\xa9\x3c\x8f\x13\x2e\xef\x00\x31\xba\x80\xf2\x6c\x41\x9a\xf4\x6c\x69\x3f\x49\x89\xdb\x5f\x12\xf7\xa5\xea\x5c\x1f\xf6\xb3\xcc\xd5\xdf\x52\xf9\xd9\xab\xdc\x3c\x98\xeb\xaa\x5c\x85\x76\x5a\xf6\x3a\x46\xa7\xd3\xe9\xc8\x74\x22\xfe\xed\x54\x73\xf2\x78\x38\xfa\x53\x84\xa8\xf1\xd0\xee\x09\x90\x14\x69\xbf\x93\x41\x43\xd3\x38\xfb\x3d\x4f\x2a\xe0\xaa\xf9\x8d\xd0\x84\xed\x47\x7c\x3e\x83\x1f\x18\x9e\x5b\xf4\x73\x9f\x20\x36\x2b\x91\x59\x1b\x7b\x3b\x0d\x81\x77\x72\x31\xdd\xdb\xe6\xe2\x4c\xdc\x55\xdb\xcb\xb8\x5b\x7b\x8d\xee\x67\x0c\xbd\x0b\xf1\xae\x35\xad\xc7\x07\xc7\x28\x20\x09\xd3\xed\xfe\x36\xf5\xfb\x6e\x05\x79\xd5\xd6\x36\x44\xc8\xfc\x86\x9f\xcd\x17\x92\xaf\x8e\x1b\x83\x77\x49\xe2\xac\xaa\xab\x0c\x2b\xf5\xd8\x8e\xd5\x52\xd6\xd5\x00\x64\x05\x10\x96\x17\xb3\xf5\x05\xa9\xbb\x88\x03\xd1\x5b\x39\x8d\x16\x21\xdb\x2e\x2b\xa2\x62\x66\xd4\x4d\xa6\x99\x52\x37\x85\xca\x1b\xbe\x90\x3b\x5e\xd2\xce\xc6\x1e\xa9\x5a\x0e\x2f\x78\xd9\x9e\x66\xe0\xfc\xb9\xa1\x73\xb5\xa1\xc0\xad\x11\x4b\xa8\xaa\x3e\x61\xa1\x16\x49\x0b\x3d\xd2\x89\x51\x83\x23\x9f\xde\xc0\xec\x76\x98\xed\x67\xbd\xd0\x9b\xbc\x19\xa9\x1e\x8d\x4a\x6d\xc8\xb2\xcd\xd4\x94\xe2\xcf\x21\xe1\x33\x0a\x57\xe7\x5e\xd5\x0c\xbc\x9d\x87\xc8\x1c\xa0\x73\x8f\x6d\x5f\x4d\xec\x7c\x89\xad\x99\x58\xf3\x0d\x66\x1d\xae\x7a\xb7\x6a\x63\xb3\x6b\x0a\x2c\xc3\xd1\x35\xa3\xac\xda\x2e\x95\xde\x0d\x8b\x1c\xb5\xed\xf3\x4d\x65\x31\xf4\xa4\x4b\xef\xfe\xe6\x63\x03\xf3\x8f\x54\xf9\x33\xa8\xbb\xad\xaa\x9f\x50\xcd\x8f\x7f\x73\xb4\x61\xea\x55\x57\x63\x82\x23\x70\x7d\x99\x2b\xdb\x5d\xe4\xa9\x30\x92\xdf\x80\x6b\xb9\x99\xeb\xd5\x56\xab\xf1\x30\xdf\xca\xe2\x30\xaf\x7a\x77\x37\x9e\x13\xd7\x55\x6f\xe1\x8d\x87\x49\x7e\x45\x46\x37\xa3\x32\x63\x3b\x8e\xf3\xa3\xed\x6a\x8a\xef\x61\x3f\x2a\x59\x99\x79\x9e\xa9\x98\x7d\x99\x32\xf4\xd3\x7e\xf7\xff\x16\xe2\x56\xff\x5e\x96\xa2\xb5\x1f\x1c\x1c\x4a\xd1\x57\x58\x8a\xe6\xdf\x1e\x1c\x4a\xd1\xd2\x6f\xb7\x52\xb4\xda\xc7\x3d\x2f\x36\x72\xeb\xd1\x0e\x15\xec\xa1\x82\xdd\x42\xc2\x57\x57\xc1\xca\xd4\x71\x11\x42\x7a\xe4\xd3\x9e\xf0\xf6\xad\x98\x6d\xfc\x3a\x4b\x87\x7b\x28\x66\x9f\xb6\x98\x6d\xf1\xdd\x56\x15\xef\x50\xe0\x1e\x0a\xdc\x2a\x47\x87\x02\xf7\x50\xe0\xd6\x65\x52\x99\x98\xfe\x9f\x0a\xdc\xe1\xe8\xc3\xe8\x72\xb4\xd7\x35\xae\x2b\x3e\x5a\xdc\xcb\x1a\xb7\xf6\x7b\xca\x9f\xad\xc6\x4d\xbf\xd2\xf2\x13\x46\x9d\x69\x1c\x10\x76\x12\xba\x97\x94\xcc\xa7\x31\x9e\x41\x7a\x86\xeb\x21\xb3\x67\x96\xa9\x7c\xd9\xee\x5c\x28\xd5\xad\xab\xb6\x1a\x2a\x2d\xb5\xca\x1a\x87\x16\x71\x13\x1e\xc8\x54\x31\x35\xb4\x47\x0f\x30\xdb\x8f\xf0\x23\xe5\x7f\x81\xf0\xa3\x0b\x2b\x2b\xe3\x7f\x01\x00\x00\xff\xff\x43\x41\x20\x7b\x02\x50\x00\x00")

func templateGfTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateGfTmpl,
		"template/gf.tmpl",
	)
}

func templateGfTmpl() (*asset, error) {
	bytes, err := templateGfTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/gf.tmpl", size: 20482, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/gf.tmpl": templateGfTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"gf.tmpl": &bintree{templateGfTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
