// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/gf.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateGfTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5f\x73\xa3\x36\x10\x7f\x0e\x9f\x42\x65\x7c\x37\x90\x71\xe4\xe9\xab\x3b\x79\x48\x63\x37\xf5\x4c\x9a\xb8\xb1\xef\x9e\xad\x33\x0b\x51\x03\x02\x0b\x39\x7f\xea\xe1\xbb\xdf\x48\x80\x0d\x46\x10\xe7\xe2\x5c\xb8\x24\xbc\xc4\x48\xbb\xcb\xea\xa7\xfd\xed\x6a\x95\x88\xcc\x6f\x88\x07\x08\x98\xe0\x10\x0b\xc3\xa0\x41\x14\x72\x81\x2c\xe3\xc0\x04\x26\x1c\x08\xc2\x1e\x30\x61\x96\x5f\xa5\xa8\x69\x18\x07\xa6\x47\xc5\xf5\xf2\x1b\x9e\x87\x41\xcf\x0b\x3d\xb7\xe7\xb9\x3d\x97\x93\x00\x7a\x9e\xa9\x9f\x65\x20\x7a\xde\xb5\x10\x91\x69\x18\x08\x21\xb4\x5a\x1d\xa1\x0e\x89\xe8\x09\x63\xa1\x20\x82\x86\x0c\xf5\x8f\x51\x07\x6f\xde\x63\x3c\x64\xe2\x6a\x38\x99\x9e\x8c\x47\x28\x49\xd6\x5a\x9c\x30\x0f\x50\x27\x50\xf2\x25\x0b\xf8\x1f\xea\x38\x3e\xdc\x11\x0e\x71\xae\x21\x1f\x73\xb5\x42\x9d\x00\x8f\x6f\xbc\x31\x11\xd7\x28\x49\xcc\xb5\x31\x60\x8e\x94\xb4\x0d\xa3\xd7\x43\xe7\x34\x16\x52\x14\x5f\x90\x00\x50\x92\x5c\xc1\x62\x09\xb1\x40\xd8\x10\x0f\x11\xd4\x4e\xc7\x82\x2f\xe7\x02\xad\x8c\x83\x31\xf1\x60\x42\xff\x07\x84\x28\x13\xf2\x13\xb3\xff\xe2\x90\xf5\xcd\x28\x1b\xef\x86\x01\x15\x10\x44\xe2\xc1\x9c\xa5\xd2\xd3\xf0\x06\x98\x46\x5a\x8d\x97\xc5\x27\x72\x7b\xd4\x13\x0b\x4e\x99\x97\x8b\xc7\x21\x17\x25\xc9\x2d\xa0\xdc\x14\xd8\xbf\x28\xf8\x4e\x09\x16\xb5\x05\x82\x78\x6a\xde\xc5\x13\xb5\x8c\x29\xf1\x50\x92\xac\x56\xe8\x8e\x8a\x6b\x35\x1d\x57\x37\x26\xb5\xa5\xd5\xa0\xcc\x81\xfb\x4c\xaf\xe3\xe6\x50\x49\xd8\xe4\x97\x8e\x11\x4e\xdf\x52\xdc\xd7\x3f\x4a\x3e\x51\x17\xb1\x50\x28\x97\x80\xc5\x54\xd0\x5b\x28\x8a\x14\xc4\x3a\xa4\x1c\x3d\xae\x2e\x7c\x94\xb3\xdb\x06\xf4\x46\xf0\x04\x08\x9f\x5f\x93\x6f\x7e\xe5\x8b\x1b\xa5\x0d\x56\xb9\x65\x39\x28\x0d\xb9\xf8\x82\xfa\xbe\xd4\xfe\x4a\xfc\xa5\x34\x71\x58\x5c\x6a\xc7\xc5\x53\x19\x47\x49\x82\x66\x39\x20\x49\x32\xd3\xfa\xb5\x05\xcb\x7a\xd8\x8f\xb5\x9e\xbd\xb0\x57\x1a\x8f\xb6\x86\x0a\xaf\x89\xe2\xd2\x19\x34\x51\xa9\x66\x76\xcd\x24\x69\x72\x34\x50\xcb\xc2\xa3\xc1\xda\xc1\x75\x58\x36\x46\x23\xa6\xd2\x0f\xb9\x18\x9c\xfd\xcd\x60\x9b\xe5\xf6\x8a\x81\x3b\xdb\x04\x61\xea\xf9\x29\x07\x22\xa0\xc1\xf9\x7a\x81\x92\xff\xbf\x38\x05\x7f\x9c\x5b\x1a\x5e\x29\xc8\xea\x68\xa5\x91\xff\x4a\x7c\xea\x10\xd1\xc0\xc2\xa3\x7c\x35\x11\xa7\x4c\xb8\x68\xf6\x29\x46\xb7\x7d\xf3\x53\x6c\xce\xd2\x99\x5d\xcd\xd5\xb0\x6d\x7f\xac\x4a\x15\x34\x19\xad\x48\xb7\x42\x90\xa6\x59\xfd\xc8\x9c\x55\xb7\xa6\x89\x8b\x9a\xcc\xd0\x3a\xff\x1f\x4b\x1a\x5f\x22\xa7\x99\x7a\xf5\x02\x1f\xd4\xab\xa1\x92\x82\xec\x83\x7a\x2f\x4d\xbd\xcd\x77\x46\x41\xb0\xd4\x02\xde\xba\x35\x3d\x46\xc7\x01\xf8\xd0\x48\xc7\x7a\x81\xd7\xaf\xe4\xee\x92\xcd\xd1\x05\xdc\x15\xbd\x9b\x00\xbf\xa5\x73\xf8\x9b\x30\xc7\x07\x6e\xcd\x7d\x0a\x4c\xa0\x43\x60\x02\x9f\xaa\xdf\x5d\xc4\x21\x8e\xb2\x79\x24\x4d\x58\x1c\x1d\xaa\xbe\x05\x67\x4b\x53\x22\x4b\x3f\x55\x93\xfd\x10\xbe\x52\xef\xb6\x2d\x3b\x00\x95\x2e\x3c\x2c\x3f\x04\xdc\xb2\xcb\xbd\xce\x98\x83\x4b\xef\xa5\x84\xd9\x23\x11\x35\x8b\xc0\x2b\x16\x96\x9a\x99\x4c\x7a\x3b\x65\x6d\xec\x54\xda\x9f\xb2\x46\x61\x3b\x37\x5e\x50\x47\xee\xc0\x98\xc4\x73\xe2\x4b\x47\xa2\xf4\xd7\x7a\x6f\x24\xa0\xb2\xb7\xc8\x95\x62\xfc\x27\x65\xce\xa6\xaf\xb2\x36\x4d\xd5\xd9\x70\xda\x97\xe0\x6e\x1c\x4a\x92\xde\x6a\x85\x62\x46\x6e\x60\x83\xb9\xd9\x2d\xf9\xff\xf4\xee\xad\x80\x10\x61\x0e\xb2\x42\x8e\x2c\x58\xc8\x86\xee\x0a\x16\x2a\x9e\x4c\xd3\xae\x0c\xf9\x34\x16\xa6\x6d\x23\x8b\xc9\xaf\xe1\xd3\xd0\x49\xe5\x6a\x72\x4d\x26\x91\x24\xdd\x27\x1e\x7c\xe5\xa3\x8d\x13\x3b\x0b\xfe\xfc\xb9\x25\x1c\x71\x58\xd4\x75\x91\x25\x59\xea\x22\xe0\x5c\x42\xc4\xf1\x98\xf0\x18\xac\xcf\x1c\x16\xf6\x1f\x6a\xf4\xb7\x63\xc4\xa8\xbf\x65\x5d\x3e\x85\xd0\xb5\x78\x17\x7d\x2e\xc7\x67\x55\x5e\x3e\x43\xce\x43\x2e\x11\xeb\xe7\x37\x01\x58\x0d\x8d\x89\xec\xe6\x05\x70\xb9\xfd\xdd\x7a\xd5\xbe\xfa\x09\x9c\x57\x65\x12\xbb\x34\x94\x05\x54\xc1\xd9\x6e\xbe\xc8\x94\x87\xb8\x88\x0a\xae\x98\xfb\x77\x09\xfc\xc1\xb2\xab\x13\xe7\x34\xa0\xc2\xe2\xb0\xc0\x79\xfb\xad\x11\xba\x74\xdd\x18\x84\xb5\x16\x4b\xfb\xee\x23\xf4\xbb\x8d\x0e\xd1\x23\xba\x27\xbe\x6f\x71\x7c\x1a\x32\x01\xf7\xc2\xb2\x6d\xdd\x56\xfd\x94\x4d\x91\xa1\xb3\xa7\xbd\x78\x8e\x8b\x03\x22\x48\x3f\xdb\xc2\xca\xe4\x28\x96\x5e\xf6\x91\xe0\x4b\x28\xcf\x16\x7c\xc8\x58\x66\xef\x2b\xc7\xf4\x56\xd4\x79\xad\x44\xe3\x41\x3b\xf3\x8c\xbe\xc5\x7e\x6f\x69\x86\x3a\xe9\xf2\x32\x34\x4a\xe5\x2f\x49\x2c\x93\x3a\xa6\xfd\xbc\xbc\x74\x06\xa2\x98\x1d\xba\x88\x3a\xaf\x97\x21\xce\xa0\x3d\x09\xa2\x92\x1e\xb4\x09\xe0\xa0\x81\xfd\xe3\xcb\x49\x9b\x8f\x18\x73\x75\x0f\xd4\x4a\xf2\xd7\x5e\x51\xbd\x37\xfe\x3f\x99\xce\x29\x72\xba\x73\xc6\x2e\x97\x0a\xdb\xf2\xcf\xbe\xa3\xae\x37\xd6\x7c\xa7\xa6\xd3\xad\xf6\x98\x8d\x6a\xf2\x99\x80\xc8\x75\x74\xdd\xab\x3a\x4e\xe9\x26\x34\xf0\x6d\x7b\x54\x77\x95\xad\x71\x61\xef\x9f\xd6\xdf\x39\xec\x28\xb2\x8b\xf3\x3f\x08\xf9\x0b\xc0\xbd\x2b\xd4\x7b\x84\x79\x17\xfc\xea\x6e\x7d\x6a\xa7\x26\xe4\x16\xda\x71\x0a\x4f\x33\xc4\x5b\x2a\xb3\x5f\x5a\x7f\xc8\x5e\xaa\x7b\xdf\x56\x96\xda\xda\x2b\xe9\xf7\x56\x6a\x5f\xfe\xa8\x9d\x42\x7d\xc9\x60\x34\xb0\xa8\xf3\x0b\x94\xe8\xc6\xbb\x77\x9d\xee\x47\x89\xde\x6f\x89\xde\xe1\x56\x7e\x5b\xef\xa3\x6c\xbf\xcd\xb2\x9d\x26\x8f\x37\x54\xb6\x07\xc3\xf3\xe1\x74\xd8\xf6\xca\xed\xa8\x7f\x11\xb5\xb2\x72\xd7\xfe\xf7\xea\xa3\x72\x3f\x52\xb9\x9f\x52\xb4\x53\x94\x1b\x8a\xf6\xf0\x1e\xe6\xed\x48\x11\xa9\xab\x3f\x3f\x45\xe8\xa8\x9f\x18\xdf\x03\x00\x00\xff\xff\xc1\xdf\x97\xad\xa2\x29\x00\x00")

func templateGfTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateGfTmpl,
		"template/gf.tmpl",
	)
}

func templateGfTmpl() (*asset, error) {
	bytes, err := templateGfTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/gf.tmpl", size: 10658, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/gf.tmpl": templateGfTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"gf.tmpl": &bintree{templateGfTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
