// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/service.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xcd\x6e\xdb\x3c\x10\x3c\x7f\x7e\x8a\x05\xa1\x5c\x3e\x34\xf2\x3d\x40\x0e\x45\x93\x16\x01\x0a\x23\x88\xd3\x5c\x2b\xc6\x5c\xc9\x6c\x25\xd2\x15\xd7\xf9\x29\xa1\x77\x2f\x48\x51\xb2\x64\x4b\x4a\x0f\x05\xda\xb4\xbe\xd1\xdc\x9d\xe5\xcc\x90\x03\x58\xd6\x9e\xc2\xa3\xa4\x35\xe0\x13\xa1\x12\x10\x01\xbb\xe6\xab\xaf\x3c\x43\x06\x4c\xe0\xfd\x36\x63\x70\x5a\x55\xb3\xff\xac\x05\xc2\x62\x93\x73\x42\x60\x6b\xe4\x02\x4b\x06\x31\x54\xd5\xcc\x5a\x70\xc8\xaa\x9a\xb9\x65\xc9\x55\x86\x10\x29\x38\x3b\x87\x28\x5e\x68\x81\xc6\x95\x00\x00\xac\x05\x81\xa9\x54\x18\x26\xcf\xad\x85\x5c\x3f\x62\x09\x91\x8a\x17\xbc\x40\xa8\xaa\xcf\xe1\xcc\x00\x99\xcf\x1d\x6a\x57\x06\x69\x80\xd6\x08\x85\x16\x98\x03\x2a\x92\xf4\x0c\xa9\x2e\xfd\x66\xbf\xd3\xac\xd6\x58\xf0\xd8\x8f\xa1\xe7\xcd\x41\x99\xca\xed\x8a\xc0\xfa\x7a\xcd\xee\xb4\x21\x9f\x7a\xf2\x2a\x7e\x2f\x31\x17\x2d\xfd\x6e\x63\x44\x3c\xf3\x4d\x69\xbc\xf4\x83\x6e\x79\x06\x55\x65\x6d\x6d\xa6\x2b\x9b\xda\x81\xb7\x4a\x69\xe2\x24\xb5\x32\x61\xde\x20\x42\x2a\x81\x4f\x01\x17\xa5\x0d\x4b\x47\xd9\x9d\x74\xee\x9d\x6e\x8d\xde\x39\xbe\xcf\x6b\x77\x45\xde\xa1\x79\xea\x4e\x5c\xe9\xa2\x40\x45\xcc\x09\x1b\xc0\xc8\x14\x22\xde\xb2\x0c\xaa\xba\xb4\x2f\x15\xdd\x5c\x2e\x6f\xf7\xb1\xc3\xf8\xf8\x06\xb9\xe0\xf7\x39\x0e\xb5\x87\x57\xd0\xba\xe6\x0d\x71\xb7\x61\xad\x1f\x93\xc6\x0b\x99\xe7\x0e\x7d\xc7\xf3\xad\x1b\xf1\x7f\x57\x74\x94\xc6\xb7\xee\x26\x5b\x80\xd2\xe4\x87\xa1\x32\x92\xe4\x83\xab\x24\x8d\x67\xf5\x12\x73\x13\x8c\xdc\xb7\x46\x17\x92\x9c\xdd\x0c\xa2\x51\x4b\x1b\x89\x23\x6e\x87\xe1\x03\x90\xd7\x23\x71\x40\xde\xde\x56\x35\x6b\xa2\xf8\xae\x44\x4e\xd8\xcb\xd1\x0d\x7e\xdb\xa2\x21\xe8\xe4\x6c\xa2\xeb\xef\x0c\xdd\x2f\x0e\x90\xf7\x6f\x3a\x41\x07\x98\x3b\x9e\x4b\xc1\x09\x47\x10\x3d\x07\xcf\x61\x53\x4a\x45\x29\x24\x27\x06\x1e\xce\xd8\x89\x61\x49\x5d\x19\x9a\x38\x45\x62\x24\x31\xaf\x2d\x02\x13\x72\xfe\xc5\x94\x7f\xda\x88\x9f\x48\xf9\x44\xd7\x31\xe5\x43\xaf\x6b\x2f\xb1\xde\xbf\x63\xca\x8f\x29\xff\x4d\x29\xbf\xc0\x1c\x5f\x4e\xf9\x44\xd7\x41\xca\xaf\x2e\xc2\x5f\xec\xab\x8b\xae\xee\x3a\xb5\x6a\x32\xad\xb1\x14\xc1\x80\xb8\x6f\x44\xd2\x4e\xec\x26\x3b\xe9\xcb\xdf\x89\xfa\x80\xf4\x92\xa2\xb1\x96\x3f\x51\xce\x47\x69\x5e\xd4\xe3\x7a\xae\x91\x46\x65\x5c\xf3\x0c\x97\xf2\x3b\x82\x54\xe4\x7e\x27\x5f\x8c\x56\x67\x6c\x13\xb6\xdf\xb8\x77\x85\xc5\x86\x9e\x59\xd2\xc3\x2c\xb6\x05\x0c\x60\x16\xdb\x62\x10\xb2\xd4\xa5\x6f\x75\x04\xa4\xca\x1a\x88\xd1\x25\x1d\xf4\xd7\x1f\x8a\x9d\x6f\xc6\x7a\xf9\x23\x00\x00\xff\xff\x61\x6a\x53\x5a\x8b\x0e\x00\x00")

func templateServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateServiceTmpl,
		"template/service.tmpl",
	)
}

func templateServiceTmpl() (*asset, error) {
	bytes, err := templateServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/service.tmpl", size: 3723, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/service.tmpl": templateServiceTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"service.tmpl": &bintree{templateServiceTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
