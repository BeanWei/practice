// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/service.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5f\x6f\xe2\x38\x10\x7f\x4e\x3e\x85\x2f\x62\x57\x49\x45\x1d\xdd\x2b\xa7\x3e\xf4\x0a\xd7\x43\xaa\x5a\xae\xb0\xfb\x8c\x97\x4c\x52\x5f\x83\x93\x3a\x43\xb7\x3d\x94\xef\x7e\xb2\x93\x40\x48\x1d\x60\xb7\x74\x97\x95\xca\x0b\xd8\xf3\xc7\x33\xbf\xcc\x6f\xe2\x21\x65\xb3\x7b\x16\x01\x01\x81\x12\x32\xb4\x6d\x3e\x4f\x13\x89\xc4\xb5\x2d\x07\x04\x06\x30\x4f\x7c\x10\xe8\x6c\x2e\x95\xaa\x63\xdb\x96\x13\x71\xbc\x5b\x7c\xa1\xb3\x64\xee\x47\x49\x14\xfa\x51\xe8\x87\x92\xcd\xc1\x8f\x1c\xb3\x54\x00\xfa\xd1\x1d\x62\xea\xd8\x9e\x6d\xfb\x3e\xb9\xe2\x19\x2e\x97\xa4\x43\xaf\xd9\x1c\x48\x9e\xdf\xc2\xc3\x02\x32\x24\xd4\xc6\xe7\x14\x5a\xc5\x19\xca\xc5\x0c\xc9\xd2\xb6\x46\x2c\x82\x31\xff\x0f\x08\xe1\x02\x09\x21\x64\xfa\x6f\x96\x88\x9e\x93\x96\xfb\xdd\x64\xce\x11\xe6\x29\x3e\x3b\xd3\x42\x7b\x92\xdc\x83\x30\x68\xeb\xfd\x4d\xf5\xb1\xc2\x42\x7f\x32\x94\x5c\x44\x95\x7a\x96\x48\xdc\xd0\x54\x2a\xcb\xe5\x29\x91\x4c\x44\x40\x3a\x21\xe9\x9d\x91\x0e\xfd\x8b\x43\x1c\x64\x24\xcf\x6d\x52\x7e\x94\x4e\x07\x59\xa4\xe5\x21\x1d\xeb\x34\x26\x2c\x22\x79\xbe\x5c\x92\xaf\x1c\xef\xb4\x38\x2b\xec\xcf\x85\x48\x90\x21\x4f\x44\x56\xfa\x32\x5a\x70\x11\xc0\x53\x69\xd7\x09\x2b\xa8\x14\x6c\xea\xa4\x33\x42\x8b\x15\x88\xa0\xfe\x63\x23\x26\x1e\x12\x91\xa0\x0e\x09\x44\xc6\x91\x3f\x42\x5d\xa5\xa6\xd6\x61\xab\xa0\xca\x24\xea\x51\x0e\x04\xde\x0e\xc6\x13\x1d\x6c\xd3\x81\xd9\x09\x1d\x03\x93\xb3\x3b\xf6\x25\x7e\x71\xe2\xda\x68\x8d\x55\xe5\x59\x6d\x2a\x47\x21\xbd\xe6\x71\xac\xac\x3f\xb3\x78\xa1\x5c\x9c\xd4\x53\xed\x84\x74\xa2\xea\x28\xcf\xc9\xb4\x02\x24\xcf\xa7\xc6\xb8\x1a\xb0\xac\xb6\xe3\xcc\x18\xd9\x1b\x47\x65\x88\xa8\xb1\x55\x5b\xe6\x9a\x4b\x97\xb0\x8d\x4a\x2d\xd2\x15\x93\x94\xcb\x61\x5f\xa7\x45\x87\xfd\x55\x80\xab\xb2\xdc\x5a\x8d\x94\xab\x38\x54\x32\xb4\xfc\x2e\x61\x9b\x56\xfe\xea\x85\x3b\x5d\x17\x61\x11\xf9\x85\x04\x86\xb0\x25\xf8\x76\x85\x8d\xf8\x7f\x71\x0a\x7e\x3f\xb7\x0c\xbc\xd2\x90\xb5\xd1\xaa\xc6\x79\x97\x67\xd7\x3c\xde\x30\xfd\xcc\x62\x1e\x30\x04\xaf\x9d\x91\xa7\x55\x66\xa9\xe4\x02\x43\x32\xfd\x90\x91\xc7\x9e\xf3\x21\x73\xa6\x85\xc4\xe4\xaf\x2d\x12\x03\xf3\x0e\xc7\xb0\xc2\xc0\xd0\xdd\xea\xd4\xab\x15\x6c\xd1\xe1\x4f\x9d\xe9\xcb\xc7\xb4\x8d\x97\x86\x2e\x71\x74\xf1\xef\x6a\x20\x9f\xd2\x60\x3b\x0d\xdb\x15\xde\x69\xd8\x42\x43\x0d\xd9\x3b\x0d\xdf\x69\xb8\x3f\x0d\xfb\x10\xc3\x56\x1a\xb6\x2b\xfc\xfc\xb7\x79\xb8\x10\x33\x72\x0d\x5f\xeb\xd1\x8d\x41\x3e\xf2\x19\xfc\xcd\x44\x10\x83\x74\x67\x31\x07\x81\xe4\x04\x04\xd2\x0b\xfd\xbb\x4b\x24\x64\x69\x29\x27\xca\x85\x2b\xc9\x89\x1e\x14\x68\x99\x9a\x56\x59\xc4\x85\x99\x1a\x40\xe8\xad\x5e\x7b\x9e\x9a\x02\x74\x9b\x88\xa8\x3a\x08\xa4\xeb\xd9\x2b\x60\x3b\x2c\xe5\x23\x09\x21\x7f\x52\x1a\x8e\xcf\x52\xee\xd4\x81\x57\xf2\xf3\x4d\xba\x9b\xd8\x7e\x3e\x1a\xd6\xad\x9a\x9c\xad\xfb\xa0\xc5\x71\xde\x8b\x66\xb7\x8e\xe4\xcc\x6c\x62\x28\x08\xbd\xce\xe8\x9f\x5c\x04\x15\x7a\xce\xe5\x60\xd2\x53\xe8\xae\xfd\xe5\xb9\xbf\x5c\x92\x4c\xb0\x7b\x58\x83\xee\x74\xcd\x40\x6a\xbc\xac\x47\x26\x89\x84\x87\xb6\x01\xcb\xb6\x2c\x1e\x12\x90\x52\x21\x22\xe9\x88\xc9\x0c\xdc\x8f\x12\x1e\xbc\x3f\xf4\xee\x6f\x67\x44\xf0\x58\x7b\xb2\x6a\x8f\xce\x95\x5d\xf2\x71\xf3\xf9\x68\x15\x6b\x20\x65\x22\x55\x11\xf6\xaa\x51\x93\xea\xad\x11\x53\xe3\x22\x82\x54\x19\x76\xd7\xaa\x3d\x0d\x1b\x48\xa9\xf7\x72\xcf\xb6\xac\xdc\xb6\xf5\x59\xdd\x2a\xac\xa2\x8c\x68\x3d\x7a\xaa\xb4\xff\x59\x80\x7c\x76\x3d\xfd\xfb\x8a\xcf\x39\xba\x12\x1e\x68\x35\x27\x16\xfb\x37\x61\x98\x01\xba\x2b\x49\x31\x13\x9e\x92\xdf\x3d\x72\x42\x5e\xaa\x9f\xc7\xb1\x2b\xe9\x45\x22\x10\x9e\xd0\xf5\xbc\x35\x3c\x87\x02\x42\x3d\x87\x5d\xf9\xef\x75\x42\x9f\x21\x53\xd6\x0a\x29\xb5\x1e\x66\xca\x75\x8f\xa0\x5c\x80\xda\x50\xbe\x72\xef\x35\x85\xe5\x2f\x79\xb0\x67\x75\x99\x67\x8e\x63\x2d\x2e\x1e\x14\x01\x5d\x02\x0e\x05\xba\x0e\x0f\x1c\x6f\xcf\x9a\xbb\x04\xac\x17\x48\x97\xf0\xe0\x0d\x8a\xe4\x12\x0e\x59\x23\x65\x85\x54\x05\x61\x35\xaa\x61\x74\x33\x3e\x60\x9f\x69\x1d\xe0\x8e\xb5\x18\xf6\x79\xea\x45\x52\xaa\xd5\x34\xaf\x26\xbb\x6e\xbf\x8d\x0b\xe0\xeb\xfe\x54\x31\x3b\xda\x3e\x00\x36\xed\x5e\x5e\x84\x5a\x4d\xd4\x67\x0c\x58\xe9\x9b\xae\x57\xba\xaf\x9a\x04\x0d\xa8\x9a\x91\xb4\xfd\xd7\xd2\x38\xfa\xa0\x47\x9a\x2f\xbd\x3b\xc4\xbb\x82\xfd\x0e\x58\x0f\x0c\xe9\x3e\x70\x1e\x08\xca\x5d\x38\x6d\xbd\xbd\x5b\x96\x35\x66\x8f\xf0\xc6\xaf\xd7\x82\xa9\x3f\xb0\x79\x7e\x3a\xf4\xab\xb4\x75\xf4\x3e\xd6\x06\xfa\x8a\xb7\x69\x91\xeb\x8d\x80\x61\xdf\xe5\x41\x71\x05\x3b\x96\xae\xba\x75\x9e\x6f\xda\xbd\x77\xd5\x6f\x12\xbf\x77\xd5\x6f\xc0\xe9\x08\xba\x6a\xc1\xd3\x1f\xd7\x55\xfb\x83\xab\xc1\x64\x70\xe0\xc6\xda\xfa\x67\xca\x2f\xd6\x58\x77\xf4\xd4\x22\xcd\xcd\x9e\x3a\x78\x82\xd9\x1b\x97\x48\x71\xec\xab\x4b\xa4\xac\x88\xdc\xfe\x3f\x00\x00\xff\xff\x17\xa2\xcd\x59\xb1\x1e\x00\x00")

func templateServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateServiceTmpl,
		"template/service.tmpl",
	)
}

func templateServiceTmpl() (*asset, error) {
	bytes, err := templateServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/service.tmpl", size: 7857, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/service.tmpl": templateServiceTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"service.tmpl": &bintree{templateServiceTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
