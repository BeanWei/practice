// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/gf.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateGfTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x73\xda\x38\x10\x7f\x86\x19\xbe\x83\xce\x43\x3b\x76\x86\x88\xb9\x3e\x72\x93\x87\x5c\xe0\x72\xcc\xf4\x5a\x2e\xa4\x7d\xe9\x74\xae\x2a\x5e\x1b\x5d\x6c\x99\xc8\x22\x4d\x8f\xf1\x77\xbf\x91\xfc\x07\xd9\xc8\x0e\x4d\x68\x43\x1a\x78\x09\x48\xbb\xab\xfd\xfb\xd3\x4a\xca\x82\xcc\xae\x88\x0f\x08\x98\xe0\x10\x8b\x4e\xbb\xd3\xa6\xe1\x22\xe2\x02\xd9\x9d\x76\xcb\x02\x26\x5c\x08\xa3\x7e\x36\x6d\x75\xda\x08\x21\x64\xad\x56\x48\x70\x1a\x5e\x50\x7f\x2e\xa6\x82\xa3\x2e\x9e\xce\xe6\x10\x12\x64\xf5\x63\xf5\xc5\x42\x49\x62\x49\x61\x2d\xcb\xa7\x62\xbe\xfc\x8c\x67\x51\xd8\xf7\x23\xdf\xeb\xfb\x5e\xdf\xe3\x24\x84\xbe\x6f\xd5\x4c\x33\x10\x7d\x7f\x2e\xc4\x42\x49\x90\x0b\xae\x56\xc7\xa8\x4b\x16\xf4\x94\xb1\x48\x10\x41\x23\x86\x06\x27\xa8\x8b\xd7\xbf\x63\x3c\x62\xe2\x62\x34\xbd\x3c\x9d\x8c\x51\x92\xac\xd9\x38\x61\x3e\xa0\x6e\xa8\x18\x4a\x22\xf0\x5f\xd4\x75\x03\xf8\x42\x38\xc4\x05\x4b\x6e\x5e\x37\xc4\x93\x2b\x7f\x42\xc4\x3c\xb5\x24\x17\x07\xcc\x55\xb4\x8e\x54\xad\xdf\x47\x92\x14\xbf\x21\x21\xa0\x24\x41\xb8\xd3\x16\x5f\x17\x50\x1e\x8c\x05\x5f\xce\x04\x5a\xa5\x32\xc6\xc3\x74\x76\x3c\xc4\x97\x92\x34\x49\xe4\xef\x2f\x54\xcc\x2b\xe6\xfc\x41\x21\x70\x63\x3c\x55\xdc\x97\xc4\xc7\x54\x2e\xfc\x69\xb5\x42\x38\xfb\x0b\x41\x0c\xd9\x57\x25\xaf\x20\xcd\xe7\x33\x55\x2b\x9e\xf0\x52\xd7\xa5\xf2\x4b\x76\x2b\x2f\x0b\xe2\x2b\x02\xaf\x24\xaf\xd0\x51\x10\x3f\xde\xf4\x7d\x55\x59\x8d\x83\x32\x17\x6e\x33\xbe\xae\x97\x7b\x45\xea\x2c\x57\x3a\x51\xd6\x14\xca\x56\xb4\x4e\x95\x5a\xeb\xa2\x96\xc9\x5c\x46\x3d\x25\x8e\x06\x01\xf9\x1c\xc0\x7b\x12\x2c\xa5\xdc\x23\x5d\x54\xd7\xd3\x7d\x4c\x3d\xc4\x22\xa1\x84\x01\x8b\xa9\xa0\x37\x85\xf7\xc4\xda\x67\x99\x4f\xff\x8d\x23\x36\xb0\x8e\x2d\x93\x1f\x6b\xfc\x0a\xa9\x5b\x46\xae\x0f\x06\xb7\x92\x72\xe6\x82\x29\x75\x73\xf3\xca\xac\xd4\x43\x11\x47\x36\x8d\xdf\xd0\x40\x97\xe3\xe8\x3f\xf0\x19\x07\x22\xa4\x27\x4a\xa3\xef\x16\x6e\x36\xaa\x4b\xad\xc6\x7a\xc1\x29\x13\x1e\xca\x8c\x7e\x11\xf7\xa2\x90\x0a\x08\x17\xe2\xab\xf5\x49\xaa\x9a\xc5\x6c\x53\x80\x8c\x81\xb6\xda\x7b\x12\x50\x97\x88\x4d\xda\xd2\x82\xeb\xf5\x5e\xc4\xe8\x46\xae\x27\x57\x91\x33\x5b\xc9\xaa\x46\x40\xcb\x93\x05\x89\x67\x24\xd0\x34\xd6\xa2\x0e\xf8\x1d\xa3\xd7\x4b\x48\x12\xf4\xe1\x63\x11\xd4\x23\x60\x02\xcb\x0c\x00\x95\x29\x45\xcd\xea\x59\x51\x8e\x46\x5d\x32\x24\x19\x1e\xbc\xa6\xb1\xd0\xcb\xff\x02\xae\x97\x10\x8b\x02\x1a\xea\xe6\xd7\x28\xd1\x9a\x10\x1f\xa6\xf4\x3f\x40\x88\x32\x21\xd7\xc9\x02\xb3\xc8\xc6\xf5\xf0\x64\xe4\x97\xd1\x15\x30\x03\xb9\x1a\xaf\xd0\x4f\x25\xb8\xab\x4f\x2c\x38\x65\x7e\x4e\x1f\x47\x5c\x94\x49\x9f\x3a\x70\x1c\xd7\xd4\xfc\x5d\x89\x9c\x99\xb1\x55\x85\x36\x94\xc3\x14\x08\x9f\xcd\x8d\xd5\xb7\x5b\x70\x33\x67\xeb\xdd\x05\x73\x9c\xc3\x9d\x89\xe9\xfb\x2a\x66\x52\x6a\x9b\xf2\x3a\x87\xc6\xea\xaa\x99\x7e\xf4\x2d\x38\x57\x5f\xa1\x34\x34\x59\x50\x4f\x51\x36\xe2\xc9\xd7\xe5\x03\xea\xcd\x50\x6b\xeb\xed\x6f\xcb\xe2\x6c\xdc\xab\xd0\x0e\xf7\xab\xa6\x12\xdc\x5d\xa5\xed\xaa\xbf\xb9\xb3\x3e\x4d\x80\xb1\x7f\x26\x34\x41\x09\xda\xcf\xb6\xed\xd0\xa0\x19\x1b\xb4\x9d\x36\x67\xaa\x1d\x6e\x84\xdf\x7a\x8a\x03\xfc\x36\x24\x56\xfd\x39\xe3\x3e\x99\xb8\xcb\x6c\x6c\xca\x48\xb4\x97\xd8\x55\xa7\x71\x01\xbf\xeb\x95\xc6\x61\xb8\xac\x43\x8f\x7d\x33\xeb\xc9\x40\xf2\xe1\xcc\xfc\x23\x21\x79\x08\x01\x34\x43\x72\x3d\xc5\x7e\xb4\xf5\xde\x92\xcd\x10\xb0\xd2\xc1\xe3\x15\x87\xf2\x31\xdf\x06\x54\xdc\x35\xe4\x63\x0e\x3a\x2a\x5d\x14\xca\xb3\x3f\x07\xb1\xe4\x0c\xbd\xd4\x27\x56\x6b\x8f\x8e\x87\x03\x04\x78\x3c\xec\x75\xda\xad\xd6\x56\x7b\x50\x1d\x18\x48\x39\xa6\xf1\x9e\x39\x7c\xad\x92\xb5\x55\xeb\x5e\x55\xcc\xb7\x79\xd9\x34\x67\xd3\xf8\x92\xb5\xd5\x49\x39\xd7\x92\xb6\xf2\x1d\xd9\xca\x77\x67\xeb\x78\x18\xdb\xb2\xd2\x63\xf4\xe1\x63\xc5\xc8\x0f\x1f\xb3\x1b\x15\xa9\x3f\x75\xd5\xbe\x1e\x92\x2b\xb0\xf3\x89\x1e\x0a\x80\xa5\xdc\x8e\xd3\x69\xb7\xbc\x88\xa3\x7f\x7a\x48\x0e\x48\xda\xd4\xc0\x54\xb8\x72\x81\x94\x71\x82\xc8\x62\x01\xcc\xb5\xa9\x1b\xa7\xa4\x78\x3c\x74\x52\x2d\x73\x07\x52\x37\xd6\x55\x7e\x03\x5f\x74\xc5\xa6\xc0\x6f\xe8\x0c\xfe\x24\xcc\x0d\x80\xdb\xb3\x80\x02\x13\x69\x44\xce\xd4\xf7\x9e\x34\x72\x91\xcd\x23\x29\x42\x06\x50\xdd\xc0\xe3\xac\xd6\x14\xc9\x32\x48\xd9\xa4\x4b\xf0\x85\xfa\xed\x38\x4a\x53\x65\xaa\x8f\xe5\x4a\xc0\x6d\xa7\x7a\x6d\x3f\xe1\xe0\xd1\x5b\x49\x63\xf5\xc9\x82\x5a\x25\x44\x50\x80\x58\xba\x97\xcf\xc8\x37\x91\xbf\x90\xb4\x71\x95\x5f\x61\xd1\xc3\xa9\xa9\x42\x5d\x89\x0c\x93\x14\xf2\x24\x88\x67\xe0\x97\x63\x86\xcc\x0f\x19\xbf\x35\x5b\x8c\x7f\xa7\xcc\x5d\x3f\x14\xd8\xda\x2b\xc1\xf9\xe8\x72\x20\xfd\xbc\x56\x2b\x49\xfa\xab\x15\x8a\x19\xb9\x82\xb5\xfb\xad\x4a\x9a\xdd\xe3\x41\x42\x73\x15\x61\x2e\xb2\xe5\x2e\x06\xd7\xa8\x1b\xca\xf0\x28\xb0\xb3\x2c\x67\x63\x28\xa0\xb1\xb0\x1c\x07\xd9\x4c\x2e\x87\xcf\x22\x37\xa5\xab\x6b\x83\x32\x92\x52\x5d\xd4\xed\x1e\xa6\x31\x63\xe2\x38\x68\x55\x96\x76\x43\x38\xe2\x70\x5d\x77\x11\x5a\x26\xa6\x1e\x02\xce\x55\x6d\xe0\x09\xe1\x31\xd8\x2f\x39\x5c\x3b\xbf\xa9\xd1\x5f\x4e\x10\xa3\x41\x55\xbe\xfc\x68\xe9\x6c\xf3\x9e\xc2\x17\x2d\x67\x0d\x0c\xf2\x33\xe2\x3c\xe2\xd2\x73\x83\xfc\x31\x0c\xab\xa1\x09\xe1\x24\x04\x01\x5c\x66\x42\xaf\x81\x77\xa0\xbe\x02\xe7\x06\xa2\xc4\x29\x8f\x15\x09\xa6\xa9\xdc\xcb\x6d\x4d\x2b\xb4\x84\x88\x78\x53\xe4\xdf\x4b\xe0\x5f\x6d\xc7\x30\xf3\x9a\x86\x54\xd8\x1c\xae\x71\x7e\x95\x6c\xa2\x7a\xeb\x79\x31\x08\xbb\xa0\x4b\xef\x90\x8f\xd1\xaf\x0e\x3a\x42\x77\x31\x9f\x06\x81\xcd\xf1\x59\xc4\x04\xdc\x0a\xdb\x71\x8c\x61\xfb\x41\x01\x92\x99\xb4\xc3\xb8\x3c\x48\xcf\x21\x11\x64\x90\x85\x73\x73\x76\x1c\x4b\x5d\x07\x48\xf0\x25\x54\xa6\x75\x45\xf2\x02\x74\x76\x88\x42\xfd\x15\x75\x1f\x0f\x8a\x7c\xd8\x63\x24\x32\x5f\x1a\x3f\x57\x20\xa2\x6e\x6a\x65\xe6\x95\xd2\x96\x99\x24\xb6\x45\x5d\xcb\x79\x28\x74\x9d\x83\xd0\xd1\xa3\x87\xa8\xfb\xa8\x08\x72\x0e\x7b\x06\x20\x9b\xf0\x51\x8b\x0f\xad\x26\x70\x98\xbc\x9d\xee\x77\x8f\x32\x53\xcf\x1d\xfb\x8b\x0d\xb5\xcf\x31\xcf\x15\x1e\xbe\xbd\xd8\x53\x17\x1a\x1b\x95\xad\x4f\x75\x3a\xc3\xc3\xdf\x6a\xeb\xa5\xdd\xf1\x8e\x64\x62\xde\xbc\x4d\x6b\xe6\x93\x9f\x29\x88\x9c\xc9\x74\x2e\x55\x2d\x99\x69\xc2\xe4\xc3\xaa\x4e\xb5\x4f\xba\x06\x25\x76\xbf\x78\xcd\x2d\xeb\xb6\x34\x5b\x19\x70\x5f\xcf\x7f\x0f\xaf\x6f\xed\xf1\x5d\x7a\x7b\x2b\x2f\xd6\xde\x77\x37\xcf\xdd\x75\x05\x5b\xa5\xbf\xe7\x75\x6c\x55\xcc\x43\x5f\xcb\x36\xd4\x02\xd7\x87\x74\x59\xed\x9c\x5f\x73\x2d\x6b\x50\xa6\xb8\xfb\xdc\x36\xb0\xeb\xf5\x92\x64\x3c\x2c\xc2\xaa\x0f\xe3\xf1\x70\x27\xa9\x74\xea\xba\x9b\x57\xb0\xe3\x61\x6c\xe7\x57\x55\xa6\x99\x4d\x75\x1c\x8c\xf1\x63\x64\xd9\x94\xdc\xc0\xde\x9c\x1d\xd3\xcd\xe9\x27\x6d\xfe\xde\x3d\x81\x93\xe1\x52\x3d\xb8\xee\x6f\x03\x58\xfb\x20\xfc\x5c\x1b\xc0\x1f\x71\x3e\x4c\x9d\xfe\x96\xc1\x78\x68\x53\xf7\x69\x74\x8e\xcd\x4f\xe0\x26\xe6\x43\xe7\xa8\x2f\xbe\xab\xce\x71\x9b\xd7\xf1\x2a\xe3\xa1\x9b\x7c\x8e\xdd\xe4\x76\x15\x7b\xe8\x26\x0f\xdd\x64\xf5\x53\xb7\x03\xa7\xfb\xd6\xcf\xd9\x4d\x0e\x47\xaf\x47\x97\xa3\xfd\x6f\x28\x5d\xf5\xef\x22\xfb\xdb\x50\xd6\xfe\x3b\xcb\xa1\xa1\xdc\xb6\xa1\xfc\xa6\x5e\x32\xf5\x77\x53\x2f\x39\xba\x85\xd9\xde\x40\x48\xaa\xee\xe3\x40\x48\x0d\x30\x24\x9d\xf6\xff\x01\x00\x00\xff\xff\xaf\x85\x72\xe8\x26\x3a\x00\x00")

func templateGfTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateGfTmpl,
		"template/gf.tmpl",
	)
}

func templateGfTmpl() (*asset, error) {
	bytes, err := templateGfTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/gf.tmpl", size: 14886, mode: os.FileMode(438), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/gf.tmpl": templateGfTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"gf.tmpl": &bintree{templateGfTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
